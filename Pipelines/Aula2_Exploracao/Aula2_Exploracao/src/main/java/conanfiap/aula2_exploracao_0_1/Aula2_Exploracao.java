// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package conanfiap.aula2_exploracao_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Aula2_Exploracao Purpose: Exportar base para o time de Data Science<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Aula2_Exploracao implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(directoryPath != null){
				
					this.setProperty("directoryPath", directoryPath.toString());
				
			}
			
		}

public String directoryPath;
public String getDirectoryPath(){
	return this.directoryPath;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Aula2_Exploracao";
	private final String projectName = "CONANFIAP";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Aula2_Exploracao.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Aula2_Exploracao.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		



new java.io.File(context.directoryPath).mkdirs();
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
	

	
			String url_tDBConnection_2 = "jdbc:jtds:sqlserver://" + "DESKTOP-RVEH93Q" ;
		String port_tDBConnection_2 = "52890";
		String dbname_tDBConnection_2 = "AdventureWorks2014" ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + "52890";
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    		
				url_tDBConnection_2 += "//" + "AdventureWorks2014"; 
    	}
		url_tDBConnection_2 += ";appName=" + projectName + ";" + "integratedSecurity=true";  
	String dbUser_tDBConnection_2 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:1/EGptguaxprfMPzdOYiNqpeo9N0C9llrFdfZw==");
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_2", "");

	globalMap.put("db_tDBConnection_2",  "AdventureWorks2014");

	globalMap.put("conn_tDBConnection_2",conn_tDBConnection_2);
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short Sales_RevisionNumber;

				public short getSales_RevisionNumber () {
					return this.Sales_RevisionNumber;
				}
				
			    public java.util.Date Sales_OrderDate;

				public java.util.Date getSales_OrderDate () {
					return this.Sales_OrderDate;
				}
				
			    public java.util.Date Sales_DueDate;

				public java.util.Date getSales_DueDate () {
					return this.Sales_DueDate;
				}
				
			    public java.util.Date Sales_ShipDate;

				public java.util.Date getSales_ShipDate () {
					return this.Sales_ShipDate;
				}
				
			    public short Sales_Status;

				public short getSales_Status () {
					return this.Sales_Status;
				}
				
			    public boolean Sales_OnlineOrderFlag;

				public boolean getSales_OnlineOrderFlag () {
					return this.Sales_OnlineOrderFlag;
				}
				
			    public String Sales_SalesOrderNumber;

				public String getSales_SalesOrderNumber () {
					return this.Sales_SalesOrderNumber;
				}
				
			    public String Sales_PurchaseOrderNumber;

				public String getSales_PurchaseOrderNumber () {
					return this.Sales_PurchaseOrderNumber;
				}
				
			    public String Sales_AccountNumber;

				public String getSales_AccountNumber () {
					return this.Sales_AccountNumber;
				}
				
			    public int Sales_CustomerID;

				public int getSales_CustomerID () {
					return this.Sales_CustomerID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer Sales_TerritoryID;

				public Integer getSales_TerritoryID () {
					return this.Sales_TerritoryID;
				}
				
			    public int Sales_BillToAddressID;

				public int getSales_BillToAddressID () {
					return this.Sales_BillToAddressID;
				}
				
			    public int Sales_ShipToAddressID;

				public int getSales_ShipToAddressID () {
					return this.Sales_ShipToAddressID;
				}
				
			    public int Sales_ShipMethodID;

				public int getSales_ShipMethodID () {
					return this.Sales_ShipMethodID;
				}
				
			    public Integer Sales_CreditCardID;

				public Integer getSales_CreditCardID () {
					return this.Sales_CreditCardID;
				}
				
			    public String Sales_CreditCardApprovalCode;

				public String getSales_CreditCardApprovalCode () {
					return this.Sales_CreditCardApprovalCode;
				}
				
			    public Integer Sales_CurrencyRateID;

				public Integer getSales_CurrencyRateID () {
					return this.Sales_CurrencyRateID;
				}
				
			    public double Sales_SubTotal;

				public double getSales_SubTotal () {
					return this.Sales_SubTotal;
				}
				
			    public double Sales_TaxAmt;

				public double getSales_TaxAmt () {
					return this.Sales_TaxAmt;
				}
				
			    public double Sales_Freight;

				public double getSales_Freight () {
					return this.Sales_Freight;
				}
				
			    public double Sales_TotalDue;

				public double getSales_TotalDue () {
					return this.Sales_TotalDue;
				}
				
			    public String Sales_Comment;

				public String getSales_Comment () {
					return this.Sales_Comment;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public String Sales_CarrierTrackingNumber;

				public String getSales_CarrierTrackingNumber () {
					return this.Sales_CarrierTrackingNumber;
				}
				
			    public short Sales_OrderQty;

				public short getSales_OrderQty () {
					return this.Sales_OrderQty;
				}
				
			    public int Sales_ProductID;

				public int getSales_ProductID () {
					return this.Sales_ProductID;
				}
				
			    public int Sales_SpecialOfferID;

				public int getSales_SpecialOfferID () {
					return this.Sales_SpecialOfferID;
				}
				
			    public double Sales_UnitPrice;

				public double getSales_UnitPrice () {
					return this.Sales_UnitPrice;
				}
				
			    public double Sales_UnitPriceDiscount;

				public double getSales_UnitPriceDiscount () {
					return this.Sales_UnitPriceDiscount;
				}
				
			    public double Sales_LineTotal;

				public double getSales_LineTotal () {
					return this.Sales_LineTotal;
				}
				
			    public Integer SP_TerritoryID;

				public Integer getSP_TerritoryID () {
					return this.SP_TerritoryID;
				}
				
			    public Double SalesQuota;

				public Double getSalesQuota () {
					return this.SalesQuota;
				}
				
			    public double Bonus;

				public double getBonus () {
					return this.Bonus;
				}
				
			    public double CommissionPct;

				public double getCommissionPct () {
					return this.CommissionPct;
				}
				
			    public double SalesYTD;

				public double getSalesYTD () {
					return this.SalesYTD;
				}
				
			    public double SalesLastYear;

				public double getSalesLastYear () {
					return this.SalesLastYear;
				}
				
			    public String SP_PersonType;

				public String getSP_PersonType () {
					return this.SP_PersonType;
				}
				
			    public String SP_FirstName;

				public String getSP_FirstName () {
					return this.SP_FirstName;
				}
				
			    public String SP_MiddleName;

				public String getSP_MiddleName () {
					return this.SP_MiddleName;
				}
				
			    public String SP_LastName;

				public String getSP_LastName () {
					return this.SP_LastName;
				}
				
			    public String SP_Suffix;

				public String getSP_Suffix () {
					return this.SP_Suffix;
				}
				
			    public int SP_EmailPromotion;

				public int getSP_EmailPromotion () {
					return this.SP_EmailPromotion;
				}
				
			    public String SP_AdditionalContactInfo;

				public String getSP_AdditionalContactInfo () {
					return this.SP_AdditionalContactInfo;
				}
				
			    public String SP_Demographics;

				public String getSP_Demographics () {
					return this.SP_Demographics;
				}
				
			    public Integer IN_TerritoryID;

				public Integer getIN_TerritoryID () {
					return this.IN_TerritoryID;
				}
				
			    public String IN_PersonType;

				public String getIN_PersonType () {
					return this.IN_PersonType;
				}
				
			    public String IN_FirstName;

				public String getIN_FirstName () {
					return this.IN_FirstName;
				}
				
			    public String IN_MiddleName;

				public String getIN_MiddleName () {
					return this.IN_MiddleName;
				}
				
			    public String IN_LastName;

				public String getIN_LastName () {
					return this.IN_LastName;
				}
				
			    public String IN_Suffix;

				public String getIN_Suffix () {
					return this.IN_Suffix;
				}
				
			    public int IN_EmailPromotion;

				public int getIN_EmailPromotion () {
					return this.IN_EmailPromotion;
				}
				
			    public String IN_AdditionalContactInfo;

				public String getIN_AdditionalContactInfo () {
					return this.IN_AdditionalContactInfo;
				}
				
			    public String IN_Demographics;

				public String getIN_Demographics () {
					return this.IN_Demographics;
				}
				
			    public String Product_Name;

				public String getProduct_Name () {
					return this.Product_Name;
				}
				
			    public String Product_Number;

				public String getProduct_Number () {
					return this.Product_Number;
				}
				
			    public boolean Product_MakeFlag;

				public boolean getProduct_MakeFlag () {
					return this.Product_MakeFlag;
				}
				
			    public boolean Product_FinishedGoodsFlag;

				public boolean getProduct_FinishedGoodsFlag () {
					return this.Product_FinishedGoodsFlag;
				}
				
			    public String Product_Color;

				public String getProduct_Color () {
					return this.Product_Color;
				}
				
			    public short Product_SafetyStockLevel;

				public short getProduct_SafetyStockLevel () {
					return this.Product_SafetyStockLevel;
				}
				
			    public short Product_ReorderPoint;

				public short getProduct_ReorderPoint () {
					return this.Product_ReorderPoint;
				}
				
			    public double Product_StandardCost;

				public double getProduct_StandardCost () {
					return this.Product_StandardCost;
				}
				
			    public double Product_ListPrice;

				public double getProduct_ListPrice () {
					return this.Product_ListPrice;
				}
				
			    public String Product_Size;

				public String getProduct_Size () {
					return this.Product_Size;
				}
				
			    public String Product_SizeUnitMeasureName;

				public String getProduct_SizeUnitMeasureName () {
					return this.Product_SizeUnitMeasureName;
				}
				
			    public Double Product_Weight;

				public Double getProduct_Weight () {
					return this.Product_Weight;
				}
				
			    public String Product_WeightUnitMeasureName;

				public String getProduct_WeightUnitMeasureName () {
					return this.Product_WeightUnitMeasureName;
				}
				
			    public int Product_DaysToManufacture;

				public int getProduct_DaysToManufacture () {
					return this.Product_DaysToManufacture;
				}
				
			    public String Product_Line;

				public String getProduct_Line () {
					return this.Product_Line;
				}
				
			    public String Product_Class;

				public String getProduct_Class () {
					return this.Product_Class;
				}
				
			    public String Product_Style;

				public String getProduct_Style () {
					return this.Product_Style;
				}
				
			    public java.util.Date Product_SellStartDate;

				public java.util.Date getProduct_SellStartDate () {
					return this.Product_SellStartDate;
				}
				
			    public java.util.Date Product_SellEndDate;

				public java.util.Date getProduct_SellEndDate () {
					return this.Product_SellEndDate;
				}
				
			    public java.util.Date Product_DiscontinuedDate;

				public java.util.Date getProduct_DiscontinuedDate () {
					return this.Product_DiscontinuedDate;
				}
				
			    public String Product_SubCategory;

				public String getProduct_SubCategory () {
					return this.Product_SubCategory;
				}
				
			    public String Product_Category;

				public String getProduct_Category () {
					return this.Product_Category;
				}
				
			    public String Product_Model;

				public String getProduct_Model () {
					return this.Product_Model;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONANFIAP_Aula2_Exploracao.length) {
				if(length < 1024 && commonByteArray_CONANFIAP_Aula2_Exploracao.length == 0) {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[1024];
				} else {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length);
			strReturn = new String(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.Sales_RevisionNumber = dis.readShort();
					
					this.Sales_OrderDate = readDate(dis);
					
					this.Sales_DueDate = readDate(dis);
					
					this.Sales_ShipDate = readDate(dis);
					
			        this.Sales_Status = dis.readShort();
					
			        this.Sales_OnlineOrderFlag = dis.readBoolean();
					
					this.Sales_SalesOrderNumber = readString(dis);
					
					this.Sales_PurchaseOrderNumber = readString(dis);
					
					this.Sales_AccountNumber = readString(dis);
					
			        this.Sales_CustomerID = dis.readInt();
					
						this.SalesPersonID = readInteger(dis);
					
						this.Sales_TerritoryID = readInteger(dis);
					
			        this.Sales_BillToAddressID = dis.readInt();
					
			        this.Sales_ShipToAddressID = dis.readInt();
					
			        this.Sales_ShipMethodID = dis.readInt();
					
						this.Sales_CreditCardID = readInteger(dis);
					
					this.Sales_CreditCardApprovalCode = readString(dis);
					
						this.Sales_CurrencyRateID = readInteger(dis);
					
			        this.Sales_SubTotal = dis.readDouble();
					
			        this.Sales_TaxAmt = dis.readDouble();
					
			        this.Sales_Freight = dis.readDouble();
					
			        this.Sales_TotalDue = dis.readDouble();
					
					this.Sales_Comment = readString(dis);
					
			        this.SalesOrderDetailID = dis.readInt();
					
					this.Sales_CarrierTrackingNumber = readString(dis);
					
			        this.Sales_OrderQty = dis.readShort();
					
			        this.Sales_ProductID = dis.readInt();
					
			        this.Sales_SpecialOfferID = dis.readInt();
					
			        this.Sales_UnitPrice = dis.readDouble();
					
			        this.Sales_UnitPriceDiscount = dis.readDouble();
					
			        this.Sales_LineTotal = dis.readDouble();
					
						this.SP_TerritoryID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SalesQuota = null;
           				} else {
           			    	this.SalesQuota = dis.readDouble();
           				}
					
			        this.Bonus = dis.readDouble();
					
			        this.CommissionPct = dis.readDouble();
					
			        this.SalesYTD = dis.readDouble();
					
			        this.SalesLastYear = dis.readDouble();
					
					this.SP_PersonType = readString(dis);
					
					this.SP_FirstName = readString(dis);
					
					this.SP_MiddleName = readString(dis);
					
					this.SP_LastName = readString(dis);
					
					this.SP_Suffix = readString(dis);
					
			        this.SP_EmailPromotion = dis.readInt();
					
					this.SP_AdditionalContactInfo = readString(dis);
					
					this.SP_Demographics = readString(dis);
					
						this.IN_TerritoryID = readInteger(dis);
					
					this.IN_PersonType = readString(dis);
					
					this.IN_FirstName = readString(dis);
					
					this.IN_MiddleName = readString(dis);
					
					this.IN_LastName = readString(dis);
					
					this.IN_Suffix = readString(dis);
					
			        this.IN_EmailPromotion = dis.readInt();
					
					this.IN_AdditionalContactInfo = readString(dis);
					
					this.IN_Demographics = readString(dis);
					
					this.Product_Name = readString(dis);
					
					this.Product_Number = readString(dis);
					
			        this.Product_MakeFlag = dis.readBoolean();
					
			        this.Product_FinishedGoodsFlag = dis.readBoolean();
					
					this.Product_Color = readString(dis);
					
			        this.Product_SafetyStockLevel = dis.readShort();
					
			        this.Product_ReorderPoint = dis.readShort();
					
			        this.Product_StandardCost = dis.readDouble();
					
			        this.Product_ListPrice = dis.readDouble();
					
					this.Product_Size = readString(dis);
					
					this.Product_SizeUnitMeasureName = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Product_Weight = null;
           				} else {
           			    	this.Product_Weight = dis.readDouble();
           				}
					
					this.Product_WeightUnitMeasureName = readString(dis);
					
			        this.Product_DaysToManufacture = dis.readInt();
					
					this.Product_Line = readString(dis);
					
					this.Product_Class = readString(dis);
					
					this.Product_Style = readString(dis);
					
					this.Product_SellStartDate = readDate(dis);
					
					this.Product_SellEndDate = readDate(dis);
					
					this.Product_DiscontinuedDate = readDate(dis);
					
					this.Product_SubCategory = readString(dis);
					
					this.Product_Category = readString(dis);
					
					this.Product_Model = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.Sales_RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.Sales_OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.Sales_DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.Sales_ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Sales_Status);
					
					// boolean
				
		            	dos.writeBoolean(this.Sales_OnlineOrderFlag);
					
					// String
				
						writeString(this.Sales_SalesOrderNumber,dos);
					
					// String
				
						writeString(this.Sales_PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.Sales_AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.Sales_CustomerID);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.Sales_TerritoryID,dos);
					
					// int
				
		            	dos.writeInt(this.Sales_BillToAddressID);
					
					// int
				
		            	dos.writeInt(this.Sales_ShipToAddressID);
					
					// int
				
		            	dos.writeInt(this.Sales_ShipMethodID);
					
					// Integer
				
						writeInteger(this.Sales_CreditCardID,dos);
					
					// String
				
						writeString(this.Sales_CreditCardApprovalCode,dos);
					
					// Integer
				
						writeInteger(this.Sales_CurrencyRateID,dos);
					
					// double
				
		            	dos.writeDouble(this.Sales_SubTotal);
					
					// double
				
		            	dos.writeDouble(this.Sales_TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Sales_Freight);
					
					// double
				
		            	dos.writeDouble(this.Sales_TotalDue);
					
					// String
				
						writeString(this.Sales_Comment,dos);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// String
				
						writeString(this.Sales_CarrierTrackingNumber,dos);
					
					// short
				
		            	dos.writeShort(this.Sales_OrderQty);
					
					// int
				
		            	dos.writeInt(this.Sales_ProductID);
					
					// int
				
		            	dos.writeInt(this.Sales_SpecialOfferID);
					
					// double
				
		            	dos.writeDouble(this.Sales_UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.Sales_UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.Sales_LineTotal);
					
					// Integer
				
						writeInteger(this.SP_TerritoryID,dos);
					
					// Double
				
						if(this.SalesQuota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SalesQuota);
		            	}
					
					// double
				
		            	dos.writeDouble(this.Bonus);
					
					// double
				
		            	dos.writeDouble(this.CommissionPct);
					
					// double
				
		            	dos.writeDouble(this.SalesYTD);
					
					// double
				
		            	dos.writeDouble(this.SalesLastYear);
					
					// String
				
						writeString(this.SP_PersonType,dos);
					
					// String
				
						writeString(this.SP_FirstName,dos);
					
					// String
				
						writeString(this.SP_MiddleName,dos);
					
					// String
				
						writeString(this.SP_LastName,dos);
					
					// String
				
						writeString(this.SP_Suffix,dos);
					
					// int
				
		            	dos.writeInt(this.SP_EmailPromotion);
					
					// String
				
						writeString(this.SP_AdditionalContactInfo,dos);
					
					// String
				
						writeString(this.SP_Demographics,dos);
					
					// Integer
				
						writeInteger(this.IN_TerritoryID,dos);
					
					// String
				
						writeString(this.IN_PersonType,dos);
					
					// String
				
						writeString(this.IN_FirstName,dos);
					
					// String
				
						writeString(this.IN_MiddleName,dos);
					
					// String
				
						writeString(this.IN_LastName,dos);
					
					// String
				
						writeString(this.IN_Suffix,dos);
					
					// int
				
		            	dos.writeInt(this.IN_EmailPromotion);
					
					// String
				
						writeString(this.IN_AdditionalContactInfo,dos);
					
					// String
				
						writeString(this.IN_Demographics,dos);
					
					// String
				
						writeString(this.Product_Name,dos);
					
					// String
				
						writeString(this.Product_Number,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Product_MakeFlag);
					
					// boolean
				
		            	dos.writeBoolean(this.Product_FinishedGoodsFlag);
					
					// String
				
						writeString(this.Product_Color,dos);
					
					// short
				
		            	dos.writeShort(this.Product_SafetyStockLevel);
					
					// short
				
		            	dos.writeShort(this.Product_ReorderPoint);
					
					// double
				
		            	dos.writeDouble(this.Product_StandardCost);
					
					// double
				
		            	dos.writeDouble(this.Product_ListPrice);
					
					// String
				
						writeString(this.Product_Size,dos);
					
					// String
				
						writeString(this.Product_SizeUnitMeasureName,dos);
					
					// Double
				
						if(this.Product_Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Product_Weight);
		            	}
					
					// String
				
						writeString(this.Product_WeightUnitMeasureName,dos);
					
					// int
				
		            	dos.writeInt(this.Product_DaysToManufacture);
					
					// String
				
						writeString(this.Product_Line,dos);
					
					// String
				
						writeString(this.Product_Class,dos);
					
					// String
				
						writeString(this.Product_Style,dos);
					
					// java.util.Date
				
						writeDate(this.Product_SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.Product_SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.Product_DiscontinuedDate,dos);
					
					// String
				
						writeString(this.Product_SubCategory,dos);
					
					// String
				
						writeString(this.Product_Category,dos);
					
					// String
				
						writeString(this.Product_Model,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",Sales_RevisionNumber="+String.valueOf(Sales_RevisionNumber));
		sb.append(",Sales_OrderDate="+String.valueOf(Sales_OrderDate));
		sb.append(",Sales_DueDate="+String.valueOf(Sales_DueDate));
		sb.append(",Sales_ShipDate="+String.valueOf(Sales_ShipDate));
		sb.append(",Sales_Status="+String.valueOf(Sales_Status));
		sb.append(",Sales_OnlineOrderFlag="+String.valueOf(Sales_OnlineOrderFlag));
		sb.append(",Sales_SalesOrderNumber="+Sales_SalesOrderNumber);
		sb.append(",Sales_PurchaseOrderNumber="+Sales_PurchaseOrderNumber);
		sb.append(",Sales_AccountNumber="+Sales_AccountNumber);
		sb.append(",Sales_CustomerID="+String.valueOf(Sales_CustomerID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",Sales_TerritoryID="+String.valueOf(Sales_TerritoryID));
		sb.append(",Sales_BillToAddressID="+String.valueOf(Sales_BillToAddressID));
		sb.append(",Sales_ShipToAddressID="+String.valueOf(Sales_ShipToAddressID));
		sb.append(",Sales_ShipMethodID="+String.valueOf(Sales_ShipMethodID));
		sb.append(",Sales_CreditCardID="+String.valueOf(Sales_CreditCardID));
		sb.append(",Sales_CreditCardApprovalCode="+Sales_CreditCardApprovalCode);
		sb.append(",Sales_CurrencyRateID="+String.valueOf(Sales_CurrencyRateID));
		sb.append(",Sales_SubTotal="+String.valueOf(Sales_SubTotal));
		sb.append(",Sales_TaxAmt="+String.valueOf(Sales_TaxAmt));
		sb.append(",Sales_Freight="+String.valueOf(Sales_Freight));
		sb.append(",Sales_TotalDue="+String.valueOf(Sales_TotalDue));
		sb.append(",Sales_Comment="+Sales_Comment);
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",Sales_CarrierTrackingNumber="+Sales_CarrierTrackingNumber);
		sb.append(",Sales_OrderQty="+String.valueOf(Sales_OrderQty));
		sb.append(",Sales_ProductID="+String.valueOf(Sales_ProductID));
		sb.append(",Sales_SpecialOfferID="+String.valueOf(Sales_SpecialOfferID));
		sb.append(",Sales_UnitPrice="+String.valueOf(Sales_UnitPrice));
		sb.append(",Sales_UnitPriceDiscount="+String.valueOf(Sales_UnitPriceDiscount));
		sb.append(",Sales_LineTotal="+String.valueOf(Sales_LineTotal));
		sb.append(",SP_TerritoryID="+String.valueOf(SP_TerritoryID));
		sb.append(",SalesQuota="+String.valueOf(SalesQuota));
		sb.append(",Bonus="+String.valueOf(Bonus));
		sb.append(",CommissionPct="+String.valueOf(CommissionPct));
		sb.append(",SalesYTD="+String.valueOf(SalesYTD));
		sb.append(",SalesLastYear="+String.valueOf(SalesLastYear));
		sb.append(",SP_PersonType="+SP_PersonType);
		sb.append(",SP_FirstName="+SP_FirstName);
		sb.append(",SP_MiddleName="+SP_MiddleName);
		sb.append(",SP_LastName="+SP_LastName);
		sb.append(",SP_Suffix="+SP_Suffix);
		sb.append(",SP_EmailPromotion="+String.valueOf(SP_EmailPromotion));
		sb.append(",SP_AdditionalContactInfo="+SP_AdditionalContactInfo);
		sb.append(",SP_Demographics="+SP_Demographics);
		sb.append(",IN_TerritoryID="+String.valueOf(IN_TerritoryID));
		sb.append(",IN_PersonType="+IN_PersonType);
		sb.append(",IN_FirstName="+IN_FirstName);
		sb.append(",IN_MiddleName="+IN_MiddleName);
		sb.append(",IN_LastName="+IN_LastName);
		sb.append(",IN_Suffix="+IN_Suffix);
		sb.append(",IN_EmailPromotion="+String.valueOf(IN_EmailPromotion));
		sb.append(",IN_AdditionalContactInfo="+IN_AdditionalContactInfo);
		sb.append(",IN_Demographics="+IN_Demographics);
		sb.append(",Product_Name="+Product_Name);
		sb.append(",Product_Number="+Product_Number);
		sb.append(",Product_MakeFlag="+String.valueOf(Product_MakeFlag));
		sb.append(",Product_FinishedGoodsFlag="+String.valueOf(Product_FinishedGoodsFlag));
		sb.append(",Product_Color="+Product_Color);
		sb.append(",Product_SafetyStockLevel="+String.valueOf(Product_SafetyStockLevel));
		sb.append(",Product_ReorderPoint="+String.valueOf(Product_ReorderPoint));
		sb.append(",Product_StandardCost="+String.valueOf(Product_StandardCost));
		sb.append(",Product_ListPrice="+String.valueOf(Product_ListPrice));
		sb.append(",Product_Size="+Product_Size);
		sb.append(",Product_SizeUnitMeasureName="+Product_SizeUnitMeasureName);
		sb.append(",Product_Weight="+String.valueOf(Product_Weight));
		sb.append(",Product_WeightUnitMeasureName="+Product_WeightUnitMeasureName);
		sb.append(",Product_DaysToManufacture="+String.valueOf(Product_DaysToManufacture));
		sb.append(",Product_Line="+Product_Line);
		sb.append(",Product_Class="+Product_Class);
		sb.append(",Product_Style="+Product_Style);
		sb.append(",Product_SellStartDate="+String.valueOf(Product_SellStartDate));
		sb.append(",Product_SellEndDate="+String.valueOf(Product_SellEndDate));
		sb.append(",Product_DiscontinuedDate="+String.valueOf(Product_DiscontinuedDate));
		sb.append(",Product_SubCategory="+Product_SubCategory);
		sb.append(",Product_Category="+Product_Category);
		sb.append(",Product_Model="+Product_Model);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out_DataExplorationStruct implements routines.system.IPersistableRow<out_DataExplorationStruct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short Sales_RevisionNumber;

				public short getSales_RevisionNumber () {
					return this.Sales_RevisionNumber;
				}
				
			    public java.util.Date Sales_OrderDate;

				public java.util.Date getSales_OrderDate () {
					return this.Sales_OrderDate;
				}
				
			    public java.util.Date Sales_DueDate;

				public java.util.Date getSales_DueDate () {
					return this.Sales_DueDate;
				}
				
			    public java.util.Date Sales_ShipDate;

				public java.util.Date getSales_ShipDate () {
					return this.Sales_ShipDate;
				}
				
			    public short Sales_Status;

				public short getSales_Status () {
					return this.Sales_Status;
				}
				
			    public boolean Sales_OnlineOrderFlag;

				public boolean getSales_OnlineOrderFlag () {
					return this.Sales_OnlineOrderFlag;
				}
				
			    public String Sales_SalesOrderNumber;

				public String getSales_SalesOrderNumber () {
					return this.Sales_SalesOrderNumber;
				}
				
			    public String Sales_PurchaseOrderNumber;

				public String getSales_PurchaseOrderNumber () {
					return this.Sales_PurchaseOrderNumber;
				}
				
			    public String Sales_AccountNumber;

				public String getSales_AccountNumber () {
					return this.Sales_AccountNumber;
				}
				
			    public int Sales_CustomerID;

				public int getSales_CustomerID () {
					return this.Sales_CustomerID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer Sales_TerritoryID;

				public Integer getSales_TerritoryID () {
					return this.Sales_TerritoryID;
				}
				
			    public int Sales_BillToAddressID;

				public int getSales_BillToAddressID () {
					return this.Sales_BillToAddressID;
				}
				
			    public int Sales_ShipToAddressID;

				public int getSales_ShipToAddressID () {
					return this.Sales_ShipToAddressID;
				}
				
			    public int Sales_ShipMethodID;

				public int getSales_ShipMethodID () {
					return this.Sales_ShipMethodID;
				}
				
			    public Integer Sales_CreditCardID;

				public Integer getSales_CreditCardID () {
					return this.Sales_CreditCardID;
				}
				
			    public String Sales_CreditCardApprovalCode;

				public String getSales_CreditCardApprovalCode () {
					return this.Sales_CreditCardApprovalCode;
				}
				
			    public Integer Sales_CurrencyRateID;

				public Integer getSales_CurrencyRateID () {
					return this.Sales_CurrencyRateID;
				}
				
			    public double Sales_SubTotal;

				public double getSales_SubTotal () {
					return this.Sales_SubTotal;
				}
				
			    public double Sales_TaxAmt;

				public double getSales_TaxAmt () {
					return this.Sales_TaxAmt;
				}
				
			    public double Sales_Freight;

				public double getSales_Freight () {
					return this.Sales_Freight;
				}
				
			    public double Sales_TotalDue;

				public double getSales_TotalDue () {
					return this.Sales_TotalDue;
				}
				
			    public String Sales_Comment;

				public String getSales_Comment () {
					return this.Sales_Comment;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public String Sales_CarrierTrackingNumber;

				public String getSales_CarrierTrackingNumber () {
					return this.Sales_CarrierTrackingNumber;
				}
				
			    public short Sales_OrderQty;

				public short getSales_OrderQty () {
					return this.Sales_OrderQty;
				}
				
			    public int Sales_ProductID;

				public int getSales_ProductID () {
					return this.Sales_ProductID;
				}
				
			    public int Sales_SpecialOfferID;

				public int getSales_SpecialOfferID () {
					return this.Sales_SpecialOfferID;
				}
				
			    public double Sales_UnitPrice;

				public double getSales_UnitPrice () {
					return this.Sales_UnitPrice;
				}
				
			    public double Sales_UnitPriceDiscount;

				public double getSales_UnitPriceDiscount () {
					return this.Sales_UnitPriceDiscount;
				}
				
			    public double Sales_LineTotal;

				public double getSales_LineTotal () {
					return this.Sales_LineTotal;
				}
				
			    public Integer SP_TerritoryID;

				public Integer getSP_TerritoryID () {
					return this.SP_TerritoryID;
				}
				
			    public Double SalesQuota;

				public Double getSalesQuota () {
					return this.SalesQuota;
				}
				
			    public double Bonus;

				public double getBonus () {
					return this.Bonus;
				}
				
			    public double CommissionPct;

				public double getCommissionPct () {
					return this.CommissionPct;
				}
				
			    public double SalesYTD;

				public double getSalesYTD () {
					return this.SalesYTD;
				}
				
			    public double SalesLastYear;

				public double getSalesLastYear () {
					return this.SalesLastYear;
				}
				
			    public String SP_PersonType;

				public String getSP_PersonType () {
					return this.SP_PersonType;
				}
				
			    public String SP_FirstName;

				public String getSP_FirstName () {
					return this.SP_FirstName;
				}
				
			    public String SP_MiddleName;

				public String getSP_MiddleName () {
					return this.SP_MiddleName;
				}
				
			    public String SP_LastName;

				public String getSP_LastName () {
					return this.SP_LastName;
				}
				
			    public String SP_Suffix;

				public String getSP_Suffix () {
					return this.SP_Suffix;
				}
				
			    public int SP_EmailPromotion;

				public int getSP_EmailPromotion () {
					return this.SP_EmailPromotion;
				}
				
			    public String SP_AdditionalContactInfo;

				public String getSP_AdditionalContactInfo () {
					return this.SP_AdditionalContactInfo;
				}
				
			    public String SP_Demographics;

				public String getSP_Demographics () {
					return this.SP_Demographics;
				}
				
			    public Integer IN_TerritoryID;

				public Integer getIN_TerritoryID () {
					return this.IN_TerritoryID;
				}
				
			    public String IN_PersonType;

				public String getIN_PersonType () {
					return this.IN_PersonType;
				}
				
			    public String IN_FirstName;

				public String getIN_FirstName () {
					return this.IN_FirstName;
				}
				
			    public String IN_MiddleName;

				public String getIN_MiddleName () {
					return this.IN_MiddleName;
				}
				
			    public String IN_LastName;

				public String getIN_LastName () {
					return this.IN_LastName;
				}
				
			    public String IN_Suffix;

				public String getIN_Suffix () {
					return this.IN_Suffix;
				}
				
			    public int IN_EmailPromotion;

				public int getIN_EmailPromotion () {
					return this.IN_EmailPromotion;
				}
				
			    public String IN_AdditionalContactInfo;

				public String getIN_AdditionalContactInfo () {
					return this.IN_AdditionalContactInfo;
				}
				
			    public String IN_Demographics;

				public String getIN_Demographics () {
					return this.IN_Demographics;
				}
				
			    public String Product_Name;

				public String getProduct_Name () {
					return this.Product_Name;
				}
				
			    public String Product_Number;

				public String getProduct_Number () {
					return this.Product_Number;
				}
				
			    public boolean Product_MakeFlag;

				public boolean getProduct_MakeFlag () {
					return this.Product_MakeFlag;
				}
				
			    public boolean Product_FinishedGoodsFlag;

				public boolean getProduct_FinishedGoodsFlag () {
					return this.Product_FinishedGoodsFlag;
				}
				
			    public String Product_Color;

				public String getProduct_Color () {
					return this.Product_Color;
				}
				
			    public short Product_SafetyStockLevel;

				public short getProduct_SafetyStockLevel () {
					return this.Product_SafetyStockLevel;
				}
				
			    public short Product_ReorderPoint;

				public short getProduct_ReorderPoint () {
					return this.Product_ReorderPoint;
				}
				
			    public double Product_StandardCost;

				public double getProduct_StandardCost () {
					return this.Product_StandardCost;
				}
				
			    public double Product_ListPrice;

				public double getProduct_ListPrice () {
					return this.Product_ListPrice;
				}
				
			    public String Product_Size;

				public String getProduct_Size () {
					return this.Product_Size;
				}
				
			    public String Product_SizeUnitMeasureName;

				public String getProduct_SizeUnitMeasureName () {
					return this.Product_SizeUnitMeasureName;
				}
				
			    public Double Product_Weight;

				public Double getProduct_Weight () {
					return this.Product_Weight;
				}
				
			    public String Product_WeightUnitMeasureName;

				public String getProduct_WeightUnitMeasureName () {
					return this.Product_WeightUnitMeasureName;
				}
				
			    public int Product_DaysToManufacture;

				public int getProduct_DaysToManufacture () {
					return this.Product_DaysToManufacture;
				}
				
			    public String Product_Line;

				public String getProduct_Line () {
					return this.Product_Line;
				}
				
			    public String Product_Class;

				public String getProduct_Class () {
					return this.Product_Class;
				}
				
			    public String Product_Style;

				public String getProduct_Style () {
					return this.Product_Style;
				}
				
			    public java.util.Date Product_SellStartDate;

				public java.util.Date getProduct_SellStartDate () {
					return this.Product_SellStartDate;
				}
				
			    public java.util.Date Product_SellEndDate;

				public java.util.Date getProduct_SellEndDate () {
					return this.Product_SellEndDate;
				}
				
			    public java.util.Date Product_DiscontinuedDate;

				public java.util.Date getProduct_DiscontinuedDate () {
					return this.Product_DiscontinuedDate;
				}
				
			    public String Product_SubCategory;

				public String getProduct_SubCategory () {
					return this.Product_SubCategory;
				}
				
			    public String Product_Category;

				public String getProduct_Category () {
					return this.Product_Category;
				}
				
			    public String Product_Model;

				public String getProduct_Model () {
					return this.Product_Model;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONANFIAP_Aula2_Exploracao.length) {
				if(length < 1024 && commonByteArray_CONANFIAP_Aula2_Exploracao.length == 0) {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[1024];
				} else {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length);
			strReturn = new String(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.Sales_RevisionNumber = dis.readShort();
					
					this.Sales_OrderDate = readDate(dis);
					
					this.Sales_DueDate = readDate(dis);
					
					this.Sales_ShipDate = readDate(dis);
					
			        this.Sales_Status = dis.readShort();
					
			        this.Sales_OnlineOrderFlag = dis.readBoolean();
					
					this.Sales_SalesOrderNumber = readString(dis);
					
					this.Sales_PurchaseOrderNumber = readString(dis);
					
					this.Sales_AccountNumber = readString(dis);
					
			        this.Sales_CustomerID = dis.readInt();
					
						this.SalesPersonID = readInteger(dis);
					
						this.Sales_TerritoryID = readInteger(dis);
					
			        this.Sales_BillToAddressID = dis.readInt();
					
			        this.Sales_ShipToAddressID = dis.readInt();
					
			        this.Sales_ShipMethodID = dis.readInt();
					
						this.Sales_CreditCardID = readInteger(dis);
					
					this.Sales_CreditCardApprovalCode = readString(dis);
					
						this.Sales_CurrencyRateID = readInteger(dis);
					
			        this.Sales_SubTotal = dis.readDouble();
					
			        this.Sales_TaxAmt = dis.readDouble();
					
			        this.Sales_Freight = dis.readDouble();
					
			        this.Sales_TotalDue = dis.readDouble();
					
					this.Sales_Comment = readString(dis);
					
			        this.SalesOrderDetailID = dis.readInt();
					
					this.Sales_CarrierTrackingNumber = readString(dis);
					
			        this.Sales_OrderQty = dis.readShort();
					
			        this.Sales_ProductID = dis.readInt();
					
			        this.Sales_SpecialOfferID = dis.readInt();
					
			        this.Sales_UnitPrice = dis.readDouble();
					
			        this.Sales_UnitPriceDiscount = dis.readDouble();
					
			        this.Sales_LineTotal = dis.readDouble();
					
						this.SP_TerritoryID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SalesQuota = null;
           				} else {
           			    	this.SalesQuota = dis.readDouble();
           				}
					
			        this.Bonus = dis.readDouble();
					
			        this.CommissionPct = dis.readDouble();
					
			        this.SalesYTD = dis.readDouble();
					
			        this.SalesLastYear = dis.readDouble();
					
					this.SP_PersonType = readString(dis);
					
					this.SP_FirstName = readString(dis);
					
					this.SP_MiddleName = readString(dis);
					
					this.SP_LastName = readString(dis);
					
					this.SP_Suffix = readString(dis);
					
			        this.SP_EmailPromotion = dis.readInt();
					
					this.SP_AdditionalContactInfo = readString(dis);
					
					this.SP_Demographics = readString(dis);
					
						this.IN_TerritoryID = readInteger(dis);
					
					this.IN_PersonType = readString(dis);
					
					this.IN_FirstName = readString(dis);
					
					this.IN_MiddleName = readString(dis);
					
					this.IN_LastName = readString(dis);
					
					this.IN_Suffix = readString(dis);
					
			        this.IN_EmailPromotion = dis.readInt();
					
					this.IN_AdditionalContactInfo = readString(dis);
					
					this.IN_Demographics = readString(dis);
					
					this.Product_Name = readString(dis);
					
					this.Product_Number = readString(dis);
					
			        this.Product_MakeFlag = dis.readBoolean();
					
			        this.Product_FinishedGoodsFlag = dis.readBoolean();
					
					this.Product_Color = readString(dis);
					
			        this.Product_SafetyStockLevel = dis.readShort();
					
			        this.Product_ReorderPoint = dis.readShort();
					
			        this.Product_StandardCost = dis.readDouble();
					
			        this.Product_ListPrice = dis.readDouble();
					
					this.Product_Size = readString(dis);
					
					this.Product_SizeUnitMeasureName = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Product_Weight = null;
           				} else {
           			    	this.Product_Weight = dis.readDouble();
           				}
					
					this.Product_WeightUnitMeasureName = readString(dis);
					
			        this.Product_DaysToManufacture = dis.readInt();
					
					this.Product_Line = readString(dis);
					
					this.Product_Class = readString(dis);
					
					this.Product_Style = readString(dis);
					
					this.Product_SellStartDate = readDate(dis);
					
					this.Product_SellEndDate = readDate(dis);
					
					this.Product_DiscontinuedDate = readDate(dis);
					
					this.Product_SubCategory = readString(dis);
					
					this.Product_Category = readString(dis);
					
					this.Product_Model = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.Sales_RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.Sales_OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.Sales_DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.Sales_ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Sales_Status);
					
					// boolean
				
		            	dos.writeBoolean(this.Sales_OnlineOrderFlag);
					
					// String
				
						writeString(this.Sales_SalesOrderNumber,dos);
					
					// String
				
						writeString(this.Sales_PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.Sales_AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.Sales_CustomerID);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.Sales_TerritoryID,dos);
					
					// int
				
		            	dos.writeInt(this.Sales_BillToAddressID);
					
					// int
				
		            	dos.writeInt(this.Sales_ShipToAddressID);
					
					// int
				
		            	dos.writeInt(this.Sales_ShipMethodID);
					
					// Integer
				
						writeInteger(this.Sales_CreditCardID,dos);
					
					// String
				
						writeString(this.Sales_CreditCardApprovalCode,dos);
					
					// Integer
				
						writeInteger(this.Sales_CurrencyRateID,dos);
					
					// double
				
		            	dos.writeDouble(this.Sales_SubTotal);
					
					// double
				
		            	dos.writeDouble(this.Sales_TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Sales_Freight);
					
					// double
				
		            	dos.writeDouble(this.Sales_TotalDue);
					
					// String
				
						writeString(this.Sales_Comment,dos);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// String
				
						writeString(this.Sales_CarrierTrackingNumber,dos);
					
					// short
				
		            	dos.writeShort(this.Sales_OrderQty);
					
					// int
				
		            	dos.writeInt(this.Sales_ProductID);
					
					// int
				
		            	dos.writeInt(this.Sales_SpecialOfferID);
					
					// double
				
		            	dos.writeDouble(this.Sales_UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.Sales_UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.Sales_LineTotal);
					
					// Integer
				
						writeInteger(this.SP_TerritoryID,dos);
					
					// Double
				
						if(this.SalesQuota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SalesQuota);
		            	}
					
					// double
				
		            	dos.writeDouble(this.Bonus);
					
					// double
				
		            	dos.writeDouble(this.CommissionPct);
					
					// double
				
		            	dos.writeDouble(this.SalesYTD);
					
					// double
				
		            	dos.writeDouble(this.SalesLastYear);
					
					// String
				
						writeString(this.SP_PersonType,dos);
					
					// String
				
						writeString(this.SP_FirstName,dos);
					
					// String
				
						writeString(this.SP_MiddleName,dos);
					
					// String
				
						writeString(this.SP_LastName,dos);
					
					// String
				
						writeString(this.SP_Suffix,dos);
					
					// int
				
		            	dos.writeInt(this.SP_EmailPromotion);
					
					// String
				
						writeString(this.SP_AdditionalContactInfo,dos);
					
					// String
				
						writeString(this.SP_Demographics,dos);
					
					// Integer
				
						writeInteger(this.IN_TerritoryID,dos);
					
					// String
				
						writeString(this.IN_PersonType,dos);
					
					// String
				
						writeString(this.IN_FirstName,dos);
					
					// String
				
						writeString(this.IN_MiddleName,dos);
					
					// String
				
						writeString(this.IN_LastName,dos);
					
					// String
				
						writeString(this.IN_Suffix,dos);
					
					// int
				
		            	dos.writeInt(this.IN_EmailPromotion);
					
					// String
				
						writeString(this.IN_AdditionalContactInfo,dos);
					
					// String
				
						writeString(this.IN_Demographics,dos);
					
					// String
				
						writeString(this.Product_Name,dos);
					
					// String
				
						writeString(this.Product_Number,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Product_MakeFlag);
					
					// boolean
				
		            	dos.writeBoolean(this.Product_FinishedGoodsFlag);
					
					// String
				
						writeString(this.Product_Color,dos);
					
					// short
				
		            	dos.writeShort(this.Product_SafetyStockLevel);
					
					// short
				
		            	dos.writeShort(this.Product_ReorderPoint);
					
					// double
				
		            	dos.writeDouble(this.Product_StandardCost);
					
					// double
				
		            	dos.writeDouble(this.Product_ListPrice);
					
					// String
				
						writeString(this.Product_Size,dos);
					
					// String
				
						writeString(this.Product_SizeUnitMeasureName,dos);
					
					// Double
				
						if(this.Product_Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Product_Weight);
		            	}
					
					// String
				
						writeString(this.Product_WeightUnitMeasureName,dos);
					
					// int
				
		            	dos.writeInt(this.Product_DaysToManufacture);
					
					// String
				
						writeString(this.Product_Line,dos);
					
					// String
				
						writeString(this.Product_Class,dos);
					
					// String
				
						writeString(this.Product_Style,dos);
					
					// java.util.Date
				
						writeDate(this.Product_SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.Product_SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.Product_DiscontinuedDate,dos);
					
					// String
				
						writeString(this.Product_SubCategory,dos);
					
					// String
				
						writeString(this.Product_Category,dos);
					
					// String
				
						writeString(this.Product_Model,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",Sales_RevisionNumber="+String.valueOf(Sales_RevisionNumber));
		sb.append(",Sales_OrderDate="+String.valueOf(Sales_OrderDate));
		sb.append(",Sales_DueDate="+String.valueOf(Sales_DueDate));
		sb.append(",Sales_ShipDate="+String.valueOf(Sales_ShipDate));
		sb.append(",Sales_Status="+String.valueOf(Sales_Status));
		sb.append(",Sales_OnlineOrderFlag="+String.valueOf(Sales_OnlineOrderFlag));
		sb.append(",Sales_SalesOrderNumber="+Sales_SalesOrderNumber);
		sb.append(",Sales_PurchaseOrderNumber="+Sales_PurchaseOrderNumber);
		sb.append(",Sales_AccountNumber="+Sales_AccountNumber);
		sb.append(",Sales_CustomerID="+String.valueOf(Sales_CustomerID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",Sales_TerritoryID="+String.valueOf(Sales_TerritoryID));
		sb.append(",Sales_BillToAddressID="+String.valueOf(Sales_BillToAddressID));
		sb.append(",Sales_ShipToAddressID="+String.valueOf(Sales_ShipToAddressID));
		sb.append(",Sales_ShipMethodID="+String.valueOf(Sales_ShipMethodID));
		sb.append(",Sales_CreditCardID="+String.valueOf(Sales_CreditCardID));
		sb.append(",Sales_CreditCardApprovalCode="+Sales_CreditCardApprovalCode);
		sb.append(",Sales_CurrencyRateID="+String.valueOf(Sales_CurrencyRateID));
		sb.append(",Sales_SubTotal="+String.valueOf(Sales_SubTotal));
		sb.append(",Sales_TaxAmt="+String.valueOf(Sales_TaxAmt));
		sb.append(",Sales_Freight="+String.valueOf(Sales_Freight));
		sb.append(",Sales_TotalDue="+String.valueOf(Sales_TotalDue));
		sb.append(",Sales_Comment="+Sales_Comment);
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",Sales_CarrierTrackingNumber="+Sales_CarrierTrackingNumber);
		sb.append(",Sales_OrderQty="+String.valueOf(Sales_OrderQty));
		sb.append(",Sales_ProductID="+String.valueOf(Sales_ProductID));
		sb.append(",Sales_SpecialOfferID="+String.valueOf(Sales_SpecialOfferID));
		sb.append(",Sales_UnitPrice="+String.valueOf(Sales_UnitPrice));
		sb.append(",Sales_UnitPriceDiscount="+String.valueOf(Sales_UnitPriceDiscount));
		sb.append(",Sales_LineTotal="+String.valueOf(Sales_LineTotal));
		sb.append(",SP_TerritoryID="+String.valueOf(SP_TerritoryID));
		sb.append(",SalesQuota="+String.valueOf(SalesQuota));
		sb.append(",Bonus="+String.valueOf(Bonus));
		sb.append(",CommissionPct="+String.valueOf(CommissionPct));
		sb.append(",SalesYTD="+String.valueOf(SalesYTD));
		sb.append(",SalesLastYear="+String.valueOf(SalesLastYear));
		sb.append(",SP_PersonType="+SP_PersonType);
		sb.append(",SP_FirstName="+SP_FirstName);
		sb.append(",SP_MiddleName="+SP_MiddleName);
		sb.append(",SP_LastName="+SP_LastName);
		sb.append(",SP_Suffix="+SP_Suffix);
		sb.append(",SP_EmailPromotion="+String.valueOf(SP_EmailPromotion));
		sb.append(",SP_AdditionalContactInfo="+SP_AdditionalContactInfo);
		sb.append(",SP_Demographics="+SP_Demographics);
		sb.append(",IN_TerritoryID="+String.valueOf(IN_TerritoryID));
		sb.append(",IN_PersonType="+IN_PersonType);
		sb.append(",IN_FirstName="+IN_FirstName);
		sb.append(",IN_MiddleName="+IN_MiddleName);
		sb.append(",IN_LastName="+IN_LastName);
		sb.append(",IN_Suffix="+IN_Suffix);
		sb.append(",IN_EmailPromotion="+String.valueOf(IN_EmailPromotion));
		sb.append(",IN_AdditionalContactInfo="+IN_AdditionalContactInfo);
		sb.append(",IN_Demographics="+IN_Demographics);
		sb.append(",Product_Name="+Product_Name);
		sb.append(",Product_Number="+Product_Number);
		sb.append(",Product_MakeFlag="+String.valueOf(Product_MakeFlag));
		sb.append(",Product_FinishedGoodsFlag="+String.valueOf(Product_FinishedGoodsFlag));
		sb.append(",Product_Color="+Product_Color);
		sb.append(",Product_SafetyStockLevel="+String.valueOf(Product_SafetyStockLevel));
		sb.append(",Product_ReorderPoint="+String.valueOf(Product_ReorderPoint));
		sb.append(",Product_StandardCost="+String.valueOf(Product_StandardCost));
		sb.append(",Product_ListPrice="+String.valueOf(Product_ListPrice));
		sb.append(",Product_Size="+Product_Size);
		sb.append(",Product_SizeUnitMeasureName="+Product_SizeUnitMeasureName);
		sb.append(",Product_Weight="+String.valueOf(Product_Weight));
		sb.append(",Product_WeightUnitMeasureName="+Product_WeightUnitMeasureName);
		sb.append(",Product_DaysToManufacture="+String.valueOf(Product_DaysToManufacture));
		sb.append(",Product_Line="+Product_Line);
		sb.append(",Product_Class="+Product_Class);
		sb.append(",Product_Style="+Product_Style);
		sb.append(",Product_SellStartDate="+String.valueOf(Product_SellStartDate));
		sb.append(",Product_SellEndDate="+String.valueOf(Product_SellEndDate));
		sb.append(",Product_DiscontinuedDate="+String.valueOf(Product_DiscontinuedDate));
		sb.append(",Product_SubCategory="+Product_SubCategory);
		sb.append(",Product_Category="+Product_Category);
		sb.append(",Product_Model="+Product_Model);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_DataExplorationStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public boolean OnlineOrderFlag;

				public boolean getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer TerritoryID;

				public Integer getTerritoryID () {
					return this.TerritoryID;
				}
				
			    public int BillToAddressID;

				public int getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public int ShipToAddressID;

				public int getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public int ShipMethodID;

				public int getShipMethodID () {
					return this.ShipMethodID;
				}
				
			    public Integer CreditCardID;

				public Integer getCreditCardID () {
					return this.CreditCardID;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public Integer CurrencyRateID;

				public Integer getCurrencyRateID () {
					return this.CurrencyRateID;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public String CarrierTrackingNumber;

				public String getCarrierTrackingNumber () {
					return this.CarrierTrackingNumber;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public int SpecialOfferID;

				public int getSpecialOfferID () {
					return this.SpecialOfferID;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double LineTotal;

				public double getLineTotal () {
					return this.LineTotal;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONANFIAP_Aula2_Exploracao.length) {
				if(length < 1024 && commonByteArray_CONANFIAP_Aula2_Exploracao.length == 0) {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[1024];
				} else {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length);
			strReturn = new String(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
			        this.OnlineOrderFlag = dis.readBoolean();
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.SalesPersonID = readInteger(dis);
					
						this.TerritoryID = readInteger(dis);
					
			        this.BillToAddressID = dis.readInt();
					
			        this.ShipToAddressID = dis.readInt();
					
			        this.ShipMethodID = dis.readInt();
					
						this.CreditCardID = readInteger(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
						this.CurrencyRateID = readInteger(dis);
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
			        this.SalesOrderDetailID = dis.readInt();
					
					this.CarrierTrackingNumber = readString(dis);
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.SpecialOfferID = dis.readInt();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.LineTotal = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// boolean
				
		            	dos.writeBoolean(this.OnlineOrderFlag);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.TerritoryID,dos);
					
					// int
				
		            	dos.writeInt(this.BillToAddressID);
					
					// int
				
		            	dos.writeInt(this.ShipToAddressID);
					
					// int
				
		            	dos.writeInt(this.ShipMethodID);
					
					// Integer
				
						writeInteger(this.CreditCardID,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Integer
				
						writeInteger(this.CurrencyRateID,dos);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// String
				
						writeString(this.CarrierTrackingNumber,dos);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// int
				
		            	dos.writeInt(this.SpecialOfferID);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.LineTotal);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",TerritoryID="+String.valueOf(TerritoryID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",ShipMethodID="+String.valueOf(ShipMethodID));
		sb.append(",CreditCardID="+String.valueOf(CreditCardID));
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",CurrencyRateID="+String.valueOf(CurrencyRateID));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",CarrierTrackingNumber="+CarrierTrackingNumber);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",SpecialOfferID="+String.valueOf(SpecialOfferID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public boolean OnlineOrderFlag;

				public boolean getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer TerritoryID;

				public Integer getTerritoryID () {
					return this.TerritoryID;
				}
				
			    public int BillToAddressID;

				public int getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public int ShipToAddressID;

				public int getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public int ShipMethodID;

				public int getShipMethodID () {
					return this.ShipMethodID;
				}
				
			    public Integer CreditCardID;

				public Integer getCreditCardID () {
					return this.CreditCardID;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public Integer CurrencyRateID;

				public Integer getCurrencyRateID () {
					return this.CurrencyRateID;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public String CarrierTrackingNumber;

				public String getCarrierTrackingNumber () {
					return this.CarrierTrackingNumber;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public int SpecialOfferID;

				public int getSpecialOfferID () {
					return this.SpecialOfferID;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double LineTotal;

				public double getLineTotal () {
					return this.LineTotal;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CONANFIAP_Aula2_Exploracao.length) {
				if(length < 1024 && commonByteArray_CONANFIAP_Aula2_Exploracao.length == 0) {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[1024];
				} else {
   					commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length);
			strReturn = new String(commonByteArray_CONANFIAP_Aula2_Exploracao, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
			        this.OnlineOrderFlag = dis.readBoolean();
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.SalesPersonID = readInteger(dis);
					
						this.TerritoryID = readInteger(dis);
					
			        this.BillToAddressID = dis.readInt();
					
			        this.ShipToAddressID = dis.readInt();
					
			        this.ShipMethodID = dis.readInt();
					
						this.CreditCardID = readInteger(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
						this.CurrencyRateID = readInteger(dis);
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
			        this.SalesOrderDetailID = dis.readInt();
					
					this.CarrierTrackingNumber = readString(dis);
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.SpecialOfferID = dis.readInt();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.LineTotal = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// boolean
				
		            	dos.writeBoolean(this.OnlineOrderFlag);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.TerritoryID,dos);
					
					// int
				
		            	dos.writeInt(this.BillToAddressID);
					
					// int
				
		            	dos.writeInt(this.ShipToAddressID);
					
					// int
				
		            	dos.writeInt(this.ShipMethodID);
					
					// Integer
				
						writeInteger(this.CreditCardID,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Integer
				
						writeInteger(this.CurrencyRateID,dos);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// String
				
						writeString(this.CarrierTrackingNumber,dos);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// int
				
		            	dos.writeInt(this.SpecialOfferID);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.LineTotal);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",TerritoryID="+String.valueOf(TerritoryID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",ShipMethodID="+String.valueOf(ShipMethodID));
		sb.append(",CreditCardID="+String.valueOf(CreditCardID));
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",CurrencyRateID="+String.valueOf(CurrencyRateID));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",CarrierTrackingNumber="+CarrierTrackingNumber);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",SpecialOfferID="+String.valueOf(SpecialOfferID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
out_DataExplorationStruct out_DataExploration = new out_DataExplorationStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Talend/9ABD_Conan/Relatorios/Aula2_Exploracao/Exploracao_DataScience.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[78];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("|");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator("|");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="SalesOrderID";
                                    headColutFileOutputDelimited_1[1]="Sales_RevisionNumber";
                                    headColutFileOutputDelimited_1[2]="Sales_OrderDate";
                                    headColutFileOutputDelimited_1[3]="Sales_DueDate";
                                    headColutFileOutputDelimited_1[4]="Sales_ShipDate";
                                    headColutFileOutputDelimited_1[5]="Sales_Status";
                                    headColutFileOutputDelimited_1[6]="Sales_OnlineOrderFlag";
                                    headColutFileOutputDelimited_1[7]="Sales_SalesOrderNumber";
                                    headColutFileOutputDelimited_1[8]="Sales_PurchaseOrderNumber";
                                    headColutFileOutputDelimited_1[9]="Sales_AccountNumber";
                                    headColutFileOutputDelimited_1[10]="Sales_CustomerID";
                                    headColutFileOutputDelimited_1[11]="SalesPersonID";
                                    headColutFileOutputDelimited_1[12]="Sales_TerritoryID";
                                    headColutFileOutputDelimited_1[13]="Sales_BillToAddressID";
                                    headColutFileOutputDelimited_1[14]="Sales_ShipToAddressID";
                                    headColutFileOutputDelimited_1[15]="Sales_ShipMethodID";
                                    headColutFileOutputDelimited_1[16]="Sales_CreditCardID";
                                    headColutFileOutputDelimited_1[17]="Sales_CreditCardApprovalCode";
                                    headColutFileOutputDelimited_1[18]="Sales_CurrencyRateID";
                                    headColutFileOutputDelimited_1[19]="Sales_SubTotal";
                                    headColutFileOutputDelimited_1[20]="Sales_TaxAmt";
                                    headColutFileOutputDelimited_1[21]="Sales_Freight";
                                    headColutFileOutputDelimited_1[22]="Sales_TotalDue";
                                    headColutFileOutputDelimited_1[23]="Sales_Comment";
                                    headColutFileOutputDelimited_1[24]="SalesOrderDetailID";
                                    headColutFileOutputDelimited_1[25]="Sales_CarrierTrackingNumber";
                                    headColutFileOutputDelimited_1[26]="Sales_OrderQty";
                                    headColutFileOutputDelimited_1[27]="Sales_ProductID";
                                    headColutFileOutputDelimited_1[28]="Sales_SpecialOfferID";
                                    headColutFileOutputDelimited_1[29]="Sales_UnitPrice";
                                    headColutFileOutputDelimited_1[30]="Sales_UnitPriceDiscount";
                                    headColutFileOutputDelimited_1[31]="Sales_LineTotal";
                                    headColutFileOutputDelimited_1[32]="SP_TerritoryID";
                                    headColutFileOutputDelimited_1[33]="SalesQuota";
                                    headColutFileOutputDelimited_1[34]="Bonus";
                                    headColutFileOutputDelimited_1[35]="CommissionPct";
                                    headColutFileOutputDelimited_1[36]="SalesYTD";
                                    headColutFileOutputDelimited_1[37]="SalesLastYear";
                                    headColutFileOutputDelimited_1[38]="SP_PersonType";
                                    headColutFileOutputDelimited_1[39]="SP_FirstName";
                                    headColutFileOutputDelimited_1[40]="SP_MiddleName";
                                    headColutFileOutputDelimited_1[41]="SP_LastName";
                                    headColutFileOutputDelimited_1[42]="SP_Suffix";
                                    headColutFileOutputDelimited_1[43]="SP_EmailPromotion";
                                    headColutFileOutputDelimited_1[44]="SP_AdditionalContactInfo";
                                    headColutFileOutputDelimited_1[45]="SP_Demographics";
                                    headColutFileOutputDelimited_1[46]="IN_TerritoryID";
                                    headColutFileOutputDelimited_1[47]="IN_PersonType";
                                    headColutFileOutputDelimited_1[48]="IN_FirstName";
                                    headColutFileOutputDelimited_1[49]="IN_MiddleName";
                                    headColutFileOutputDelimited_1[50]="IN_LastName";
                                    headColutFileOutputDelimited_1[51]="IN_Suffix";
                                    headColutFileOutputDelimited_1[52]="IN_EmailPromotion";
                                    headColutFileOutputDelimited_1[53]="IN_AdditionalContactInfo";
                                    headColutFileOutputDelimited_1[54]="IN_Demographics";
                                    headColutFileOutputDelimited_1[55]="Product_Name";
                                    headColutFileOutputDelimited_1[56]="Product_Number";
                                    headColutFileOutputDelimited_1[57]="Product_MakeFlag";
                                    headColutFileOutputDelimited_1[58]="Product_FinishedGoodsFlag";
                                    headColutFileOutputDelimited_1[59]="Product_Color";
                                    headColutFileOutputDelimited_1[60]="Product_SafetyStockLevel";
                                    headColutFileOutputDelimited_1[61]="Product_ReorderPoint";
                                    headColutFileOutputDelimited_1[62]="Product_StandardCost";
                                    headColutFileOutputDelimited_1[63]="Product_ListPrice";
                                    headColutFileOutputDelimited_1[64]="Product_Size";
                                    headColutFileOutputDelimited_1[65]="Product_SizeUnitMeasureName";
                                    headColutFileOutputDelimited_1[66]="Product_Weight";
                                    headColutFileOutputDelimited_1[67]="Product_WeightUnitMeasureName";
                                    headColutFileOutputDelimited_1[68]="Product_DaysToManufacture";
                                    headColutFileOutputDelimited_1[69]="Product_Line";
                                    headColutFileOutputDelimited_1[70]="Product_Class";
                                    headColutFileOutputDelimited_1[71]="Product_Style";
                                    headColutFileOutputDelimited_1[72]="Product_SellStartDate";
                                    headColutFileOutputDelimited_1[73]="Product_SellEndDate";
                                    headColutFileOutputDelimited_1[74]="Product_DiscontinuedDate";
                                    headColutFileOutputDelimited_1[75]="Product_SubCategory";
                                    headColutFileOutputDelimited_1[76]="Product_Category";
                                    headColutFileOutputDelimited_1[77]="Product_Model";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out_DataExploration");
					}
				
		int tos_count_tSampleRow_1 = 0;
		

String[] rangetSampleRow_1 = "1..30000".split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_DataExplorationStruct out_DataExploration_tmp = new out_DataExplorationStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT\n	a.*,\n	b.SalesOrderDetailID,\n	b.CarrierTrackingNumber,\n	b.OrderQty,\n	b.ProductID,\n	b.SpecialOfferID,\n	b.U"
+"nitPrice,\n	b.UnitPriceDiscount,\n	b.LineTotal\nFROM\n	Sales.SalesOrderHeader a\nINNER JOIN\n	Sales.SalesOrderDetail b\n"
+"	ON a.SalesOrderID = b.SalesOrderID ";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row1.SalesOrderID = 0;
							} else {
		                          
            row1.SalesOrderID = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row1.RevisionNumber = 0;
							} else {
		                          
            row1.RevisionNumber = rs_tDBInput_4.getShort(2);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row1.OrderDate = null;
							} else {
										
			row1.OrderDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 3);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row1.DueDate = null;
							} else {
										
			row1.DueDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 4);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row1.ShipDate = null;
							} else {
										
			row1.ShipDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 5);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row1.Status = 0;
							} else {
		                          
            row1.Status = rs_tDBInput_4.getShort(6);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row1.OnlineOrderFlag = false;
							} else {
	                         		
            row1.OnlineOrderFlag = rs_tDBInput_4.getBoolean(7);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row1.SalesOrderNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(8);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SalesOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row1.SalesOrderNumber = tmpContent_tDBInput_4;
                }
            } else {
                row1.SalesOrderNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row1.PurchaseOrderNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(9);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PurchaseOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row1.PurchaseOrderNumber = tmpContent_tDBInput_4;
                }
            } else {
                row1.PurchaseOrderNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row1.AccountNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.AccountNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row1.AccountNumber = tmpContent_tDBInput_4;
                }
            } else {
                row1.AccountNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row1.CustomerID = 0;
							} else {
		                          
            row1.CustomerID = rs_tDBInput_4.getInt(11);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row1.SalesPersonID = null;
							} else {
		                          
            row1.SalesPersonID = rs_tDBInput_4.getInt(12);
            if(rs_tDBInput_4.wasNull()){
                    row1.SalesPersonID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row1.TerritoryID = null;
							} else {
		                          
            row1.TerritoryID = rs_tDBInput_4.getInt(13);
            if(rs_tDBInput_4.wasNull()){
                    row1.TerritoryID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row1.BillToAddressID = 0;
							} else {
		                          
            row1.BillToAddressID = rs_tDBInput_4.getInt(14);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row1.ShipToAddressID = 0;
							} else {
		                          
            row1.ShipToAddressID = rs_tDBInput_4.getInt(15);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row1.ShipMethodID = 0;
							} else {
		                          
            row1.ShipMethodID = rs_tDBInput_4.getInt(16);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row1.CreditCardID = null;
							} else {
		                          
            row1.CreditCardID = rs_tDBInput_4.getInt(17);
            if(rs_tDBInput_4.wasNull()){
                    row1.CreditCardID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row1.CreditCardApprovalCode = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(18);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CreditCardApprovalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row1.CreditCardApprovalCode = tmpContent_tDBInput_4;
                }
            } else {
                row1.CreditCardApprovalCode = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row1.CurrencyRateID = null;
							} else {
		                          
            row1.CurrencyRateID = rs_tDBInput_4.getInt(19);
            if(rs_tDBInput_4.wasNull()){
                    row1.CurrencyRateID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row1.SubTotal = 0;
							} else {
	                         		
            row1.SubTotal = rs_tDBInput_4.getDouble(20);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row1.TaxAmt = 0;
							} else {
	                         		
            row1.TaxAmt = rs_tDBInput_4.getDouble(21);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row1.Freight = 0;
							} else {
	                         		
            row1.Freight = rs_tDBInput_4.getDouble(22);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row1.TotalDue = 0;
							} else {
	                         		
            row1.TotalDue = rs_tDBInput_4.getDouble(23);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row1.Comment = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(24);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Comment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row1.Comment = tmpContent_tDBInput_4;
                }
            } else {
                row1.Comment = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row1.rowguid = null;
							} else {
		                          
            row1.rowguid = rs_tDBInput_4.getObject(25);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row1.ModifiedDate = null;
							} else {
										
			row1.ModifiedDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 26);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 27) {
								row1.SalesOrderDetailID = 0;
							} else {
		                          
            row1.SalesOrderDetailID = rs_tDBInput_4.getInt(27);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 28) {
								row1.CarrierTrackingNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(28);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CarrierTrackingNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row1.CarrierTrackingNumber = tmpContent_tDBInput_4;
                }
            } else {
                row1.CarrierTrackingNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 29) {
								row1.OrderQty = 0;
							} else {
		                          
            row1.OrderQty = rs_tDBInput_4.getShort(29);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 30) {
								row1.ProductID = 0;
							} else {
		                          
            row1.ProductID = rs_tDBInput_4.getInt(30);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 31) {
								row1.SpecialOfferID = 0;
							} else {
		                          
            row1.SpecialOfferID = rs_tDBInput_4.getInt(31);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 32) {
								row1.UnitPrice = 0;
							} else {
	                         		
            row1.UnitPrice = rs_tDBInput_4.getDouble(32);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 33) {
								row1.UnitPriceDiscount = 0;
							} else {
	                         		
            row1.UnitPriceDiscount = rs_tDBInput_4.getDouble(33);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 34) {
								row1.LineTotal = 0;
							} else {
	                         		
            row1.LineTotal = rs_tDBInput_4.getDouble(34);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row4__SalesPersonID = row1.SalesPersonID ;
	                        		    	if(exprKeyValue_row4__SalesPersonID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row4HashKey.SalesPersonID = (int)(Integer) exprKeyValue_row4__SalesPersonID;
                        		    		}
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SalesPersonID = '" + row4HashKey.SalesPersonID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row2__CustomerID = row1.CustomerID ;
	                        		    	if(exprKeyValue_row2__CustomerID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.CustomerID = (int)(Integer) exprKeyValue_row2__CustomerID;
                        		    		}
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CustomerID = '" + row2HashKey.CustomerID + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row3__ProductID = row1.ProductID ;
	                        		    	if(exprKeyValue_row3__ProductID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row3HashKey.ProductID = (int)(Integer) exprKeyValue_row3__ProductID;
                        		    		}
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.ProductID = '" + row3HashKey.ProductID + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out_DataExploration = null;


// # Output table : 'out_DataExploration'
out_DataExploration_tmp.SalesOrderID = row1.SalesOrderID ;
out_DataExploration_tmp.Sales_RevisionNumber = row1.RevisionNumber ;
out_DataExploration_tmp.Sales_OrderDate = row1.OrderDate ;
out_DataExploration_tmp.Sales_DueDate = row1.DueDate ;
out_DataExploration_tmp.Sales_ShipDate = row1.ShipDate ;
out_DataExploration_tmp.Sales_Status = row1.Status ;
out_DataExploration_tmp.Sales_OnlineOrderFlag = row1.OnlineOrderFlag ;
out_DataExploration_tmp.Sales_SalesOrderNumber = row1.SalesOrderNumber ;
out_DataExploration_tmp.Sales_PurchaseOrderNumber = row1.PurchaseOrderNumber ;
out_DataExploration_tmp.Sales_AccountNumber = row1.AccountNumber ;
out_DataExploration_tmp.Sales_CustomerID = row1.CustomerID ;
out_DataExploration_tmp.SalesPersonID = row1.SalesPersonID ;
out_DataExploration_tmp.Sales_TerritoryID = row1.TerritoryID ;
out_DataExploration_tmp.Sales_BillToAddressID = row1.BillToAddressID ;
out_DataExploration_tmp.Sales_ShipToAddressID = row1.ShipToAddressID ;
out_DataExploration_tmp.Sales_ShipMethodID = row1.ShipMethodID ;
out_DataExploration_tmp.Sales_CreditCardID = row1.CreditCardID ;
out_DataExploration_tmp.Sales_CreditCardApprovalCode = row1.CreditCardApprovalCode ;
out_DataExploration_tmp.Sales_CurrencyRateID = row1.CurrencyRateID ;
out_DataExploration_tmp.Sales_SubTotal = row1.SubTotal ;
out_DataExploration_tmp.Sales_TaxAmt = row1.TaxAmt ;
out_DataExploration_tmp.Sales_Freight = row1.Freight ;
out_DataExploration_tmp.Sales_TotalDue = row1.TotalDue ;
out_DataExploration_tmp.Sales_Comment = row1.Comment ;
out_DataExploration_tmp.SalesOrderDetailID = row1.SalesOrderDetailID ;
out_DataExploration_tmp.Sales_CarrierTrackingNumber = row1.CarrierTrackingNumber ;
out_DataExploration_tmp.Sales_OrderQty = row1.OrderQty ;
out_DataExploration_tmp.Sales_ProductID = row1.ProductID ;
out_DataExploration_tmp.Sales_SpecialOfferID = row1.SpecialOfferID ;
out_DataExploration_tmp.Sales_UnitPrice = row1.UnitPrice ;
out_DataExploration_tmp.Sales_UnitPriceDiscount = row1.UnitPriceDiscount ;
out_DataExploration_tmp.Sales_LineTotal = row1.LineTotal ;
out_DataExploration_tmp.SP_TerritoryID = row4.TerritoryID ;
out_DataExploration_tmp.SalesQuota = row4.SalesQuota ;
out_DataExploration_tmp.Bonus = row4.Bonus ;
out_DataExploration_tmp.CommissionPct = row4.CommissionPct ;
out_DataExploration_tmp.SalesYTD = row4.SalesYTD ;
out_DataExploration_tmp.SalesLastYear = row4.SalesLastYear ;
out_DataExploration_tmp.SP_PersonType = row4.PersonType ;
out_DataExploration_tmp.SP_FirstName = row4.FirstName ;
out_DataExploration_tmp.SP_MiddleName = row4.MiddleName ;
out_DataExploration_tmp.SP_LastName = row4.LastName ;
out_DataExploration_tmp.SP_Suffix = row4.Suffix ;
out_DataExploration_tmp.SP_EmailPromotion = row4.EmailPromotion ;
out_DataExploration_tmp.SP_AdditionalContactInfo = row4.AdditionalContactInfo ;
out_DataExploration_tmp.SP_Demographics = row4.Demographics ;
out_DataExploration_tmp.IN_TerritoryID = row2.TerritoryID ;
out_DataExploration_tmp.IN_PersonType = row2.PersonType ;
out_DataExploration_tmp.IN_FirstName = row2.FirstName ;
out_DataExploration_tmp.IN_MiddleName = row2.MiddleName ;
out_DataExploration_tmp.IN_LastName = row2.LastName ;
out_DataExploration_tmp.IN_Suffix = row2.Suffix ;
out_DataExploration_tmp.IN_EmailPromotion = row2.EmailPromotion ;
out_DataExploration_tmp.IN_AdditionalContactInfo = row2.AdditionalContactInfo ;
out_DataExploration_tmp.IN_Demographics = row2.Demographics ;
out_DataExploration_tmp.Product_Name = row3.Name ;
out_DataExploration_tmp.Product_Number = row3.ProductNumber ;
out_DataExploration_tmp.Product_MakeFlag = row3.MakeFlag ;
out_DataExploration_tmp.Product_FinishedGoodsFlag = row3.FinishedGoodsFlag ;
out_DataExploration_tmp.Product_Color = row3.Color ;
out_DataExploration_tmp.Product_SafetyStockLevel = row3.SafetyStockLevel ;
out_DataExploration_tmp.Product_ReorderPoint = row3.ReorderPoint ;
out_DataExploration_tmp.Product_StandardCost = row3.StandardCost ;
out_DataExploration_tmp.Product_ListPrice = row3.ListPrice ;
out_DataExploration_tmp.Product_Size = row3.Size ;
out_DataExploration_tmp.Product_SizeUnitMeasureName = row3.SizeUnitMeasureName ;
out_DataExploration_tmp.Product_Weight = row3.Weight ;
out_DataExploration_tmp.Product_WeightUnitMeasureName = row3.WeightUnitMeasureName ;
out_DataExploration_tmp.Product_DaysToManufacture = row3.DaysToManufacture ;
out_DataExploration_tmp.Product_Line = row3.ProductLine ;
out_DataExploration_tmp.Product_Class = row3._Class ;
out_DataExploration_tmp.Product_Style = row3.Style ;
out_DataExploration_tmp.Product_SellStartDate = row3.SellStartDate ;
out_DataExploration_tmp.Product_SellEndDate = row3.SellEndDate ;
out_DataExploration_tmp.Product_DiscontinuedDate = row3.DiscontinuedDate ;
out_DataExploration_tmp.Product_SubCategory = row3.ProductSubCategory ;
out_DataExploration_tmp.Product_Category = row3.ProductCategory ;
out_DataExploration_tmp.Product_Model = row3.ProductModel ;
out_DataExploration = out_DataExploration_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out_DataExploration"
if(out_DataExploration != null) { 



	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out_DataExploration");
					}
					

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            row5 = null;            	
 	}else{  	
 	   row5 = new row5Struct();
 	   

       row5.SalesOrderID = out_DataExploration.SalesOrderID;
       

       row5.Sales_RevisionNumber = out_DataExploration.Sales_RevisionNumber;
       

       row5.Sales_OrderDate = out_DataExploration.Sales_OrderDate;
       

       row5.Sales_DueDate = out_DataExploration.Sales_DueDate;
       

       row5.Sales_ShipDate = out_DataExploration.Sales_ShipDate;
       

       row5.Sales_Status = out_DataExploration.Sales_Status;
       

       row5.Sales_OnlineOrderFlag = out_DataExploration.Sales_OnlineOrderFlag;
       

       row5.Sales_SalesOrderNumber = out_DataExploration.Sales_SalesOrderNumber;
       

       row5.Sales_PurchaseOrderNumber = out_DataExploration.Sales_PurchaseOrderNumber;
       

       row5.Sales_AccountNumber = out_DataExploration.Sales_AccountNumber;
       

       row5.Sales_CustomerID = out_DataExploration.Sales_CustomerID;
       

       row5.SalesPersonID = out_DataExploration.SalesPersonID;
       

       row5.Sales_TerritoryID = out_DataExploration.Sales_TerritoryID;
       

       row5.Sales_BillToAddressID = out_DataExploration.Sales_BillToAddressID;
       

       row5.Sales_ShipToAddressID = out_DataExploration.Sales_ShipToAddressID;
       

       row5.Sales_ShipMethodID = out_DataExploration.Sales_ShipMethodID;
       

       row5.Sales_CreditCardID = out_DataExploration.Sales_CreditCardID;
       

       row5.Sales_CreditCardApprovalCode = out_DataExploration.Sales_CreditCardApprovalCode;
       

       row5.Sales_CurrencyRateID = out_DataExploration.Sales_CurrencyRateID;
       

       row5.Sales_SubTotal = out_DataExploration.Sales_SubTotal;
       

       row5.Sales_TaxAmt = out_DataExploration.Sales_TaxAmt;
       

       row5.Sales_Freight = out_DataExploration.Sales_Freight;
       

       row5.Sales_TotalDue = out_DataExploration.Sales_TotalDue;
       

       row5.Sales_Comment = out_DataExploration.Sales_Comment;
       

       row5.SalesOrderDetailID = out_DataExploration.SalesOrderDetailID;
       

       row5.Sales_CarrierTrackingNumber = out_DataExploration.Sales_CarrierTrackingNumber;
       

       row5.Sales_OrderQty = out_DataExploration.Sales_OrderQty;
       

       row5.Sales_ProductID = out_DataExploration.Sales_ProductID;
       

       row5.Sales_SpecialOfferID = out_DataExploration.Sales_SpecialOfferID;
       

       row5.Sales_UnitPrice = out_DataExploration.Sales_UnitPrice;
       

       row5.Sales_UnitPriceDiscount = out_DataExploration.Sales_UnitPriceDiscount;
       

       row5.Sales_LineTotal = out_DataExploration.Sales_LineTotal;
       

       row5.SP_TerritoryID = out_DataExploration.SP_TerritoryID;
       

       row5.SalesQuota = out_DataExploration.SalesQuota;
       

       row5.Bonus = out_DataExploration.Bonus;
       

       row5.CommissionPct = out_DataExploration.CommissionPct;
       

       row5.SalesYTD = out_DataExploration.SalesYTD;
       

       row5.SalesLastYear = out_DataExploration.SalesLastYear;
       

       row5.SP_PersonType = out_DataExploration.SP_PersonType;
       

       row5.SP_FirstName = out_DataExploration.SP_FirstName;
       

       row5.SP_MiddleName = out_DataExploration.SP_MiddleName;
       

       row5.SP_LastName = out_DataExploration.SP_LastName;
       

       row5.SP_Suffix = out_DataExploration.SP_Suffix;
       

       row5.SP_EmailPromotion = out_DataExploration.SP_EmailPromotion;
       

       row5.SP_AdditionalContactInfo = out_DataExploration.SP_AdditionalContactInfo;
       

       row5.SP_Demographics = out_DataExploration.SP_Demographics;
       

       row5.IN_TerritoryID = out_DataExploration.IN_TerritoryID;
       

       row5.IN_PersonType = out_DataExploration.IN_PersonType;
       

       row5.IN_FirstName = out_DataExploration.IN_FirstName;
       

       row5.IN_MiddleName = out_DataExploration.IN_MiddleName;
       

       row5.IN_LastName = out_DataExploration.IN_LastName;
       

       row5.IN_Suffix = out_DataExploration.IN_Suffix;
       

       row5.IN_EmailPromotion = out_DataExploration.IN_EmailPromotion;
       

       row5.IN_AdditionalContactInfo = out_DataExploration.IN_AdditionalContactInfo;
       

       row5.IN_Demographics = out_DataExploration.IN_Demographics;
       

       row5.Product_Name = out_DataExploration.Product_Name;
       

       row5.Product_Number = out_DataExploration.Product_Number;
       

       row5.Product_MakeFlag = out_DataExploration.Product_MakeFlag;
       

       row5.Product_FinishedGoodsFlag = out_DataExploration.Product_FinishedGoodsFlag;
       

       row5.Product_Color = out_DataExploration.Product_Color;
       

       row5.Product_SafetyStockLevel = out_DataExploration.Product_SafetyStockLevel;
       

       row5.Product_ReorderPoint = out_DataExploration.Product_ReorderPoint;
       

       row5.Product_StandardCost = out_DataExploration.Product_StandardCost;
       

       row5.Product_ListPrice = out_DataExploration.Product_ListPrice;
       

       row5.Product_Size = out_DataExploration.Product_Size;
       

       row5.Product_SizeUnitMeasureName = out_DataExploration.Product_SizeUnitMeasureName;
       

       row5.Product_Weight = out_DataExploration.Product_Weight;
       

       row5.Product_WeightUnitMeasureName = out_DataExploration.Product_WeightUnitMeasureName;
       

       row5.Product_DaysToManufacture = out_DataExploration.Product_DaysToManufacture;
       

       row5.Product_Line = out_DataExploration.Product_Line;
       

       row5.Product_Class = out_DataExploration.Product_Class;
       

       row5.Product_Style = out_DataExploration.Product_Style;
       

       row5.Product_SellStartDate = out_DataExploration.Product_SellStartDate;
       

       row5.Product_SellEndDate = out_DataExploration.Product_SellEndDate;
       

       row5.Product_DiscontinuedDate = out_DataExploration.Product_DiscontinuedDate;
       

       row5.Product_SubCategory = out_DataExploration.Product_SubCategory;
       

       row5.Product_Category = out_DataExploration.Product_Category;
       

       row5.Product_Model = out_DataExploration.Product_Model;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
	
	/**
	 * [tSampleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


                        String[] rowtFileOutputDelimited_1=new String[78];
                            rowtFileOutputDelimited_1[0]=String.valueOf(row5.SalesOrderID);
                            rowtFileOutputDelimited_1[1]=String.valueOf(row5.Sales_RevisionNumber);
                            rowtFileOutputDelimited_1[2]=row5.Sales_OrderDate == null ? null : String.valueOf(row5.Sales_OrderDate);
                            rowtFileOutputDelimited_1[3]=row5.Sales_DueDate == null ? null : String.valueOf(row5.Sales_DueDate);
                            rowtFileOutputDelimited_1[4]=row5.Sales_ShipDate == null ? null : String.valueOf(row5.Sales_ShipDate);
                            rowtFileOutputDelimited_1[5]=String.valueOf(row5.Sales_Status);
                            rowtFileOutputDelimited_1[6]=String.valueOf(row5.Sales_OnlineOrderFlag);
                            rowtFileOutputDelimited_1[7]=row5.Sales_SalesOrderNumber == null ? null : row5.Sales_SalesOrderNumber;
                            rowtFileOutputDelimited_1[8]=row5.Sales_PurchaseOrderNumber == null ? null : row5.Sales_PurchaseOrderNumber;
                            rowtFileOutputDelimited_1[9]=row5.Sales_AccountNumber == null ? null : row5.Sales_AccountNumber;
                            rowtFileOutputDelimited_1[10]=String.valueOf(row5.Sales_CustomerID);
                            rowtFileOutputDelimited_1[11]=row5.SalesPersonID == null ? null : String.valueOf(row5.SalesPersonID);
                            rowtFileOutputDelimited_1[12]=row5.Sales_TerritoryID == null ? null : String.valueOf(row5.Sales_TerritoryID);
                            rowtFileOutputDelimited_1[13]=String.valueOf(row5.Sales_BillToAddressID);
                            rowtFileOutputDelimited_1[14]=String.valueOf(row5.Sales_ShipToAddressID);
                            rowtFileOutputDelimited_1[15]=String.valueOf(row5.Sales_ShipMethodID);
                            rowtFileOutputDelimited_1[16]=row5.Sales_CreditCardID == null ? null : String.valueOf(row5.Sales_CreditCardID);
                            rowtFileOutputDelimited_1[17]=row5.Sales_CreditCardApprovalCode == null ? null : row5.Sales_CreditCardApprovalCode;
                            rowtFileOutputDelimited_1[18]=row5.Sales_CurrencyRateID == null ? null : String.valueOf(row5.Sales_CurrencyRateID);
                            rowtFileOutputDelimited_1[19]=String.valueOf(row5.Sales_SubTotal);
                            rowtFileOutputDelimited_1[20]=String.valueOf(row5.Sales_TaxAmt);
                            rowtFileOutputDelimited_1[21]=String.valueOf(row5.Sales_Freight);
                            rowtFileOutputDelimited_1[22]=String.valueOf(row5.Sales_TotalDue);
                            rowtFileOutputDelimited_1[23]=row5.Sales_Comment == null ? null : row5.Sales_Comment;
                            rowtFileOutputDelimited_1[24]=String.valueOf(row5.SalesOrderDetailID);
                            rowtFileOutputDelimited_1[25]=row5.Sales_CarrierTrackingNumber == null ? null : row5.Sales_CarrierTrackingNumber;
                            rowtFileOutputDelimited_1[26]=String.valueOf(row5.Sales_OrderQty);
                            rowtFileOutputDelimited_1[27]=String.valueOf(row5.Sales_ProductID);
                            rowtFileOutputDelimited_1[28]=String.valueOf(row5.Sales_SpecialOfferID);
                            rowtFileOutputDelimited_1[29]=String.valueOf(row5.Sales_UnitPrice);
                            rowtFileOutputDelimited_1[30]=String.valueOf(row5.Sales_UnitPriceDiscount);
                            rowtFileOutputDelimited_1[31]=String.valueOf(row5.Sales_LineTotal);
                            rowtFileOutputDelimited_1[32]=row5.SP_TerritoryID == null ? null : String.valueOf(row5.SP_TerritoryID);
                            rowtFileOutputDelimited_1[33]=row5.SalesQuota == null ? null : String.valueOf(row5.SalesQuota);
                            rowtFileOutputDelimited_1[34]=String.valueOf(row5.Bonus);
                            rowtFileOutputDelimited_1[35]=String.valueOf(row5.CommissionPct);
                            rowtFileOutputDelimited_1[36]=String.valueOf(row5.SalesYTD);
                            rowtFileOutputDelimited_1[37]=String.valueOf(row5.SalesLastYear);
                            rowtFileOutputDelimited_1[38]=row5.SP_PersonType == null ? null : row5.SP_PersonType;
                            rowtFileOutputDelimited_1[39]=row5.SP_FirstName == null ? null : row5.SP_FirstName;
                            rowtFileOutputDelimited_1[40]=row5.SP_MiddleName == null ? null : row5.SP_MiddleName;
                            rowtFileOutputDelimited_1[41]=row5.SP_LastName == null ? null : row5.SP_LastName;
                            rowtFileOutputDelimited_1[42]=row5.SP_Suffix == null ? null : row5.SP_Suffix;
                            rowtFileOutputDelimited_1[43]=String.valueOf(row5.SP_EmailPromotion);
                            rowtFileOutputDelimited_1[44]=row5.SP_AdditionalContactInfo == null ? null : row5.SP_AdditionalContactInfo;
                            rowtFileOutputDelimited_1[45]=row5.SP_Demographics == null ? null : row5.SP_Demographics;
                            rowtFileOutputDelimited_1[46]=row5.IN_TerritoryID == null ? null : String.valueOf(row5.IN_TerritoryID);
                            rowtFileOutputDelimited_1[47]=row5.IN_PersonType == null ? null : row5.IN_PersonType;
                            rowtFileOutputDelimited_1[48]=row5.IN_FirstName == null ? null : row5.IN_FirstName;
                            rowtFileOutputDelimited_1[49]=row5.IN_MiddleName == null ? null : row5.IN_MiddleName;
                            rowtFileOutputDelimited_1[50]=row5.IN_LastName == null ? null : row5.IN_LastName;
                            rowtFileOutputDelimited_1[51]=row5.IN_Suffix == null ? null : row5.IN_Suffix;
                            rowtFileOutputDelimited_1[52]=String.valueOf(row5.IN_EmailPromotion);
                            rowtFileOutputDelimited_1[53]=row5.IN_AdditionalContactInfo == null ? null : row5.IN_AdditionalContactInfo;
                            rowtFileOutputDelimited_1[54]=row5.IN_Demographics == null ? null : row5.IN_Demographics;
                            rowtFileOutputDelimited_1[55]=row5.Product_Name == null ? null : row5.Product_Name;
                            rowtFileOutputDelimited_1[56]=row5.Product_Number == null ? null : row5.Product_Number;
                            rowtFileOutputDelimited_1[57]=String.valueOf(row5.Product_MakeFlag);
                            rowtFileOutputDelimited_1[58]=String.valueOf(row5.Product_FinishedGoodsFlag);
                            rowtFileOutputDelimited_1[59]=row5.Product_Color == null ? null : row5.Product_Color;
                            rowtFileOutputDelimited_1[60]=String.valueOf(row5.Product_SafetyStockLevel);
                            rowtFileOutputDelimited_1[61]=String.valueOf(row5.Product_ReorderPoint);
                            rowtFileOutputDelimited_1[62]=String.valueOf(row5.Product_StandardCost);
                            rowtFileOutputDelimited_1[63]=String.valueOf(row5.Product_ListPrice);
                            rowtFileOutputDelimited_1[64]=row5.Product_Size == null ? null : row5.Product_Size;
                            rowtFileOutputDelimited_1[65]=row5.Product_SizeUnitMeasureName == null ? null : row5.Product_SizeUnitMeasureName;
                            rowtFileOutputDelimited_1[66]=row5.Product_Weight == null ? null : String.valueOf(row5.Product_Weight);
                            rowtFileOutputDelimited_1[67]=row5.Product_WeightUnitMeasureName == null ? null : row5.Product_WeightUnitMeasureName;
                            rowtFileOutputDelimited_1[68]=String.valueOf(row5.Product_DaysToManufacture);
                            rowtFileOutputDelimited_1[69]=row5.Product_Line == null ? null : row5.Product_Line;
                            rowtFileOutputDelimited_1[70]=row5.Product_Class == null ? null : row5.Product_Class;
                            rowtFileOutputDelimited_1[71]=row5.Product_Style == null ? null : row5.Product_Style;
                            rowtFileOutputDelimited_1[72]=row5.Product_SellStartDate == null ? null : String.valueOf(row5.Product_SellStartDate);
                            rowtFileOutputDelimited_1[73]=row5.Product_SellEndDate == null ? null : String.valueOf(row5.Product_SellEndDate);
                            rowtFileOutputDelimited_1[74]=row5.Product_DiscontinuedDate == null ? null : String.valueOf(row5.Product_DiscontinuedDate);
                            rowtFileOutputDelimited_1[75]=row5.Product_SubCategory == null ? null : row5.Product_SubCategory;
                            rowtFileOutputDelimited_1[76]=row5.Product_Category == null ? null : row5.Product_Category;
                            rowtFileOutputDelimited_1[77]=row5.Product_Model == null ? null : row5.Product_Model;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tSampleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_end ] stop
 */

} // End of branch "out_DataExploration"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out_DataExploration");
			  	}
			  	
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer TerritoryID;

				public Integer getTerritoryID () {
					return this.TerritoryID;
				}
				
			    public String PersonType;

				public String getPersonType () {
					return this.PersonType;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public int EmailPromotion;

				public int getEmailPromotion () {
					return this.EmailPromotion;
				}
				
			    public String AdditionalContactInfo;

				public String getAdditionalContactInfo () {
					return this.AdditionalContactInfo;
				}
				
			    public String Demographics;

				public String getDemographics () {
					return this.Demographics;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.CustomerID = this.CustomerID;
	            other.TerritoryID = this.TerritoryID;
	            other.PersonType = this.PersonType;
	            other.FirstName = this.FirstName;
	            other.MiddleName = this.MiddleName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.EmailPromotion = this.EmailPromotion;
	            other.AdditionalContactInfo = this.AdditionalContactInfo;
	            other.Demographics = this.Demographics;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TerritoryID = readInteger(dis,ois);
					
						this.PersonType = readString(dis,ois);
					
						this.FirstName = readString(dis,ois);
					
						this.MiddleName = readString(dis,ois);
					
						this.LastName = readString(dis,ois);
					
						this.Suffix = readString(dis,ois);
					
			            this.EmailPromotion = dis.readInt();
					
						this.AdditionalContactInfo = readString(dis,ois);
					
						this.Demographics = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.TerritoryID, dos, oos);
					
						writeString(this.PersonType, dos, oos);
					
						writeString(this.FirstName, dos, oos);
					
						writeString(this.MiddleName, dos, oos);
					
						writeString(this.LastName, dos, oos);
					
						writeString(this.Suffix, dos, oos);
					
		            	dos.writeInt(this.EmailPromotion);
					
						writeString(this.AdditionalContactInfo, dos, oos);
					
						writeString(this.Demographics, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",TerritoryID="+String.valueOf(TerritoryID));
		sb.append(",PersonType="+PersonType);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",EmailPromotion="+String.valueOf(EmailPromotion));
		sb.append(",AdditionalContactInfo="+AdditionalContactInfo);
		sb.append(",Demographics="+Demographics);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4) outputs:(out_DataExploration)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n	a.CustomerID,\n	a.TerritoryID,\n	b.PersonType,\n	b.FirstName,\n	b.MiddleName,\n	b.LastName,\n	b.Suffix,\n	b.E"
+"mailPromotion,\n	b.AdditionalContactInfo,\n	b.Demographics\nFROM \n	Sales.Customer a\nINNER JOIN\n	Person.Person b \n	ON"
+" a.PersonID = b.BusinessEntityID";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row2.CustomerID = 0;
							} else {
		                          
            row2.CustomerID = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row2.TerritoryID = null;
							} else {
		                          
            row2.TerritoryID = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    row2.TerritoryID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row2.PersonType = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.PersonType = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.PersonType = tmpContent_tDBInput_3;
                }
            } else {
                row2.PersonType = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row2.FirstName = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.FirstName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.FirstName = tmpContent_tDBInput_3;
                }
            } else {
                row2.FirstName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row2.MiddleName = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(5);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.MiddleName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.MiddleName = tmpContent_tDBInput_3;
                }
            } else {
                row2.MiddleName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row2.LastName = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(6);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.LastName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.LastName = tmpContent_tDBInput_3;
                }
            } else {
                row2.LastName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row2.Suffix = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(7);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Suffix = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.Suffix = tmpContent_tDBInput_3;
                }
            } else {
                row2.Suffix = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row2.EmailPromotion = 0;
							} else {
		                          
            row2.EmailPromotion = rs_tDBInput_3.getInt(8);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row2.AdditionalContactInfo = null;
							} else {
	                         		
				net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_3 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_3.getClob(9);
				if(clob_tDBInput_3!=null){
					net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_3 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(clob_tDBInput_3);
					tmpContent_tDBInput_3 = tNTextImpl_tDBInput_3.getValue();
				}else{
					tmpContent_tDBInput_3 = null;				
				}
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.AdditionalContactInfo = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.AdditionalContactInfo = tmpContent_tDBInput_3;
                }
            } else {
                row2.AdditionalContactInfo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row2.Demographics = null;
							} else {
	                         		
				net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_3 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_3.getClob(10);
				if(clob_tDBInput_3!=null){
					net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_3 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(clob_tDBInput_3);
					tmpContent_tDBInput_3 = tNTextImpl_tDBInput_3.getValue();
				}else{
					tmpContent_tDBInput_3 = null;				
				}
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Demographics = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.Demographics = tmpContent_tDBInput_3;
                }
            } else {
                row2.Demographics = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.CustomerID = row2.CustomerID;
				
				row2_HashRow.TerritoryID = row2.TerritoryID;
				
				row2_HashRow.PersonType = row2.PersonType;
				
				row2_HashRow.FirstName = row2.FirstName;
				
				row2_HashRow.MiddleName = row2.MiddleName;
				
				row2_HashRow.LastName = row2.LastName;
				
				row2_HashRow.Suffix = row2.Suffix;
				
				row2_HashRow.EmailPromotion = row2.EmailPromotion;
				
				row2_HashRow.AdditionalContactInfo = row2.AdditionalContactInfo;
				
				row2_HashRow.Demographics = row2.Demographics;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public boolean MakeFlag;

				public boolean getMakeFlag () {
					return this.MakeFlag;
				}
				
			    public boolean FinishedGoodsFlag;

				public boolean getFinishedGoodsFlag () {
					return this.FinishedGoodsFlag;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public short SafetyStockLevel;

				public short getSafetyStockLevel () {
					return this.SafetyStockLevel;
				}
				
			    public short ReorderPoint;

				public short getReorderPoint () {
					return this.ReorderPoint;
				}
				
			    public double StandardCost;

				public double getStandardCost () {
					return this.StandardCost;
				}
				
			    public double ListPrice;

				public double getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String SizeUnitMeasureCode;

				public String getSizeUnitMeasureCode () {
					return this.SizeUnitMeasureCode;
				}
				
			    public String WeightUnitMeasureCode;

				public String getWeightUnitMeasureCode () {
					return this.WeightUnitMeasureCode;
				}
				
			    public Double Weight;

				public Double getWeight () {
					return this.Weight;
				}
				
			    public int DaysToManufacture;

				public int getDaysToManufacture () {
					return this.DaysToManufacture;
				}
				
			    public String ProductLine;

				public String getProductLine () {
					return this.ProductLine;
				}
				
			    public String _Class;

				public String get_Class () {
					return this._Class;
				}
				
			    public String Style;

				public String getStyle () {
					return this.Style;
				}
				
			    public Integer ProductSubcategoryID;

				public Integer getProductSubcategoryID () {
					return this.ProductSubcategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				
			    public String ProductSubCategory;

				public String getProductSubCategory () {
					return this.ProductSubCategory;
				}
				
			    public String ProductCategory;

				public String getProductCategory () {
					return this.ProductCategory;
				}
				
			    public String ProductModel;

				public String getProductModel () {
					return this.ProductModel;
				}
				
			    public String WeightUnitMeasureName;

				public String getWeightUnitMeasureName () {
					return this.WeightUnitMeasureName;
				}
				
			    public String SizeUnitMeasureName;

				public String getSizeUnitMeasureName () {
					return this.SizeUnitMeasureName;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.MakeFlag = this.MakeFlag;
	            other.FinishedGoodsFlag = this.FinishedGoodsFlag;
	            other.Color = this.Color;
	            other.SafetyStockLevel = this.SafetyStockLevel;
	            other.ReorderPoint = this.ReorderPoint;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.SizeUnitMeasureCode = this.SizeUnitMeasureCode;
	            other.WeightUnitMeasureCode = this.WeightUnitMeasureCode;
	            other.Weight = this.Weight;
	            other.DaysToManufacture = this.DaysToManufacture;
	            other.ProductLine = this.ProductLine;
	            other._Class = this._Class;
	            other.Style = this.Style;
	            other.ProductSubcategoryID = this.ProductSubcategoryID;
	            other.ProductModelID = this.ProductModelID;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            other.ProductSubCategory = this.ProductSubCategory;
	            other.ProductCategory = this.ProductCategory;
	            other.ProductModel = this.ProductModel;
	            other.WeightUnitMeasureName = this.WeightUnitMeasureName;
	            other.SizeUnitMeasureName = this.SizeUnitMeasureName;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.ProductNumber = readString(dis,ois);
					
			            this.MakeFlag = dis.readBoolean();
					
			            this.FinishedGoodsFlag = dis.readBoolean();
					
						this.Color = readString(dis,ois);
					
			            this.SafetyStockLevel = dis.readShort();
					
			            this.ReorderPoint = dis.readShort();
					
			            this.StandardCost = dis.readDouble();
					
			            this.ListPrice = dis.readDouble();
					
						this.Size = readString(dis,ois);
					
						this.SizeUnitMeasureCode = readString(dis,ois);
					
						this.WeightUnitMeasureCode = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readDouble();
           				}
					
			            this.DaysToManufacture = dis.readInt();
					
						this.ProductLine = readString(dis,ois);
					
						this._Class = readString(dis,ois);
					
						this.Style = readString(dis,ois);
					
						this.ProductSubcategoryID = readInteger(dis,ois);
					
						this.ProductModelID = readInteger(dis,ois);
					
						this.SellStartDate = readDate(dis,ois);
					
						this.SellEndDate = readDate(dis,ois);
					
						this.DiscontinuedDate = readDate(dis,ois);
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
						this.ProductSubCategory = readString(dis,ois);
					
						this.ProductCategory = readString(dis,ois);
					
						this.ProductModel = readString(dis,ois);
					
						this.WeightUnitMeasureName = readString(dis,ois);
					
						this.SizeUnitMeasureName = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.ProductNumber, dos, oos);
					
		            	dos.writeBoolean(this.MakeFlag);
					
		            	dos.writeBoolean(this.FinishedGoodsFlag);
					
						writeString(this.Color, dos, oos);
					
		            	dos.writeShort(this.SafetyStockLevel);
					
		            	dos.writeShort(this.ReorderPoint);
					
		            	dos.writeDouble(this.StandardCost);
					
		            	dos.writeDouble(this.ListPrice);
					
						writeString(this.Size, dos, oos);
					
						writeString(this.SizeUnitMeasureCode, dos, oos);
					
						writeString(this.WeightUnitMeasureCode, dos, oos);
					
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Weight);
		            	}
					
		            	dos.writeInt(this.DaysToManufacture);
					
						writeString(this.ProductLine, dos, oos);
					
						writeString(this._Class, dos, oos);
					
						writeString(this.Style, dos, oos);
					
					writeInteger(this.ProductSubcategoryID, dos, oos);
					
					writeInteger(this.ProductModelID, dos, oos);
					
						writeDate(this.SellStartDate, dos, oos);
					
						writeDate(this.SellEndDate, dos, oos);
					
						writeDate(this.DiscontinuedDate, dos, oos);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
						writeString(this.ProductSubCategory, dos, oos);
					
						writeString(this.ProductCategory, dos, oos);
					
						writeString(this.ProductModel, dos, oos);
					
						writeString(this.WeightUnitMeasureName, dos, oos);
					
						writeString(this.SizeUnitMeasureName, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",MakeFlag="+String.valueOf(MakeFlag));
		sb.append(",FinishedGoodsFlag="+String.valueOf(FinishedGoodsFlag));
		sb.append(",Color="+Color);
		sb.append(",SafetyStockLevel="+String.valueOf(SafetyStockLevel));
		sb.append(",ReorderPoint="+String.valueOf(ReorderPoint));
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",SizeUnitMeasureCode="+SizeUnitMeasureCode);
		sb.append(",WeightUnitMeasureCode="+WeightUnitMeasureCode);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",DaysToManufacture="+String.valueOf(DaysToManufacture));
		sb.append(",ProductLine="+ProductLine);
		sb.append(",_Class="+_Class);
		sb.append(",Style="+Style);
		sb.append(",ProductSubcategoryID="+String.valueOf(ProductSubcategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
		sb.append(",ProductSubCategory="+ProductSubCategory);
		sb.append(",ProductCategory="+ProductCategory);
		sb.append(",ProductModel="+ProductModel);
		sb.append(",WeightUnitMeasureName="+WeightUnitMeasureName);
		sb.append(",SizeUnitMeasureName="+SizeUnitMeasureName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_4) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4) outputs:(out_DataExploration)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n	a.*,\n	b.Name AS ProductSubCategory,\n	c.Name AS ProductCategory,\n	d.Name AS ProductModel,\n	e.Name AS Weigh"
+"tUnitMeasureName,\n	f.Name AS SizeUnitMeasureName\nFROM\n	Production.Product a\nLEFT JOIN\n	Production.ProductSubcategor"
+"y b\n	ON a.ProductSubcategoryID = b.ProductSubcategoryID \nLEFT JOIN \n	Production.ProductCategory c\n	ON b.ProductCateg"
+"oryID = c.ProductCategoryID \nLEFT JOIN \n	Production.ProductModel d\n	ON a.ProductModelID = d.ProductModelID \nLEFT JOI"
+"N \n	Production.UnitMeasure e\n	ON a.WeightUnitMeasureCode = e.UnitMeasureCode \nLEFT JOIN \n	Production.UnitMeasure f "
+"\n	ON a.SizeUnitMeasureCode = f.UnitMeasureCode ";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row3.ProductID = 0;
							} else {
		                          
            row3.ProductID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row3.Name = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.Name = tmpContent_tDBInput_2;
                }
            } else {
                row3.Name = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row3.ProductNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.ProductNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.ProductNumber = tmpContent_tDBInput_2;
                }
            } else {
                row3.ProductNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row3.MakeFlag = false;
							} else {
	                         		
            row3.MakeFlag = rs_tDBInput_2.getBoolean(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row3.FinishedGoodsFlag = false;
							} else {
	                         		
            row3.FinishedGoodsFlag = rs_tDBInput_2.getBoolean(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row3.Color = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(6);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.Color = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.Color = tmpContent_tDBInput_2;
                }
            } else {
                row3.Color = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row3.SafetyStockLevel = 0;
							} else {
		                          
            row3.SafetyStockLevel = rs_tDBInput_2.getShort(7);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row3.ReorderPoint = 0;
							} else {
		                          
            row3.ReorderPoint = rs_tDBInput_2.getShort(8);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row3.StandardCost = 0;
							} else {
	                         		
            row3.StandardCost = rs_tDBInput_2.getDouble(9);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row3.ListPrice = 0;
							} else {
	                         		
            row3.ListPrice = rs_tDBInput_2.getDouble(10);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row3.Size = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.Size = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.Size = tmpContent_tDBInput_2;
                }
            } else {
                row3.Size = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row3.SizeUnitMeasureCode = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.SizeUnitMeasureCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.SizeUnitMeasureCode = tmpContent_tDBInput_2;
                }
            } else {
                row3.SizeUnitMeasureCode = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row3.WeightUnitMeasureCode = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(13);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.WeightUnitMeasureCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.WeightUnitMeasureCode = tmpContent_tDBInput_2;
                }
            } else {
                row3.WeightUnitMeasureCode = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row3.Weight = null;
							} else {
	                         		
            row3.Weight = rs_tDBInput_2.getDouble(14);
            if(rs_tDBInput_2.wasNull()){
                    row3.Weight = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row3.DaysToManufacture = 0;
							} else {
		                          
            row3.DaysToManufacture = rs_tDBInput_2.getInt(15);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row3.ProductLine = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(16);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.ProductLine = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.ProductLine = tmpContent_tDBInput_2;
                }
            } else {
                row3.ProductLine = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row3._Class = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(17);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3._Class = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3._Class = tmpContent_tDBInput_2;
                }
            } else {
                row3._Class = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row3.Style = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(18);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.Style = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.Style = tmpContent_tDBInput_2;
                }
            } else {
                row3.Style = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row3.ProductSubcategoryID = null;
							} else {
		                          
            row3.ProductSubcategoryID = rs_tDBInput_2.getInt(19);
            if(rs_tDBInput_2.wasNull()){
                    row3.ProductSubcategoryID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row3.ProductModelID = null;
							} else {
		                          
            row3.ProductModelID = rs_tDBInput_2.getInt(20);
            if(rs_tDBInput_2.wasNull()){
                    row3.ProductModelID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row3.SellStartDate = null;
							} else {
										
			row3.SellStartDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 21);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row3.SellEndDate = null;
							} else {
										
			row3.SellEndDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 22);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row3.DiscontinuedDate = null;
							} else {
										
			row3.DiscontinuedDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 23);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row3.rowguid = null;
							} else {
		                          
            row3.rowguid = rs_tDBInput_2.getObject(24);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row3.ModifiedDate = null;
							} else {
										
			row3.ModifiedDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 25);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row3.ProductSubCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(26);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.ProductSubCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.ProductSubCategory = tmpContent_tDBInput_2;
                }
            } else {
                row3.ProductSubCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row3.ProductCategory = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(27);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.ProductCategory = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.ProductCategory = tmpContent_tDBInput_2;
                }
            } else {
                row3.ProductCategory = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row3.ProductModel = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(28);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.ProductModel = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.ProductModel = tmpContent_tDBInput_2;
                }
            } else {
                row3.ProductModel = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row3.WeightUnitMeasureName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(29);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.WeightUnitMeasureName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.WeightUnitMeasureName = tmpContent_tDBInput_2;
                }
            } else {
                row3.WeightUnitMeasureName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row3.SizeUnitMeasureName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(30);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.SizeUnitMeasureName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.SizeUnitMeasureName = tmpContent_tDBInput_2;
                }
            } else {
                row3.SizeUnitMeasureName = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.ProductID = row3.ProductID;
				
				row3_HashRow.Name = row3.Name;
				
				row3_HashRow.ProductNumber = row3.ProductNumber;
				
				row3_HashRow.MakeFlag = row3.MakeFlag;
				
				row3_HashRow.FinishedGoodsFlag = row3.FinishedGoodsFlag;
				
				row3_HashRow.Color = row3.Color;
				
				row3_HashRow.SafetyStockLevel = row3.SafetyStockLevel;
				
				row3_HashRow.ReorderPoint = row3.ReorderPoint;
				
				row3_HashRow.StandardCost = row3.StandardCost;
				
				row3_HashRow.ListPrice = row3.ListPrice;
				
				row3_HashRow.Size = row3.Size;
				
				row3_HashRow.SizeUnitMeasureCode = row3.SizeUnitMeasureCode;
				
				row3_HashRow.WeightUnitMeasureCode = row3.WeightUnitMeasureCode;
				
				row3_HashRow.Weight = row3.Weight;
				
				row3_HashRow.DaysToManufacture = row3.DaysToManufacture;
				
				row3_HashRow.ProductLine = row3.ProductLine;
				
				row3_HashRow._Class = row3._Class;
				
				row3_HashRow.Style = row3.Style;
				
				row3_HashRow.ProductSubcategoryID = row3.ProductSubcategoryID;
				
				row3_HashRow.ProductModelID = row3.ProductModelID;
				
				row3_HashRow.SellStartDate = row3.SellStartDate;
				
				row3_HashRow.SellEndDate = row3.SellEndDate;
				
				row3_HashRow.DiscontinuedDate = row3.DiscontinuedDate;
				
				row3_HashRow.rowguid = row3.rowguid;
				
				row3_HashRow.ModifiedDate = row3.ModifiedDate;
				
				row3_HashRow.ProductSubCategory = row3.ProductSubCategory;
				
				row3_HashRow.ProductCategory = row3.ProductCategory;
				
				row3_HashRow.ProductModel = row3.ProductModel;
				
				row3_HashRow.WeightUnitMeasureName = row3.WeightUnitMeasureName;
				
				row3_HashRow.SizeUnitMeasureName = row3.SizeUnitMeasureName;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_CONANFIAP_Aula2_Exploracao = new byte[0];
    static byte[] commonByteArray_CONANFIAP_Aula2_Exploracao = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesPersonID;

				public int getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer TerritoryID;

				public Integer getTerritoryID () {
					return this.TerritoryID;
				}
				
			    public Double SalesQuota;

				public Double getSalesQuota () {
					return this.SalesQuota;
				}
				
			    public double Bonus;

				public double getBonus () {
					return this.Bonus;
				}
				
			    public double CommissionPct;

				public double getCommissionPct () {
					return this.CommissionPct;
				}
				
			    public double SalesYTD;

				public double getSalesYTD () {
					return this.SalesYTD;
				}
				
			    public double SalesLastYear;

				public double getSalesLastYear () {
					return this.SalesLastYear;
				}
				
			    public String PersonType;

				public String getPersonType () {
					return this.PersonType;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public int EmailPromotion;

				public int getEmailPromotion () {
					return this.EmailPromotion;
				}
				
			    public String AdditionalContactInfo;

				public String getAdditionalContactInfo () {
					return this.AdditionalContactInfo;
				}
				
			    public String Demographics;

				public String getDemographics () {
					return this.Demographics;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesPersonID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.SalesPersonID != other.SalesPersonID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.SalesPersonID = this.SalesPersonID;
	            other.TerritoryID = this.TerritoryID;
	            other.SalesQuota = this.SalesQuota;
	            other.Bonus = this.Bonus;
	            other.CommissionPct = this.CommissionPct;
	            other.SalesYTD = this.SalesYTD;
	            other.SalesLastYear = this.SalesLastYear;
	            other.PersonType = this.PersonType;
	            other.FirstName = this.FirstName;
	            other.MiddleName = this.MiddleName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.EmailPromotion = this.EmailPromotion;
	            other.AdditionalContactInfo = this.AdditionalContactInfo;
	            other.Demographics = this.Demographics;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.SalesPersonID = this.SalesPersonID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CONANFIAP_Aula2_Exploracao) {

        	try {

        		int length = 0;
		
			        this.SalesPersonID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesPersonID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TerritoryID = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SalesQuota = null;
           				} else {
           			    	this.SalesQuota = dis.readDouble();
           				}
					
			            this.Bonus = dis.readDouble();
					
			            this.CommissionPct = dis.readDouble();
					
			            this.SalesYTD = dis.readDouble();
					
			            this.SalesLastYear = dis.readDouble();
					
						this.PersonType = readString(dis,ois);
					
						this.FirstName = readString(dis,ois);
					
						this.MiddleName = readString(dis,ois);
					
						this.LastName = readString(dis,ois);
					
						this.Suffix = readString(dis,ois);
					
			            this.EmailPromotion = dis.readInt();
					
						this.AdditionalContactInfo = readString(dis,ois);
					
						this.Demographics = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.TerritoryID, dos, oos);
					
						if(this.SalesQuota == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SalesQuota);
		            	}
					
		            	dos.writeDouble(this.Bonus);
					
		            	dos.writeDouble(this.CommissionPct);
					
		            	dos.writeDouble(this.SalesYTD);
					
		            	dos.writeDouble(this.SalesLastYear);
					
						writeString(this.PersonType, dos, oos);
					
						writeString(this.FirstName, dos, oos);
					
						writeString(this.MiddleName, dos, oos);
					
						writeString(this.LastName, dos, oos);
					
						writeString(this.Suffix, dos, oos);
					
		            	dos.writeInt(this.EmailPromotion);
					
						writeString(this.AdditionalContactInfo, dos, oos);
					
						writeString(this.Demographics, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",TerritoryID="+String.valueOf(TerritoryID));
		sb.append(",SalesQuota="+String.valueOf(SalesQuota));
		sb.append(",Bonus="+String.valueOf(Bonus));
		sb.append(",CommissionPct="+String.valueOf(CommissionPct));
		sb.append(",SalesYTD="+String.valueOf(SalesYTD));
		sb.append(",SalesLastYear="+String.valueOf(SalesLastYear));
		sb.append(",PersonType="+PersonType);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",EmailPromotion="+String.valueOf(EmailPromotion));
		sb.append(",AdditionalContactInfo="+AdditionalContactInfo);
		sb.append(",Demographics="+Demographics);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesPersonID, other.SalesPersonID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_4) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4) outputs:(out_DataExploration)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT\n	a.BusinessEntityID SalesPersonID,\n	a.TerritoryID,\n	a.SalesQuota,\n	a.Bonus,\n	a.CommissionPct,\n	a.SalesYTD,"
+"\n	a.SalesLastYear,\n	b.PersonType,\n	b.FirstName,\n	b.MiddleName,\n	b.LastName,\n	b.Suffix,\n	b.EmailPromotion,\n	b.Add"
+"itionalContactInfo,\n	b.Demographics\nFROM\n	Sales.SalesPerson a \nINNER JOIN\n	Person.Person b\n	ON a.BusinessEntityID "
+"= b.BusinessEntityID";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.SalesPersonID = 0;
							} else {
		                          
            row4.SalesPersonID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.TerritoryID = null;
							} else {
		                          
            row4.TerritoryID = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row4.TerritoryID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.SalesQuota = null;
							} else {
	                         		
            row4.SalesQuota = rs_tDBInput_1.getDouble(3);
            if(rs_tDBInput_1.wasNull()){
                    row4.SalesQuota = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.Bonus = 0;
							} else {
	                         		
            row4.Bonus = rs_tDBInput_1.getDouble(4);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row4.CommissionPct = 0;
							} else {
	                         		
            row4.CommissionPct = rs_tDBInput_1.getDouble(5);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row4.SalesYTD = 0;
							} else {
	                         		
            row4.SalesYTD = rs_tDBInput_1.getDouble(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row4.SalesLastYear = 0;
							} else {
	                         		
            row4.SalesLastYear = rs_tDBInput_1.getDouble(7);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row4.PersonType = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.PersonType = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.PersonType = tmpContent_tDBInput_1;
                }
            } else {
                row4.PersonType = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row4.FirstName = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.FirstName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.FirstName = tmpContent_tDBInput_1;
                }
            } else {
                row4.FirstName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row4.MiddleName = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.MiddleName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.MiddleName = tmpContent_tDBInput_1;
                }
            } else {
                row4.MiddleName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row4.LastName = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.LastName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.LastName = tmpContent_tDBInput_1;
                }
            } else {
                row4.LastName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row4.Suffix = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.Suffix = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.Suffix = tmpContent_tDBInput_1;
                }
            } else {
                row4.Suffix = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row4.EmailPromotion = 0;
							} else {
		                          
            row4.EmailPromotion = rs_tDBInput_1.getInt(13);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row4.AdditionalContactInfo = null;
							} else {
	                         		
				net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_1 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_1.getClob(14);
				if(clob_tDBInput_1!=null){
					net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_1 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(clob_tDBInput_1);
					tmpContent_tDBInput_1 = tNTextImpl_tDBInput_1.getValue();
				}else{
					tmpContent_tDBInput_1 = null;				
				}
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.AdditionalContactInfo = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.AdditionalContactInfo = tmpContent_tDBInput_1;
                }
            } else {
                row4.AdditionalContactInfo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row4.Demographics = null;
							} else {
	                         		
				net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_1 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_1.getClob(15);
				if(clob_tDBInput_1!=null){
					net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_1 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(clob_tDBInput_1);
					tmpContent_tDBInput_1 = tNTextImpl_tDBInput_1.getValue();
				}else{
					tmpContent_tDBInput_1 = null;				
				}
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.Demographics = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.Demographics = tmpContent_tDBInput_1;
                }
            } else {
                row4.Demographics = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.SalesPersonID = row4.SalesPersonID;
				
				row4_HashRow.TerritoryID = row4.TerritoryID;
				
				row4_HashRow.SalesQuota = row4.SalesQuota;
				
				row4_HashRow.Bonus = row4.Bonus;
				
				row4_HashRow.CommissionPct = row4.CommissionPct;
				
				row4_HashRow.SalesYTD = row4.SalesYTD;
				
				row4_HashRow.SalesLastYear = row4.SalesLastYear;
				
				row4_HashRow.PersonType = row4.PersonType;
				
				row4_HashRow.FirstName = row4.FirstName;
				
				row4_HashRow.MiddleName = row4.MiddleName;
				
				row4_HashRow.LastName = row4.LastName;
				
				row4_HashRow.Suffix = row4.Suffix;
				
				row4_HashRow.EmailPromotion = row4.EmailPromotion;
				
				row4_HashRow.AdditionalContactInfo = row4.AdditionalContactInfo;
				
				row4_HashRow.Demographics = row4.Demographics;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Aula2_Exploracao Aula2_ExploracaoClass = new Aula2_Exploracao();

        int exitCode = Aula2_ExploracaoClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Aula2_Exploracao.class.getClassLoader().getResourceAsStream("conanfiap/aula2_exploracao_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Aula2_Exploracao.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("directoryPath", "id_String");
                            context.directoryPath=(String) context.getProperty("directoryPath");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("directoryPath")) {
                context.directoryPath = (String) parentContextMap.get("directoryPath");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Aula2_Exploracao");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     297340 characters generated by Talend Open Studio for Big Data 
 *     on the July 26, 2020 8:03:32 PM BRT
 ************************************************************************************************/