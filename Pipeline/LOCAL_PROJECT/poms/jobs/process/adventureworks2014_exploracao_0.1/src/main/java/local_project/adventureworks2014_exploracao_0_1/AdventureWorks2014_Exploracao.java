// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.adventureworks2014_exploracao_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: AdventureWorks2014_Exploracao Purpose: Exportar base para o time de Data
 * Science<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class AdventureWorks2014_Exploracao implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "AdventureWorks2014_Exploracao";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					AdventureWorks2014_Exploracao.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(AdventureWorks2014_Exploracao.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSampleRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short Sales_RevisionNumber;

		public short getSales_RevisionNumber() {
			return this.Sales_RevisionNumber;
		}

		public java.util.Date Sales_OrderDate;

		public java.util.Date getSales_OrderDate() {
			return this.Sales_OrderDate;
		}

		public java.util.Date Sales_DueDate;

		public java.util.Date getSales_DueDate() {
			return this.Sales_DueDate;
		}

		public java.util.Date Sales_ShipDate;

		public java.util.Date getSales_ShipDate() {
			return this.Sales_ShipDate;
		}

		public short Sales_Status;

		public short getSales_Status() {
			return this.Sales_Status;
		}

		public byte Sales_OnlineOrderFlag;

		public byte getSales_OnlineOrderFlag() {
			return this.Sales_OnlineOrderFlag;
		}

		public String Sales_SalesOrderNumber;

		public String getSales_SalesOrderNumber() {
			return this.Sales_SalesOrderNumber;
		}

		public String Sales_PurchaseOrderNumber;

		public String getSales_PurchaseOrderNumber() {
			return this.Sales_PurchaseOrderNumber;
		}

		public String Sales_AccountNumber;

		public String getSales_AccountNumber() {
			return this.Sales_AccountNumber;
		}

		public int Sales_CustomerID;

		public int getSales_CustomerID() {
			return this.Sales_CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer Sales_TerritoryID;

		public Integer getSales_TerritoryID() {
			return this.Sales_TerritoryID;
		}

		public int Sales_BillToAddressID;

		public int getSales_BillToAddressID() {
			return this.Sales_BillToAddressID;
		}

		public int Sales_ShipToAddressID;

		public int getSales_ShipToAddressID() {
			return this.Sales_ShipToAddressID;
		}

		public int Sales_ShipMethodID;

		public int getSales_ShipMethodID() {
			return this.Sales_ShipMethodID;
		}

		public Integer Sales_CreditCardID;

		public Integer getSales_CreditCardID() {
			return this.Sales_CreditCardID;
		}

		public String Sales_CreditCardApprovalCode;

		public String getSales_CreditCardApprovalCode() {
			return this.Sales_CreditCardApprovalCode;
		}

		public Integer Sales_CurrencyRateID;

		public Integer getSales_CurrencyRateID() {
			return this.Sales_CurrencyRateID;
		}

		public BigDecimal Sales_SubTotal;

		public BigDecimal getSales_SubTotal() {
			return this.Sales_SubTotal;
		}

		public BigDecimal Sales_TaxAmt;

		public BigDecimal getSales_TaxAmt() {
			return this.Sales_TaxAmt;
		}

		public BigDecimal Sales_Freight;

		public BigDecimal getSales_Freight() {
			return this.Sales_Freight;
		}

		public BigDecimal Sales_TotalDue;

		public BigDecimal getSales_TotalDue() {
			return this.Sales_TotalDue;
		}

		public String Sales_Comment;

		public String getSales_Comment() {
			return this.Sales_Comment;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public String Sales_CarrierTrackingNumber;

		public String getSales_CarrierTrackingNumber() {
			return this.Sales_CarrierTrackingNumber;
		}

		public short Sales_OrderQty;

		public short getSales_OrderQty() {
			return this.Sales_OrderQty;
		}

		public int Sales_ProductID;

		public int getSales_ProductID() {
			return this.Sales_ProductID;
		}

		public int Sales_SpecialOfferID;

		public int getSales_SpecialOfferID() {
			return this.Sales_SpecialOfferID;
		}

		public BigDecimal Sales_UnitPrice;

		public BigDecimal getSales_UnitPrice() {
			return this.Sales_UnitPrice;
		}

		public BigDecimal Sales_UnitPriceDiscount;

		public BigDecimal getSales_UnitPriceDiscount() {
			return this.Sales_UnitPriceDiscount;
		}

		public BigDecimal Sales_LineTotal;

		public BigDecimal getSales_LineTotal() {
			return this.Sales_LineTotal;
		}

		public Integer SP_TerritoryID;

		public Integer getSP_TerritoryID() {
			return this.SP_TerritoryID;
		}

		public BigDecimal SalesQuota;

		public BigDecimal getSalesQuota() {
			return this.SalesQuota;
		}

		public BigDecimal Bonus;

		public BigDecimal getBonus() {
			return this.Bonus;
		}

		public BigDecimal CommissionPct;

		public BigDecimal getCommissionPct() {
			return this.CommissionPct;
		}

		public BigDecimal SalesYTD;

		public BigDecimal getSalesYTD() {
			return this.SalesYTD;
		}

		public BigDecimal SalesLastYear;

		public BigDecimal getSalesLastYear() {
			return this.SalesLastYear;
		}

		public String SP_PersonType;

		public String getSP_PersonType() {
			return this.SP_PersonType;
		}

		public String SP_FirstName;

		public String getSP_FirstName() {
			return this.SP_FirstName;
		}

		public String SP_MiddleName;

		public String getSP_MiddleName() {
			return this.SP_MiddleName;
		}

		public String SP_LastName;

		public String getSP_LastName() {
			return this.SP_LastName;
		}

		public String SP_Suffix;

		public String getSP_Suffix() {
			return this.SP_Suffix;
		}

		public int SP_EmailPromotion;

		public int getSP_EmailPromotion() {
			return this.SP_EmailPromotion;
		}

		public String SP_AdditionalContactInfo;

		public String getSP_AdditionalContactInfo() {
			return this.SP_AdditionalContactInfo;
		}

		public String SP_Demographics;

		public String getSP_Demographics() {
			return this.SP_Demographics;
		}

		public Integer IN_TerritoryID;

		public Integer getIN_TerritoryID() {
			return this.IN_TerritoryID;
		}

		public String IN_PersonType;

		public String getIN_PersonType() {
			return this.IN_PersonType;
		}

		public String IN_FirstName;

		public String getIN_FirstName() {
			return this.IN_FirstName;
		}

		public String IN_MiddleName;

		public String getIN_MiddleName() {
			return this.IN_MiddleName;
		}

		public String IN_LastName;

		public String getIN_LastName() {
			return this.IN_LastName;
		}

		public String IN_Suffix;

		public String getIN_Suffix() {
			return this.IN_Suffix;
		}

		public int IN_EmailPromotion;

		public int getIN_EmailPromotion() {
			return this.IN_EmailPromotion;
		}

		public String IN_AdditionalContactInfo;

		public String getIN_AdditionalContactInfo() {
			return this.IN_AdditionalContactInfo;
		}

		public String IN_Demographics;

		public String getIN_Demographics() {
			return this.IN_Demographics;
		}

		public String Product_Name;

		public String getProduct_Name() {
			return this.Product_Name;
		}

		public String Product_Number;

		public String getProduct_Number() {
			return this.Product_Number;
		}

		public byte Product_MakeFlag;

		public byte getProduct_MakeFlag() {
			return this.Product_MakeFlag;
		}

		public byte Product_FinishedGoodsFlag;

		public byte getProduct_FinishedGoodsFlag() {
			return this.Product_FinishedGoodsFlag;
		}

		public String Product_Color;

		public String getProduct_Color() {
			return this.Product_Color;
		}

		public short Product_SafetyStockLevel;

		public short getProduct_SafetyStockLevel() {
			return this.Product_SafetyStockLevel;
		}

		public short Product_ReorderPoint;

		public short getProduct_ReorderPoint() {
			return this.Product_ReorderPoint;
		}

		public BigDecimal Product_StandardCost;

		public BigDecimal getProduct_StandardCost() {
			return this.Product_StandardCost;
		}

		public BigDecimal Product_ListPrice;

		public BigDecimal getProduct_ListPrice() {
			return this.Product_ListPrice;
		}

		public String Product_Size;

		public String getProduct_Size() {
			return this.Product_Size;
		}

		public String Product_SizeUnitMeasureName;

		public String getProduct_SizeUnitMeasureName() {
			return this.Product_SizeUnitMeasureName;
		}

		public BigDecimal Product_Weight;

		public BigDecimal getProduct_Weight() {
			return this.Product_Weight;
		}

		public String Product_WeightUnitMeasureName;

		public String getProduct_WeightUnitMeasureName() {
			return this.Product_WeightUnitMeasureName;
		}

		public int Product_DaysToManufacture;

		public int getProduct_DaysToManufacture() {
			return this.Product_DaysToManufacture;
		}

		public String Product_Line;

		public String getProduct_Line() {
			return this.Product_Line;
		}

		public String Product_Class;

		public String getProduct_Class() {
			return this.Product_Class;
		}

		public String Product_Style;

		public String getProduct_Style() {
			return this.Product_Style;
		}

		public java.util.Date Product_SellStartDate;

		public java.util.Date getProduct_SellStartDate() {
			return this.Product_SellStartDate;
		}

		public java.util.Date Product_SellEndDate;

		public java.util.Date getProduct_SellEndDate() {
			return this.Product_SellEndDate;
		}

		public java.util.Date Product_DiscontinuedDate;

		public java.util.Date getProduct_DiscontinuedDate() {
			return this.Product_DiscontinuedDate;
		}

		public String Product_SubCategory;

		public String getProduct_SubCategory() {
			return this.Product_SubCategory;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Model;

		public String getProduct_Model() {
			return this.Product_Model;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.Sales_RevisionNumber = dis.readShort();

					this.Sales_OrderDate = readDate(dis);

					this.Sales_DueDate = readDate(dis);

					this.Sales_ShipDate = readDate(dis);

					this.Sales_Status = dis.readShort();

					this.Sales_OnlineOrderFlag = dis.readByte();

					this.Sales_SalesOrderNumber = readString(dis);

					this.Sales_PurchaseOrderNumber = readString(dis);

					this.Sales_AccountNumber = readString(dis);

					this.Sales_CustomerID = dis.readInt();

					this.SalesPersonID = readInteger(dis);

					this.Sales_TerritoryID = readInteger(dis);

					this.Sales_BillToAddressID = dis.readInt();

					this.Sales_ShipToAddressID = dis.readInt();

					this.Sales_ShipMethodID = dis.readInt();

					this.Sales_CreditCardID = readInteger(dis);

					this.Sales_CreditCardApprovalCode = readString(dis);

					this.Sales_CurrencyRateID = readInteger(dis);

					this.Sales_SubTotal = (BigDecimal) dis.readObject();

					this.Sales_TaxAmt = (BigDecimal) dis.readObject();

					this.Sales_Freight = (BigDecimal) dis.readObject();

					this.Sales_TotalDue = (BigDecimal) dis.readObject();

					this.Sales_Comment = readString(dis);

					this.SalesOrderDetailID = dis.readInt();

					this.Sales_CarrierTrackingNumber = readString(dis);

					this.Sales_OrderQty = dis.readShort();

					this.Sales_ProductID = dis.readInt();

					this.Sales_SpecialOfferID = dis.readInt();

					this.Sales_UnitPrice = (BigDecimal) dis.readObject();

					this.Sales_UnitPriceDiscount = (BigDecimal) dis.readObject();

					this.Sales_LineTotal = (BigDecimal) dis.readObject();

					this.SP_TerritoryID = readInteger(dis);

					this.SalesQuota = (BigDecimal) dis.readObject();

					this.Bonus = (BigDecimal) dis.readObject();

					this.CommissionPct = (BigDecimal) dis.readObject();

					this.SalesYTD = (BigDecimal) dis.readObject();

					this.SalesLastYear = (BigDecimal) dis.readObject();

					this.SP_PersonType = readString(dis);

					this.SP_FirstName = readString(dis);

					this.SP_MiddleName = readString(dis);

					this.SP_LastName = readString(dis);

					this.SP_Suffix = readString(dis);

					this.SP_EmailPromotion = dis.readInt();

					this.SP_AdditionalContactInfo = readString(dis);

					this.SP_Demographics = readString(dis);

					this.IN_TerritoryID = readInteger(dis);

					this.IN_PersonType = readString(dis);

					this.IN_FirstName = readString(dis);

					this.IN_MiddleName = readString(dis);

					this.IN_LastName = readString(dis);

					this.IN_Suffix = readString(dis);

					this.IN_EmailPromotion = dis.readInt();

					this.IN_AdditionalContactInfo = readString(dis);

					this.IN_Demographics = readString(dis);

					this.Product_Name = readString(dis);

					this.Product_Number = readString(dis);

					this.Product_MakeFlag = dis.readByte();

					this.Product_FinishedGoodsFlag = dis.readByte();

					this.Product_Color = readString(dis);

					this.Product_SafetyStockLevel = dis.readShort();

					this.Product_ReorderPoint = dis.readShort();

					this.Product_StandardCost = (BigDecimal) dis.readObject();

					this.Product_ListPrice = (BigDecimal) dis.readObject();

					this.Product_Size = readString(dis);

					this.Product_SizeUnitMeasureName = readString(dis);

					this.Product_Weight = (BigDecimal) dis.readObject();

					this.Product_WeightUnitMeasureName = readString(dis);

					this.Product_DaysToManufacture = dis.readInt();

					this.Product_Line = readString(dis);

					this.Product_Class = readString(dis);

					this.Product_Style = readString(dis);

					this.Product_SellStartDate = readDate(dis);

					this.Product_SellEndDate = readDate(dis);

					this.Product_DiscontinuedDate = readDate(dis);

					this.Product_SubCategory = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Model = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.Sales_RevisionNumber);

				// java.util.Date

				writeDate(this.Sales_OrderDate, dos);

				// java.util.Date

				writeDate(this.Sales_DueDate, dos);

				// java.util.Date

				writeDate(this.Sales_ShipDate, dos);

				// short

				dos.writeShort(this.Sales_Status);

				// byte

				dos.writeByte(this.Sales_OnlineOrderFlag);

				// String

				writeString(this.Sales_SalesOrderNumber, dos);

				// String

				writeString(this.Sales_PurchaseOrderNumber, dos);

				// String

				writeString(this.Sales_AccountNumber, dos);

				// int

				dos.writeInt(this.Sales_CustomerID);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.Sales_TerritoryID, dos);

				// int

				dos.writeInt(this.Sales_BillToAddressID);

				// int

				dos.writeInt(this.Sales_ShipToAddressID);

				// int

				dos.writeInt(this.Sales_ShipMethodID);

				// Integer

				writeInteger(this.Sales_CreditCardID, dos);

				// String

				writeString(this.Sales_CreditCardApprovalCode, dos);

				// Integer

				writeInteger(this.Sales_CurrencyRateID, dos);

				// BigDecimal

				dos.writeObject(this.Sales_SubTotal);

				// BigDecimal

				dos.writeObject(this.Sales_TaxAmt);

				// BigDecimal

				dos.writeObject(this.Sales_Freight);

				// BigDecimal

				dos.writeObject(this.Sales_TotalDue);

				// String

				writeString(this.Sales_Comment, dos);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// String

				writeString(this.Sales_CarrierTrackingNumber, dos);

				// short

				dos.writeShort(this.Sales_OrderQty);

				// int

				dos.writeInt(this.Sales_ProductID);

				// int

				dos.writeInt(this.Sales_SpecialOfferID);

				// BigDecimal

				dos.writeObject(this.Sales_UnitPrice);

				// BigDecimal

				dos.writeObject(this.Sales_UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.Sales_LineTotal);

				// Integer

				writeInteger(this.SP_TerritoryID, dos);

				// BigDecimal

				dos.writeObject(this.SalesQuota);

				// BigDecimal

				dos.writeObject(this.Bonus);

				// BigDecimal

				dos.writeObject(this.CommissionPct);

				// BigDecimal

				dos.writeObject(this.SalesYTD);

				// BigDecimal

				dos.writeObject(this.SalesLastYear);

				// String

				writeString(this.SP_PersonType, dos);

				// String

				writeString(this.SP_FirstName, dos);

				// String

				writeString(this.SP_MiddleName, dos);

				// String

				writeString(this.SP_LastName, dos);

				// String

				writeString(this.SP_Suffix, dos);

				// int

				dos.writeInt(this.SP_EmailPromotion);

				// String

				writeString(this.SP_AdditionalContactInfo, dos);

				// String

				writeString(this.SP_Demographics, dos);

				// Integer

				writeInteger(this.IN_TerritoryID, dos);

				// String

				writeString(this.IN_PersonType, dos);

				// String

				writeString(this.IN_FirstName, dos);

				// String

				writeString(this.IN_MiddleName, dos);

				// String

				writeString(this.IN_LastName, dos);

				// String

				writeString(this.IN_Suffix, dos);

				// int

				dos.writeInt(this.IN_EmailPromotion);

				// String

				writeString(this.IN_AdditionalContactInfo, dos);

				// String

				writeString(this.IN_Demographics, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Product_Number, dos);

				// byte

				dos.writeByte(this.Product_MakeFlag);

				// byte

				dos.writeByte(this.Product_FinishedGoodsFlag);

				// String

				writeString(this.Product_Color, dos);

				// short

				dos.writeShort(this.Product_SafetyStockLevel);

				// short

				dos.writeShort(this.Product_ReorderPoint);

				// BigDecimal

				dos.writeObject(this.Product_StandardCost);

				// BigDecimal

				dos.writeObject(this.Product_ListPrice);

				// String

				writeString(this.Product_Size, dos);

				// String

				writeString(this.Product_SizeUnitMeasureName, dos);

				// BigDecimal

				dos.writeObject(this.Product_Weight);

				// String

				writeString(this.Product_WeightUnitMeasureName, dos);

				// int

				dos.writeInt(this.Product_DaysToManufacture);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Class, dos);

				// String

				writeString(this.Product_Style, dos);

				// java.util.Date

				writeDate(this.Product_SellStartDate, dos);

				// java.util.Date

				writeDate(this.Product_SellEndDate, dos);

				// java.util.Date

				writeDate(this.Product_DiscontinuedDate, dos);

				// String

				writeString(this.Product_SubCategory, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Model, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",Sales_RevisionNumber=" + String.valueOf(Sales_RevisionNumber));
			sb.append(",Sales_OrderDate=" + String.valueOf(Sales_OrderDate));
			sb.append(",Sales_DueDate=" + String.valueOf(Sales_DueDate));
			sb.append(",Sales_ShipDate=" + String.valueOf(Sales_ShipDate));
			sb.append(",Sales_Status=" + String.valueOf(Sales_Status));
			sb.append(",Sales_OnlineOrderFlag=" + String.valueOf(Sales_OnlineOrderFlag));
			sb.append(",Sales_SalesOrderNumber=" + Sales_SalesOrderNumber);
			sb.append(",Sales_PurchaseOrderNumber=" + Sales_PurchaseOrderNumber);
			sb.append(",Sales_AccountNumber=" + Sales_AccountNumber);
			sb.append(",Sales_CustomerID=" + String.valueOf(Sales_CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",Sales_TerritoryID=" + String.valueOf(Sales_TerritoryID));
			sb.append(",Sales_BillToAddressID=" + String.valueOf(Sales_BillToAddressID));
			sb.append(",Sales_ShipToAddressID=" + String.valueOf(Sales_ShipToAddressID));
			sb.append(",Sales_ShipMethodID=" + String.valueOf(Sales_ShipMethodID));
			sb.append(",Sales_CreditCardID=" + String.valueOf(Sales_CreditCardID));
			sb.append(",Sales_CreditCardApprovalCode=" + Sales_CreditCardApprovalCode);
			sb.append(",Sales_CurrencyRateID=" + String.valueOf(Sales_CurrencyRateID));
			sb.append(",Sales_SubTotal=" + String.valueOf(Sales_SubTotal));
			sb.append(",Sales_TaxAmt=" + String.valueOf(Sales_TaxAmt));
			sb.append(",Sales_Freight=" + String.valueOf(Sales_Freight));
			sb.append(",Sales_TotalDue=" + String.valueOf(Sales_TotalDue));
			sb.append(",Sales_Comment=" + Sales_Comment);
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",Sales_CarrierTrackingNumber=" + Sales_CarrierTrackingNumber);
			sb.append(",Sales_OrderQty=" + String.valueOf(Sales_OrderQty));
			sb.append(",Sales_ProductID=" + String.valueOf(Sales_ProductID));
			sb.append(",Sales_SpecialOfferID=" + String.valueOf(Sales_SpecialOfferID));
			sb.append(",Sales_UnitPrice=" + String.valueOf(Sales_UnitPrice));
			sb.append(",Sales_UnitPriceDiscount=" + String.valueOf(Sales_UnitPriceDiscount));
			sb.append(",Sales_LineTotal=" + String.valueOf(Sales_LineTotal));
			sb.append(",SP_TerritoryID=" + String.valueOf(SP_TerritoryID));
			sb.append(",SalesQuota=" + String.valueOf(SalesQuota));
			sb.append(",Bonus=" + String.valueOf(Bonus));
			sb.append(",CommissionPct=" + String.valueOf(CommissionPct));
			sb.append(",SalesYTD=" + String.valueOf(SalesYTD));
			sb.append(",SalesLastYear=" + String.valueOf(SalesLastYear));
			sb.append(",SP_PersonType=" + SP_PersonType);
			sb.append(",SP_FirstName=" + SP_FirstName);
			sb.append(",SP_MiddleName=" + SP_MiddleName);
			sb.append(",SP_LastName=" + SP_LastName);
			sb.append(",SP_Suffix=" + SP_Suffix);
			sb.append(",SP_EmailPromotion=" + String.valueOf(SP_EmailPromotion));
			sb.append(",SP_AdditionalContactInfo=" + SP_AdditionalContactInfo);
			sb.append(",SP_Demographics=" + SP_Demographics);
			sb.append(",IN_TerritoryID=" + String.valueOf(IN_TerritoryID));
			sb.append(",IN_PersonType=" + IN_PersonType);
			sb.append(",IN_FirstName=" + IN_FirstName);
			sb.append(",IN_MiddleName=" + IN_MiddleName);
			sb.append(",IN_LastName=" + IN_LastName);
			sb.append(",IN_Suffix=" + IN_Suffix);
			sb.append(",IN_EmailPromotion=" + String.valueOf(IN_EmailPromotion));
			sb.append(",IN_AdditionalContactInfo=" + IN_AdditionalContactInfo);
			sb.append(",IN_Demographics=" + IN_Demographics);
			sb.append(",Product_Name=" + Product_Name);
			sb.append(",Product_Number=" + Product_Number);
			sb.append(",Product_MakeFlag=" + String.valueOf(Product_MakeFlag));
			sb.append(",Product_FinishedGoodsFlag=" + String.valueOf(Product_FinishedGoodsFlag));
			sb.append(",Product_Color=" + Product_Color);
			sb.append(",Product_SafetyStockLevel=" + String.valueOf(Product_SafetyStockLevel));
			sb.append(",Product_ReorderPoint=" + String.valueOf(Product_ReorderPoint));
			sb.append(",Product_StandardCost=" + String.valueOf(Product_StandardCost));
			sb.append(",Product_ListPrice=" + String.valueOf(Product_ListPrice));
			sb.append(",Product_Size=" + Product_Size);
			sb.append(",Product_SizeUnitMeasureName=" + Product_SizeUnitMeasureName);
			sb.append(",Product_Weight=" + String.valueOf(Product_Weight));
			sb.append(",Product_WeightUnitMeasureName=" + Product_WeightUnitMeasureName);
			sb.append(",Product_DaysToManufacture=" + String.valueOf(Product_DaysToManufacture));
			sb.append(",Product_Line=" + Product_Line);
			sb.append(",Product_Class=" + Product_Class);
			sb.append(",Product_Style=" + Product_Style);
			sb.append(",Product_SellStartDate=" + String.valueOf(Product_SellStartDate));
			sb.append(",Product_SellEndDate=" + String.valueOf(Product_SellEndDate));
			sb.append(",Product_DiscontinuedDate=" + String.valueOf(Product_DiscontinuedDate));
			sb.append(",Product_SubCategory=" + Product_SubCategory);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Model=" + Product_Model);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out_DataExplorationStruct
			implements routines.system.IPersistableRow<out_DataExplorationStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short Sales_RevisionNumber;

		public short getSales_RevisionNumber() {
			return this.Sales_RevisionNumber;
		}

		public java.util.Date Sales_OrderDate;

		public java.util.Date getSales_OrderDate() {
			return this.Sales_OrderDate;
		}

		public java.util.Date Sales_DueDate;

		public java.util.Date getSales_DueDate() {
			return this.Sales_DueDate;
		}

		public java.util.Date Sales_ShipDate;

		public java.util.Date getSales_ShipDate() {
			return this.Sales_ShipDate;
		}

		public short Sales_Status;

		public short getSales_Status() {
			return this.Sales_Status;
		}

		public byte Sales_OnlineOrderFlag;

		public byte getSales_OnlineOrderFlag() {
			return this.Sales_OnlineOrderFlag;
		}

		public String Sales_SalesOrderNumber;

		public String getSales_SalesOrderNumber() {
			return this.Sales_SalesOrderNumber;
		}

		public String Sales_PurchaseOrderNumber;

		public String getSales_PurchaseOrderNumber() {
			return this.Sales_PurchaseOrderNumber;
		}

		public String Sales_AccountNumber;

		public String getSales_AccountNumber() {
			return this.Sales_AccountNumber;
		}

		public int Sales_CustomerID;

		public int getSales_CustomerID() {
			return this.Sales_CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer Sales_TerritoryID;

		public Integer getSales_TerritoryID() {
			return this.Sales_TerritoryID;
		}

		public int Sales_BillToAddressID;

		public int getSales_BillToAddressID() {
			return this.Sales_BillToAddressID;
		}

		public int Sales_ShipToAddressID;

		public int getSales_ShipToAddressID() {
			return this.Sales_ShipToAddressID;
		}

		public int Sales_ShipMethodID;

		public int getSales_ShipMethodID() {
			return this.Sales_ShipMethodID;
		}

		public Integer Sales_CreditCardID;

		public Integer getSales_CreditCardID() {
			return this.Sales_CreditCardID;
		}

		public String Sales_CreditCardApprovalCode;

		public String getSales_CreditCardApprovalCode() {
			return this.Sales_CreditCardApprovalCode;
		}

		public Integer Sales_CurrencyRateID;

		public Integer getSales_CurrencyRateID() {
			return this.Sales_CurrencyRateID;
		}

		public BigDecimal Sales_SubTotal;

		public BigDecimal getSales_SubTotal() {
			return this.Sales_SubTotal;
		}

		public BigDecimal Sales_TaxAmt;

		public BigDecimal getSales_TaxAmt() {
			return this.Sales_TaxAmt;
		}

		public BigDecimal Sales_Freight;

		public BigDecimal getSales_Freight() {
			return this.Sales_Freight;
		}

		public BigDecimal Sales_TotalDue;

		public BigDecimal getSales_TotalDue() {
			return this.Sales_TotalDue;
		}

		public String Sales_Comment;

		public String getSales_Comment() {
			return this.Sales_Comment;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public String Sales_CarrierTrackingNumber;

		public String getSales_CarrierTrackingNumber() {
			return this.Sales_CarrierTrackingNumber;
		}

		public short Sales_OrderQty;

		public short getSales_OrderQty() {
			return this.Sales_OrderQty;
		}

		public int Sales_ProductID;

		public int getSales_ProductID() {
			return this.Sales_ProductID;
		}

		public int Sales_SpecialOfferID;

		public int getSales_SpecialOfferID() {
			return this.Sales_SpecialOfferID;
		}

		public BigDecimal Sales_UnitPrice;

		public BigDecimal getSales_UnitPrice() {
			return this.Sales_UnitPrice;
		}

		public BigDecimal Sales_UnitPriceDiscount;

		public BigDecimal getSales_UnitPriceDiscount() {
			return this.Sales_UnitPriceDiscount;
		}

		public BigDecimal Sales_LineTotal;

		public BigDecimal getSales_LineTotal() {
			return this.Sales_LineTotal;
		}

		public Integer SP_TerritoryID;

		public Integer getSP_TerritoryID() {
			return this.SP_TerritoryID;
		}

		public BigDecimal SalesQuota;

		public BigDecimal getSalesQuota() {
			return this.SalesQuota;
		}

		public BigDecimal Bonus;

		public BigDecimal getBonus() {
			return this.Bonus;
		}

		public BigDecimal CommissionPct;

		public BigDecimal getCommissionPct() {
			return this.CommissionPct;
		}

		public BigDecimal SalesYTD;

		public BigDecimal getSalesYTD() {
			return this.SalesYTD;
		}

		public BigDecimal SalesLastYear;

		public BigDecimal getSalesLastYear() {
			return this.SalesLastYear;
		}

		public String SP_PersonType;

		public String getSP_PersonType() {
			return this.SP_PersonType;
		}

		public String SP_FirstName;

		public String getSP_FirstName() {
			return this.SP_FirstName;
		}

		public String SP_MiddleName;

		public String getSP_MiddleName() {
			return this.SP_MiddleName;
		}

		public String SP_LastName;

		public String getSP_LastName() {
			return this.SP_LastName;
		}

		public String SP_Suffix;

		public String getSP_Suffix() {
			return this.SP_Suffix;
		}

		public int SP_EmailPromotion;

		public int getSP_EmailPromotion() {
			return this.SP_EmailPromotion;
		}

		public String SP_AdditionalContactInfo;

		public String getSP_AdditionalContactInfo() {
			return this.SP_AdditionalContactInfo;
		}

		public String SP_Demographics;

		public String getSP_Demographics() {
			return this.SP_Demographics;
		}

		public Integer IN_TerritoryID;

		public Integer getIN_TerritoryID() {
			return this.IN_TerritoryID;
		}

		public String IN_PersonType;

		public String getIN_PersonType() {
			return this.IN_PersonType;
		}

		public String IN_FirstName;

		public String getIN_FirstName() {
			return this.IN_FirstName;
		}

		public String IN_MiddleName;

		public String getIN_MiddleName() {
			return this.IN_MiddleName;
		}

		public String IN_LastName;

		public String getIN_LastName() {
			return this.IN_LastName;
		}

		public String IN_Suffix;

		public String getIN_Suffix() {
			return this.IN_Suffix;
		}

		public int IN_EmailPromotion;

		public int getIN_EmailPromotion() {
			return this.IN_EmailPromotion;
		}

		public String IN_AdditionalContactInfo;

		public String getIN_AdditionalContactInfo() {
			return this.IN_AdditionalContactInfo;
		}

		public String IN_Demographics;

		public String getIN_Demographics() {
			return this.IN_Demographics;
		}

		public String Product_Name;

		public String getProduct_Name() {
			return this.Product_Name;
		}

		public String Product_Number;

		public String getProduct_Number() {
			return this.Product_Number;
		}

		public byte Product_MakeFlag;

		public byte getProduct_MakeFlag() {
			return this.Product_MakeFlag;
		}

		public byte Product_FinishedGoodsFlag;

		public byte getProduct_FinishedGoodsFlag() {
			return this.Product_FinishedGoodsFlag;
		}

		public String Product_Color;

		public String getProduct_Color() {
			return this.Product_Color;
		}

		public short Product_SafetyStockLevel;

		public short getProduct_SafetyStockLevel() {
			return this.Product_SafetyStockLevel;
		}

		public short Product_ReorderPoint;

		public short getProduct_ReorderPoint() {
			return this.Product_ReorderPoint;
		}

		public BigDecimal Product_StandardCost;

		public BigDecimal getProduct_StandardCost() {
			return this.Product_StandardCost;
		}

		public BigDecimal Product_ListPrice;

		public BigDecimal getProduct_ListPrice() {
			return this.Product_ListPrice;
		}

		public String Product_Size;

		public String getProduct_Size() {
			return this.Product_Size;
		}

		public String Product_SizeUnitMeasureName;

		public String getProduct_SizeUnitMeasureName() {
			return this.Product_SizeUnitMeasureName;
		}

		public BigDecimal Product_Weight;

		public BigDecimal getProduct_Weight() {
			return this.Product_Weight;
		}

		public String Product_WeightUnitMeasureName;

		public String getProduct_WeightUnitMeasureName() {
			return this.Product_WeightUnitMeasureName;
		}

		public int Product_DaysToManufacture;

		public int getProduct_DaysToManufacture() {
			return this.Product_DaysToManufacture;
		}

		public String Product_Line;

		public String getProduct_Line() {
			return this.Product_Line;
		}

		public String Product_Class;

		public String getProduct_Class() {
			return this.Product_Class;
		}

		public String Product_Style;

		public String getProduct_Style() {
			return this.Product_Style;
		}

		public java.util.Date Product_SellStartDate;

		public java.util.Date getProduct_SellStartDate() {
			return this.Product_SellStartDate;
		}

		public java.util.Date Product_SellEndDate;

		public java.util.Date getProduct_SellEndDate() {
			return this.Product_SellEndDate;
		}

		public java.util.Date Product_DiscontinuedDate;

		public java.util.Date getProduct_DiscontinuedDate() {
			return this.Product_DiscontinuedDate;
		}

		public String Product_SubCategory;

		public String getProduct_SubCategory() {
			return this.Product_SubCategory;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Model;

		public String getProduct_Model() {
			return this.Product_Model;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.Sales_RevisionNumber = dis.readShort();

					this.Sales_OrderDate = readDate(dis);

					this.Sales_DueDate = readDate(dis);

					this.Sales_ShipDate = readDate(dis);

					this.Sales_Status = dis.readShort();

					this.Sales_OnlineOrderFlag = dis.readByte();

					this.Sales_SalesOrderNumber = readString(dis);

					this.Sales_PurchaseOrderNumber = readString(dis);

					this.Sales_AccountNumber = readString(dis);

					this.Sales_CustomerID = dis.readInt();

					this.SalesPersonID = readInteger(dis);

					this.Sales_TerritoryID = readInteger(dis);

					this.Sales_BillToAddressID = dis.readInt();

					this.Sales_ShipToAddressID = dis.readInt();

					this.Sales_ShipMethodID = dis.readInt();

					this.Sales_CreditCardID = readInteger(dis);

					this.Sales_CreditCardApprovalCode = readString(dis);

					this.Sales_CurrencyRateID = readInteger(dis);

					this.Sales_SubTotal = (BigDecimal) dis.readObject();

					this.Sales_TaxAmt = (BigDecimal) dis.readObject();

					this.Sales_Freight = (BigDecimal) dis.readObject();

					this.Sales_TotalDue = (BigDecimal) dis.readObject();

					this.Sales_Comment = readString(dis);

					this.SalesOrderDetailID = dis.readInt();

					this.Sales_CarrierTrackingNumber = readString(dis);

					this.Sales_OrderQty = dis.readShort();

					this.Sales_ProductID = dis.readInt();

					this.Sales_SpecialOfferID = dis.readInt();

					this.Sales_UnitPrice = (BigDecimal) dis.readObject();

					this.Sales_UnitPriceDiscount = (BigDecimal) dis.readObject();

					this.Sales_LineTotal = (BigDecimal) dis.readObject();

					this.SP_TerritoryID = readInteger(dis);

					this.SalesQuota = (BigDecimal) dis.readObject();

					this.Bonus = (BigDecimal) dis.readObject();

					this.CommissionPct = (BigDecimal) dis.readObject();

					this.SalesYTD = (BigDecimal) dis.readObject();

					this.SalesLastYear = (BigDecimal) dis.readObject();

					this.SP_PersonType = readString(dis);

					this.SP_FirstName = readString(dis);

					this.SP_MiddleName = readString(dis);

					this.SP_LastName = readString(dis);

					this.SP_Suffix = readString(dis);

					this.SP_EmailPromotion = dis.readInt();

					this.SP_AdditionalContactInfo = readString(dis);

					this.SP_Demographics = readString(dis);

					this.IN_TerritoryID = readInteger(dis);

					this.IN_PersonType = readString(dis);

					this.IN_FirstName = readString(dis);

					this.IN_MiddleName = readString(dis);

					this.IN_LastName = readString(dis);

					this.IN_Suffix = readString(dis);

					this.IN_EmailPromotion = dis.readInt();

					this.IN_AdditionalContactInfo = readString(dis);

					this.IN_Demographics = readString(dis);

					this.Product_Name = readString(dis);

					this.Product_Number = readString(dis);

					this.Product_MakeFlag = dis.readByte();

					this.Product_FinishedGoodsFlag = dis.readByte();

					this.Product_Color = readString(dis);

					this.Product_SafetyStockLevel = dis.readShort();

					this.Product_ReorderPoint = dis.readShort();

					this.Product_StandardCost = (BigDecimal) dis.readObject();

					this.Product_ListPrice = (BigDecimal) dis.readObject();

					this.Product_Size = readString(dis);

					this.Product_SizeUnitMeasureName = readString(dis);

					this.Product_Weight = (BigDecimal) dis.readObject();

					this.Product_WeightUnitMeasureName = readString(dis);

					this.Product_DaysToManufacture = dis.readInt();

					this.Product_Line = readString(dis);

					this.Product_Class = readString(dis);

					this.Product_Style = readString(dis);

					this.Product_SellStartDate = readDate(dis);

					this.Product_SellEndDate = readDate(dis);

					this.Product_DiscontinuedDate = readDate(dis);

					this.Product_SubCategory = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Model = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.Sales_RevisionNumber);

				// java.util.Date

				writeDate(this.Sales_OrderDate, dos);

				// java.util.Date

				writeDate(this.Sales_DueDate, dos);

				// java.util.Date

				writeDate(this.Sales_ShipDate, dos);

				// short

				dos.writeShort(this.Sales_Status);

				// byte

				dos.writeByte(this.Sales_OnlineOrderFlag);

				// String

				writeString(this.Sales_SalesOrderNumber, dos);

				// String

				writeString(this.Sales_PurchaseOrderNumber, dos);

				// String

				writeString(this.Sales_AccountNumber, dos);

				// int

				dos.writeInt(this.Sales_CustomerID);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.Sales_TerritoryID, dos);

				// int

				dos.writeInt(this.Sales_BillToAddressID);

				// int

				dos.writeInt(this.Sales_ShipToAddressID);

				// int

				dos.writeInt(this.Sales_ShipMethodID);

				// Integer

				writeInteger(this.Sales_CreditCardID, dos);

				// String

				writeString(this.Sales_CreditCardApprovalCode, dos);

				// Integer

				writeInteger(this.Sales_CurrencyRateID, dos);

				// BigDecimal

				dos.writeObject(this.Sales_SubTotal);

				// BigDecimal

				dos.writeObject(this.Sales_TaxAmt);

				// BigDecimal

				dos.writeObject(this.Sales_Freight);

				// BigDecimal

				dos.writeObject(this.Sales_TotalDue);

				// String

				writeString(this.Sales_Comment, dos);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// String

				writeString(this.Sales_CarrierTrackingNumber, dos);

				// short

				dos.writeShort(this.Sales_OrderQty);

				// int

				dos.writeInt(this.Sales_ProductID);

				// int

				dos.writeInt(this.Sales_SpecialOfferID);

				// BigDecimal

				dos.writeObject(this.Sales_UnitPrice);

				// BigDecimal

				dos.writeObject(this.Sales_UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.Sales_LineTotal);

				// Integer

				writeInteger(this.SP_TerritoryID, dos);

				// BigDecimal

				dos.writeObject(this.SalesQuota);

				// BigDecimal

				dos.writeObject(this.Bonus);

				// BigDecimal

				dos.writeObject(this.CommissionPct);

				// BigDecimal

				dos.writeObject(this.SalesYTD);

				// BigDecimal

				dos.writeObject(this.SalesLastYear);

				// String

				writeString(this.SP_PersonType, dos);

				// String

				writeString(this.SP_FirstName, dos);

				// String

				writeString(this.SP_MiddleName, dos);

				// String

				writeString(this.SP_LastName, dos);

				// String

				writeString(this.SP_Suffix, dos);

				// int

				dos.writeInt(this.SP_EmailPromotion);

				// String

				writeString(this.SP_AdditionalContactInfo, dos);

				// String

				writeString(this.SP_Demographics, dos);

				// Integer

				writeInteger(this.IN_TerritoryID, dos);

				// String

				writeString(this.IN_PersonType, dos);

				// String

				writeString(this.IN_FirstName, dos);

				// String

				writeString(this.IN_MiddleName, dos);

				// String

				writeString(this.IN_LastName, dos);

				// String

				writeString(this.IN_Suffix, dos);

				// int

				dos.writeInt(this.IN_EmailPromotion);

				// String

				writeString(this.IN_AdditionalContactInfo, dos);

				// String

				writeString(this.IN_Demographics, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Product_Number, dos);

				// byte

				dos.writeByte(this.Product_MakeFlag);

				// byte

				dos.writeByte(this.Product_FinishedGoodsFlag);

				// String

				writeString(this.Product_Color, dos);

				// short

				dos.writeShort(this.Product_SafetyStockLevel);

				// short

				dos.writeShort(this.Product_ReorderPoint);

				// BigDecimal

				dos.writeObject(this.Product_StandardCost);

				// BigDecimal

				dos.writeObject(this.Product_ListPrice);

				// String

				writeString(this.Product_Size, dos);

				// String

				writeString(this.Product_SizeUnitMeasureName, dos);

				// BigDecimal

				dos.writeObject(this.Product_Weight);

				// String

				writeString(this.Product_WeightUnitMeasureName, dos);

				// int

				dos.writeInt(this.Product_DaysToManufacture);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Class, dos);

				// String

				writeString(this.Product_Style, dos);

				// java.util.Date

				writeDate(this.Product_SellStartDate, dos);

				// java.util.Date

				writeDate(this.Product_SellEndDate, dos);

				// java.util.Date

				writeDate(this.Product_DiscontinuedDate, dos);

				// String

				writeString(this.Product_SubCategory, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Model, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",Sales_RevisionNumber=" + String.valueOf(Sales_RevisionNumber));
			sb.append(",Sales_OrderDate=" + String.valueOf(Sales_OrderDate));
			sb.append(",Sales_DueDate=" + String.valueOf(Sales_DueDate));
			sb.append(",Sales_ShipDate=" + String.valueOf(Sales_ShipDate));
			sb.append(",Sales_Status=" + String.valueOf(Sales_Status));
			sb.append(",Sales_OnlineOrderFlag=" + String.valueOf(Sales_OnlineOrderFlag));
			sb.append(",Sales_SalesOrderNumber=" + Sales_SalesOrderNumber);
			sb.append(",Sales_PurchaseOrderNumber=" + Sales_PurchaseOrderNumber);
			sb.append(",Sales_AccountNumber=" + Sales_AccountNumber);
			sb.append(",Sales_CustomerID=" + String.valueOf(Sales_CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",Sales_TerritoryID=" + String.valueOf(Sales_TerritoryID));
			sb.append(",Sales_BillToAddressID=" + String.valueOf(Sales_BillToAddressID));
			sb.append(",Sales_ShipToAddressID=" + String.valueOf(Sales_ShipToAddressID));
			sb.append(",Sales_ShipMethodID=" + String.valueOf(Sales_ShipMethodID));
			sb.append(",Sales_CreditCardID=" + String.valueOf(Sales_CreditCardID));
			sb.append(",Sales_CreditCardApprovalCode=" + Sales_CreditCardApprovalCode);
			sb.append(",Sales_CurrencyRateID=" + String.valueOf(Sales_CurrencyRateID));
			sb.append(",Sales_SubTotal=" + String.valueOf(Sales_SubTotal));
			sb.append(",Sales_TaxAmt=" + String.valueOf(Sales_TaxAmt));
			sb.append(",Sales_Freight=" + String.valueOf(Sales_Freight));
			sb.append(",Sales_TotalDue=" + String.valueOf(Sales_TotalDue));
			sb.append(",Sales_Comment=" + Sales_Comment);
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",Sales_CarrierTrackingNumber=" + Sales_CarrierTrackingNumber);
			sb.append(",Sales_OrderQty=" + String.valueOf(Sales_OrderQty));
			sb.append(",Sales_ProductID=" + String.valueOf(Sales_ProductID));
			sb.append(",Sales_SpecialOfferID=" + String.valueOf(Sales_SpecialOfferID));
			sb.append(",Sales_UnitPrice=" + String.valueOf(Sales_UnitPrice));
			sb.append(",Sales_UnitPriceDiscount=" + String.valueOf(Sales_UnitPriceDiscount));
			sb.append(",Sales_LineTotal=" + String.valueOf(Sales_LineTotal));
			sb.append(",SP_TerritoryID=" + String.valueOf(SP_TerritoryID));
			sb.append(",SalesQuota=" + String.valueOf(SalesQuota));
			sb.append(",Bonus=" + String.valueOf(Bonus));
			sb.append(",CommissionPct=" + String.valueOf(CommissionPct));
			sb.append(",SalesYTD=" + String.valueOf(SalesYTD));
			sb.append(",SalesLastYear=" + String.valueOf(SalesLastYear));
			sb.append(",SP_PersonType=" + SP_PersonType);
			sb.append(",SP_FirstName=" + SP_FirstName);
			sb.append(",SP_MiddleName=" + SP_MiddleName);
			sb.append(",SP_LastName=" + SP_LastName);
			sb.append(",SP_Suffix=" + SP_Suffix);
			sb.append(",SP_EmailPromotion=" + String.valueOf(SP_EmailPromotion));
			sb.append(",SP_AdditionalContactInfo=" + SP_AdditionalContactInfo);
			sb.append(",SP_Demographics=" + SP_Demographics);
			sb.append(",IN_TerritoryID=" + String.valueOf(IN_TerritoryID));
			sb.append(",IN_PersonType=" + IN_PersonType);
			sb.append(",IN_FirstName=" + IN_FirstName);
			sb.append(",IN_MiddleName=" + IN_MiddleName);
			sb.append(",IN_LastName=" + IN_LastName);
			sb.append(",IN_Suffix=" + IN_Suffix);
			sb.append(",IN_EmailPromotion=" + String.valueOf(IN_EmailPromotion));
			sb.append(",IN_AdditionalContactInfo=" + IN_AdditionalContactInfo);
			sb.append(",IN_Demographics=" + IN_Demographics);
			sb.append(",Product_Name=" + Product_Name);
			sb.append(",Product_Number=" + Product_Number);
			sb.append(",Product_MakeFlag=" + String.valueOf(Product_MakeFlag));
			sb.append(",Product_FinishedGoodsFlag=" + String.valueOf(Product_FinishedGoodsFlag));
			sb.append(",Product_Color=" + Product_Color);
			sb.append(",Product_SafetyStockLevel=" + String.valueOf(Product_SafetyStockLevel));
			sb.append(",Product_ReorderPoint=" + String.valueOf(Product_ReorderPoint));
			sb.append(",Product_StandardCost=" + String.valueOf(Product_StandardCost));
			sb.append(",Product_ListPrice=" + String.valueOf(Product_ListPrice));
			sb.append(",Product_Size=" + Product_Size);
			sb.append(",Product_SizeUnitMeasureName=" + Product_SizeUnitMeasureName);
			sb.append(",Product_Weight=" + String.valueOf(Product_Weight));
			sb.append(",Product_WeightUnitMeasureName=" + Product_WeightUnitMeasureName);
			sb.append(",Product_DaysToManufacture=" + String.valueOf(Product_DaysToManufacture));
			sb.append(",Product_Line=" + Product_Line);
			sb.append(",Product_Class=" + Product_Class);
			sb.append(",Product_Style=" + Product_Style);
			sb.append(",Product_SellStartDate=" + String.valueOf(Product_SellStartDate));
			sb.append(",Product_SellEndDate=" + String.valueOf(Product_SellEndDate));
			sb.append(",Product_DiscontinuedDate=" + String.valueOf(Product_DiscontinuedDate));
			sb.append(",Product_SubCategory=" + Product_SubCategory);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Model=" + Product_Model);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out_DataExplorationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public byte OnlineOrderFlag;

		public byte getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public int BillToAddressID;

		public int getBillToAddressID() {
			return this.BillToAddressID;
		}

		public int ShipToAddressID;

		public int getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public int ShipMethodID;

		public int getShipMethodID() {
			return this.ShipMethodID;
		}

		public Integer CreditCardID;

		public Integer getCreditCardID() {
			return this.CreditCardID;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Integer CurrencyRateID;

		public Integer getCurrencyRateID() {
			return this.CurrencyRateID;
		}

		public BigDecimal SubTotal;

		public BigDecimal getSubTotal() {
			return this.SubTotal;
		}

		public BigDecimal TaxAmt;

		public BigDecimal getTaxAmt() {
			return this.TaxAmt;
		}

		public BigDecimal Freight;

		public BigDecimal getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public String rowguid;

		public String getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public String CarrierTrackingNumber;

		public String getCarrierTrackingNumber() {
			return this.CarrierTrackingNumber;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int SpecialOfferID;

		public int getSpecialOfferID() {
			return this.SpecialOfferID;
		}

		public BigDecimal UnitPrice;

		public BigDecimal getUnitPrice() {
			return this.UnitPrice;
		}

		public BigDecimal UnitPriceDiscount;

		public BigDecimal getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readByte();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.SalesPersonID = readInteger(dis);

					this.TerritoryID = readInteger(dis);

					this.BillToAddressID = dis.readInt();

					this.ShipToAddressID = dis.readInt();

					this.ShipMethodID = dis.readInt();

					this.CreditCardID = readInteger(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.CurrencyRateID = readInteger(dis);

					this.SubTotal = (BigDecimal) dis.readObject();

					this.TaxAmt = (BigDecimal) dis.readObject();

					this.Freight = (BigDecimal) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = readString(dis);

					this.ModifiedDate = readDate(dis);

					this.SalesOrderDetailID = dis.readInt();

					this.CarrierTrackingNumber = readString(dis);

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.SpecialOfferID = dis.readInt();

					this.UnitPrice = (BigDecimal) dis.readObject();

					this.UnitPriceDiscount = (BigDecimal) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// byte

				dos.writeByte(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.TerritoryID, dos);

				// int

				dos.writeInt(this.BillToAddressID);

				// int

				dos.writeInt(this.ShipToAddressID);

				// int

				dos.writeInt(this.ShipMethodID);

				// Integer

				writeInteger(this.CreditCardID, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Integer

				writeInteger(this.CurrencyRateID, dos);

				// BigDecimal

				dos.writeObject(this.SubTotal);

				// BigDecimal

				dos.writeObject(this.TaxAmt);

				// BigDecimal

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// String

				writeString(this.rowguid, dos);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// String

				writeString(this.CarrierTrackingNumber, dos);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SpecialOfferID);

				// BigDecimal

				dos.writeObject(this.UnitPrice);

				// BigDecimal

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",ShipMethodID=" + String.valueOf(ShipMethodID));
			sb.append(",CreditCardID=" + String.valueOf(CreditCardID));
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",CurrencyRateID=" + String.valueOf(CurrencyRateID));
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + rowguid);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",CarrierTrackingNumber=" + CarrierTrackingNumber);
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",SpecialOfferID=" + String.valueOf(SpecialOfferID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public byte OnlineOrderFlag;

		public byte getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public int BillToAddressID;

		public int getBillToAddressID() {
			return this.BillToAddressID;
		}

		public int ShipToAddressID;

		public int getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public int ShipMethodID;

		public int getShipMethodID() {
			return this.ShipMethodID;
		}

		public Integer CreditCardID;

		public Integer getCreditCardID() {
			return this.CreditCardID;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Integer CurrencyRateID;

		public Integer getCurrencyRateID() {
			return this.CurrencyRateID;
		}

		public BigDecimal SubTotal;

		public BigDecimal getSubTotal() {
			return this.SubTotal;
		}

		public BigDecimal TaxAmt;

		public BigDecimal getTaxAmt() {
			return this.TaxAmt;
		}

		public BigDecimal Freight;

		public BigDecimal getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public String rowguid;

		public String getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public String CarrierTrackingNumber;

		public String getCarrierTrackingNumber() {
			return this.CarrierTrackingNumber;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public int SpecialOfferID;

		public int getSpecialOfferID() {
			return this.SpecialOfferID;
		}

		public BigDecimal UnitPrice;

		public BigDecimal getUnitPrice() {
			return this.UnitPrice;
		}

		public BigDecimal UnitPriceDiscount;

		public BigDecimal getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readByte();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.SalesPersonID = readInteger(dis);

					this.TerritoryID = readInteger(dis);

					this.BillToAddressID = dis.readInt();

					this.ShipToAddressID = dis.readInt();

					this.ShipMethodID = dis.readInt();

					this.CreditCardID = readInteger(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.CurrencyRateID = readInteger(dis);

					this.SubTotal = (BigDecimal) dis.readObject();

					this.TaxAmt = (BigDecimal) dis.readObject();

					this.Freight = (BigDecimal) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = readString(dis);

					this.ModifiedDate = readDate(dis);

					this.SalesOrderDetailID = dis.readInt();

					this.CarrierTrackingNumber = readString(dis);

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.SpecialOfferID = dis.readInt();

					this.UnitPrice = (BigDecimal) dis.readObject();

					this.UnitPriceDiscount = (BigDecimal) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// byte

				dos.writeByte(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.TerritoryID, dos);

				// int

				dos.writeInt(this.BillToAddressID);

				// int

				dos.writeInt(this.ShipToAddressID);

				// int

				dos.writeInt(this.ShipMethodID);

				// Integer

				writeInteger(this.CreditCardID, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Integer

				writeInteger(this.CurrencyRateID, dos);

				// BigDecimal

				dos.writeObject(this.SubTotal);

				// BigDecimal

				dos.writeObject(this.TaxAmt);

				// BigDecimal

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// String

				writeString(this.rowguid, dos);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// String

				writeString(this.CarrierTrackingNumber, dos);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// int

				dos.writeInt(this.SpecialOfferID);

				// BigDecimal

				dos.writeObject(this.UnitPrice);

				// BigDecimal

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",ShipMethodID=" + String.valueOf(ShipMethodID));
			sb.append(",CreditCardID=" + String.valueOf(CreditCardID));
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",CurrencyRateID=" + String.valueOf(CurrencyRateID));
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + rowguid);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",CarrierTrackingNumber=" + CarrierTrackingNumber);
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",SpecialOfferID=" + String.valueOf(SpecialOfferID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				out_DataExplorationStruct out_DataExploration = new out_DataExplorationStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Users/jcerqueira/Desktop/Exploracao_DataScience.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_1.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("SalesOrderID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_RevisionNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_OrderDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_DueDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_ShipDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_Status");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_OnlineOrderFlag");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_SalesOrderNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_PurchaseOrderNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_AccountNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_CustomerID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesPersonID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_TerritoryID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_BillToAddressID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_ShipToAddressID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_ShipMethodID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_CreditCardID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_CreditCardApprovalCode");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_CurrencyRateID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_SubTotal");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_TaxAmt");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_Freight");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_TotalDue");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_Comment");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesOrderDetailID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_CarrierTrackingNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_OrderQty");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_ProductID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_SpecialOfferID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_UnitPrice");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_UnitPriceDiscount");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sales_LineTotal");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_TerritoryID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesQuota");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Bonus");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CommissionPct");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesYTD");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesLastYear");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_PersonType");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_FirstName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_MiddleName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_LastName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_Suffix");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_EmailPromotion");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_AdditionalContactInfo");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SP_Demographics");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_TerritoryID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_PersonType");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_FirstName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_MiddleName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_LastName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_Suffix");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_EmailPromotion");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_AdditionalContactInfo");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IN_Demographics");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Name");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Number");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_MakeFlag");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_FinishedGoodsFlag");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Color");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_SafetyStockLevel");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_ReorderPoint");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_StandardCost");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_ListPrice");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Size");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_SizeUnitMeasureName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Weight");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_WeightUnitMeasureName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_DaysToManufacture");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Line");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Class");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Style");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_SellStartDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_SellEndDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_DiscontinuedDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_SubCategory");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Category");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Model");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out_DataExploration");
				}

				int tos_count_tSampleRow_1 = 0;

				String[] rangetSampleRow_1 = "1..30000".split(",");
				java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

				Integer nb_line_tSampleRow_1 = 0;

				for (int i = 0; i < rangetSampleRow_1.length; i++) {

					if (rangetSampleRow_1[i].matches("\\d+")) {

						rangeSettSampleRow_1.add(Integer.valueOf(rangetSampleRow_1[i]));

					} else if (rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_1 = rangetSampleRow_1[i].split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_1[0]).intValue(); j < Integer
								.valueOf(edgetSampleRow_1[1]).intValue() + 1; j++) {
							rangeSettSampleRow_1.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out_DataExplorationStruct out_DataExploration_tmp = new out_DataExplorationStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT\n	a.*,\n	b.SalesOrderDetailID,\n	b.CarrierTrackingNumber,\n	b.OrderQty,\n	b.ProductID,\n	b.SpecialOfferID,\n	b.U"
						+ "nitPrice,\n	b.UnitPriceDiscount,\n	b.LineTotal\nFROM\n	SalesOrderHeader a\nINNER JOIN\n	SalesOrderDetail b\n	ON a.SalesO"
						+ "rderID = b.SalesOrderID ";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row1.SalesOrderID = 0;
						} else {

							row1.SalesOrderID = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row1.RevisionNumber = 0;
						} else {

							row1.RevisionNumber = rs_tDBInput_4.getShort(2);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row1.OrderDate = null;
						} else {

							if (rs_tDBInput_4.getString(3) != null) {
								String dateString_tDBInput_4 = rs_tDBInput_4.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_4)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
									row1.OrderDate = rs_tDBInput_4.getTimestamp(3);
								} else {
									row1.OrderDate = (java.util.Date) year0_tDBInput_4.clone();
								}
							} else {
								row1.OrderDate = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row1.DueDate = null;
						} else {

							if (rs_tDBInput_4.getString(4) != null) {
								String dateString_tDBInput_4 = rs_tDBInput_4.getString(4);
								if (!("0000-00-00").equals(dateString_tDBInput_4)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
									row1.DueDate = rs_tDBInput_4.getTimestamp(4);
								} else {
									row1.DueDate = (java.util.Date) year0_tDBInput_4.clone();
								}
							} else {
								row1.DueDate = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row1.ShipDate = null;
						} else {

							if (rs_tDBInput_4.getString(5) != null) {
								String dateString_tDBInput_4 = rs_tDBInput_4.getString(5);
								if (!("0000-00-00").equals(dateString_tDBInput_4)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
									row1.ShipDate = rs_tDBInput_4.getTimestamp(5);
								} else {
									row1.ShipDate = (java.util.Date) year0_tDBInput_4.clone();
								}
							} else {
								row1.ShipDate = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row1.Status = 0;
						} else {

							row1.Status = rs_tDBInput_4.getShort(6);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row1.OnlineOrderFlag = 0;
						} else {

							row1.OnlineOrderFlag = rs_tDBInput_4.getByte(7);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row1.SalesOrderNumber = null;
						} else {

							row1.SalesOrderNumber = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row1.PurchaseOrderNumber = null;
						} else {

							row1.PurchaseOrderNumber = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row1.AccountNumber = null;
						} else {

							row1.AccountNumber = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row1.CustomerID = 0;
						} else {

							row1.CustomerID = rs_tDBInput_4.getInt(11);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row1.SalesPersonID = null;
						} else {

							row1.SalesPersonID = rs_tDBInput_4.getInt(12);
							if (rs_tDBInput_4.wasNull()) {
								row1.SalesPersonID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row1.TerritoryID = null;
						} else {

							row1.TerritoryID = rs_tDBInput_4.getInt(13);
							if (rs_tDBInput_4.wasNull()) {
								row1.TerritoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row1.BillToAddressID = 0;
						} else {

							row1.BillToAddressID = rs_tDBInput_4.getInt(14);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row1.ShipToAddressID = 0;
						} else {

							row1.ShipToAddressID = rs_tDBInput_4.getInt(15);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row1.ShipMethodID = 0;
						} else {

							row1.ShipMethodID = rs_tDBInput_4.getInt(16);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row1.CreditCardID = null;
						} else {

							row1.CreditCardID = rs_tDBInput_4.getInt(17);
							if (rs_tDBInput_4.wasNull()) {
								row1.CreditCardID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row1.CreditCardApprovalCode = null;
						} else {

							row1.CreditCardApprovalCode = routines.system.JDBCUtil.getString(rs_tDBInput_4, 18, false);
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row1.CurrencyRateID = null;
						} else {

							row1.CurrencyRateID = rs_tDBInput_4.getInt(19);
							if (rs_tDBInput_4.wasNull()) {
								row1.CurrencyRateID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row1.SubTotal = null;
						} else {

							row1.SubTotal = rs_tDBInput_4.getBigDecimal(20);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row1.TaxAmt = null;
						} else {

							row1.TaxAmt = rs_tDBInput_4.getBigDecimal(21);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row1.Freight = null;
						} else {

							row1.Freight = rs_tDBInput_4.getBigDecimal(22);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row1.TotalDue = null;
						} else {

							row1.TotalDue = rs_tDBInput_4.getBigDecimal(23);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row1.Comment = null;
						} else {

							row1.Comment = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, false);
						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row1.rowguid = null;
						} else {

							row1.rowguid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 25, false);
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row1.ModifiedDate = null;
						} else {

							if (rs_tDBInput_4.getString(26) != null) {
								String dateString_tDBInput_4 = rs_tDBInput_4.getString(26);
								if (!("0000-00-00").equals(dateString_tDBInput_4)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
									row1.ModifiedDate = rs_tDBInput_4.getTimestamp(26);
								} else {
									row1.ModifiedDate = (java.util.Date) year0_tDBInput_4.clone();
								}
							} else {
								row1.ModifiedDate = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row1.SalesOrderDetailID = 0;
						} else {

							row1.SalesOrderDetailID = rs_tDBInput_4.getInt(27);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row1.CarrierTrackingNumber = null;
						} else {

							row1.CarrierTrackingNumber = routines.system.JDBCUtil.getString(rs_tDBInput_4, 28, false);
						}
						if (colQtyInRs_tDBInput_4 < 29) {
							row1.OrderQty = 0;
						} else {

							row1.OrderQty = rs_tDBInput_4.getShort(29);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 30) {
							row1.ProductID = 0;
						} else {

							row1.ProductID = rs_tDBInput_4.getInt(30);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 31) {
							row1.SpecialOfferID = 0;
						} else {

							row1.SpecialOfferID = rs_tDBInput_4.getInt(31);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 32) {
							row1.UnitPrice = null;
						} else {

							row1.UnitPrice = rs_tDBInput_4.getBigDecimal(32);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 33) {
							row1.UnitPriceDiscount = null;
						} else {

							row1.UnitPriceDiscount = rs_tDBInput_4.getBigDecimal(33);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 34) {
							row1.LineTotal = null;
						} else {

							row1.LineTotal = rs_tDBInput_4.getBigDecimal(34);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row4__BusinessEntityID = row1.SalesPersonID;
							if (exprKeyValue_row4__BusinessEntityID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row4HashKey.BusinessEntityID = (int) (Integer) exprKeyValue_row4__BusinessEntityID;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.BusinessEntityID = '" +
							// row4HashKey.BusinessEntityID + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row2__CustomerID = row1.CustomerID;
							if (exprKeyValue_row2__CustomerID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.CustomerID = (int) (Integer) exprKeyValue_row2__CustomerID;
							}

							row2HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.CustomerID = '" +
							// row2HashKey.CustomerID + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row3"
						///////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row3__ProductID = row1.ProductID;
							if (exprKeyValue_row3__ProductID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row3HashKey.ProductID = (int) (Integer) exprKeyValue_row3__ProductID;
							}

							row3HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row3.lookup(row3HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
							// and it contains more one result from keys : row3.ProductID = '" +
							// row3HashKey.ProductID + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out_DataExploration = null;

// # Output table : 'out_DataExploration'
							out_DataExploration_tmp.SalesOrderID = row1.SalesOrderID;
							out_DataExploration_tmp.Sales_RevisionNumber = row1.RevisionNumber;
							out_DataExploration_tmp.Sales_OrderDate = row1.OrderDate;
							out_DataExploration_tmp.Sales_DueDate = row1.DueDate;
							out_DataExploration_tmp.Sales_ShipDate = row1.ShipDate;
							out_DataExploration_tmp.Sales_Status = row1.Status;
							out_DataExploration_tmp.Sales_OnlineOrderFlag = row1.OnlineOrderFlag;
							out_DataExploration_tmp.Sales_SalesOrderNumber = row1.SalesOrderNumber;
							out_DataExploration_tmp.Sales_PurchaseOrderNumber = row1.PurchaseOrderNumber;
							out_DataExploration_tmp.Sales_AccountNumber = row1.AccountNumber;
							out_DataExploration_tmp.Sales_CustomerID = row1.CustomerID;
							out_DataExploration_tmp.SalesPersonID = row1.SalesPersonID;
							out_DataExploration_tmp.Sales_TerritoryID = row1.TerritoryID;
							out_DataExploration_tmp.Sales_BillToAddressID = row1.BillToAddressID;
							out_DataExploration_tmp.Sales_ShipToAddressID = row1.ShipToAddressID;
							out_DataExploration_tmp.Sales_ShipMethodID = row1.ShipMethodID;
							out_DataExploration_tmp.Sales_CreditCardID = row1.CreditCardID;
							out_DataExploration_tmp.Sales_CreditCardApprovalCode = row1.CreditCardApprovalCode;
							out_DataExploration_tmp.Sales_CurrencyRateID = row1.CurrencyRateID;
							out_DataExploration_tmp.Sales_SubTotal = row1.SubTotal;
							out_DataExploration_tmp.Sales_TaxAmt = row1.TaxAmt;
							out_DataExploration_tmp.Sales_Freight = row1.Freight;
							out_DataExploration_tmp.Sales_TotalDue = row1.TotalDue;
							out_DataExploration_tmp.Sales_Comment = row1.Comment;
							out_DataExploration_tmp.SalesOrderDetailID = row1.SalesOrderDetailID;
							out_DataExploration_tmp.Sales_CarrierTrackingNumber = row1.CarrierTrackingNumber;
							out_DataExploration_tmp.Sales_OrderQty = row1.OrderQty;
							out_DataExploration_tmp.Sales_ProductID = row1.ProductID;
							out_DataExploration_tmp.Sales_SpecialOfferID = row1.SpecialOfferID;
							out_DataExploration_tmp.Sales_UnitPrice = row1.UnitPrice;
							out_DataExploration_tmp.Sales_UnitPriceDiscount = row1.UnitPriceDiscount;
							out_DataExploration_tmp.Sales_LineTotal = row1.LineTotal;
							out_DataExploration_tmp.SP_TerritoryID = row4.TerritoryID;
							out_DataExploration_tmp.SalesQuota = row4.SalesQuota;
							out_DataExploration_tmp.Bonus = row4.Bonus;
							out_DataExploration_tmp.CommissionPct = row4.CommissionPct;
							out_DataExploration_tmp.SalesYTD = row4.SalesYTD;
							out_DataExploration_tmp.SalesLastYear = row4.SalesLastYear;
							out_DataExploration_tmp.SP_PersonType = row4.PersonType;
							out_DataExploration_tmp.SP_FirstName = row4.FirstName;
							out_DataExploration_tmp.SP_MiddleName = row4.MiddleName;
							out_DataExploration_tmp.SP_LastName = row4.LastName;
							out_DataExploration_tmp.SP_Suffix = row4.Suffix;
							out_DataExploration_tmp.SP_EmailPromotion = row4.EmailPromotion;
							out_DataExploration_tmp.SP_AdditionalContactInfo = row4.AdditionalContactInfo;
							out_DataExploration_tmp.SP_Demographics = row4.Demographics;
							out_DataExploration_tmp.IN_TerritoryID = row2.TerritoryID;
							out_DataExploration_tmp.IN_PersonType = row2.PersonType;
							out_DataExploration_tmp.IN_FirstName = row2.FirstName;
							out_DataExploration_tmp.IN_MiddleName = row2.MiddleName;
							out_DataExploration_tmp.IN_LastName = row2.LastName;
							out_DataExploration_tmp.IN_Suffix = row2.Suffix;
							out_DataExploration_tmp.IN_EmailPromotion = row2.EmailPromotion;
							out_DataExploration_tmp.IN_AdditionalContactInfo = row2.AdditionalContactInfo;
							out_DataExploration_tmp.IN_Demographics = row2.Demographics;
							out_DataExploration_tmp.Product_Name = row3.Name;
							out_DataExploration_tmp.Product_Number = row3.ProductNumber;
							out_DataExploration_tmp.Product_MakeFlag = row3.MakeFlag;
							out_DataExploration_tmp.Product_FinishedGoodsFlag = row3.FinishedGoodsFlag;
							out_DataExploration_tmp.Product_Color = row3.Color;
							out_DataExploration_tmp.Product_SafetyStockLevel = row3.SafetyStockLevel;
							out_DataExploration_tmp.Product_ReorderPoint = row3.ReorderPoint;
							out_DataExploration_tmp.Product_StandardCost = row3.StandardCost;
							out_DataExploration_tmp.Product_ListPrice = row3.ListPrice;
							out_DataExploration_tmp.Product_Size = row3.Size;
							out_DataExploration_tmp.Product_SizeUnitMeasureName = row3.SizeUnitMeasureName;
							out_DataExploration_tmp.Product_Weight = row3.Weight;
							out_DataExploration_tmp.Product_WeightUnitMeasureName = row3.WeightUnitMeasureName;
							out_DataExploration_tmp.Product_DaysToManufacture = row3.DaysToManufacture;
							out_DataExploration_tmp.Product_Line = row3.ProductLine;
							out_DataExploration_tmp.Product_Class = row3._Class;
							out_DataExploration_tmp.Product_Style = row3.Style;
							out_DataExploration_tmp.Product_SellStartDate = row3.SellStartDate;
							out_DataExploration_tmp.Product_SellEndDate = row3.SellEndDate;
							out_DataExploration_tmp.Product_DiscontinuedDate = row3.DiscontinuedDate;
							out_DataExploration_tmp.Product_SubCategory = row3.ProductSubCategory;
							out_DataExploration_tmp.Product_Category = row3.ProductCategory;
							out_DataExploration_tmp.Product_Model = row3.ProductModel;
							out_DataExploration = out_DataExploration_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "out_DataExploration"
						if (out_DataExploration != null) {

							/**
							 * [tSampleRow_1 main ] start
							 */

							currentComponent = "tSampleRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out_DataExploration");
							}

							nb_line_tSampleRow_1++;

							if (!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)) {
								row5 = null;
							} else {
								row5 = new row5Struct();

								row5.SalesOrderID = out_DataExploration.SalesOrderID;

								row5.Sales_RevisionNumber = out_DataExploration.Sales_RevisionNumber;

								row5.Sales_OrderDate = out_DataExploration.Sales_OrderDate;

								row5.Sales_DueDate = out_DataExploration.Sales_DueDate;

								row5.Sales_ShipDate = out_DataExploration.Sales_ShipDate;

								row5.Sales_Status = out_DataExploration.Sales_Status;

								row5.Sales_OnlineOrderFlag = out_DataExploration.Sales_OnlineOrderFlag;

								row5.Sales_SalesOrderNumber = out_DataExploration.Sales_SalesOrderNumber;

								row5.Sales_PurchaseOrderNumber = out_DataExploration.Sales_PurchaseOrderNumber;

								row5.Sales_AccountNumber = out_DataExploration.Sales_AccountNumber;

								row5.Sales_CustomerID = out_DataExploration.Sales_CustomerID;

								row5.SalesPersonID = out_DataExploration.SalesPersonID;

								row5.Sales_TerritoryID = out_DataExploration.Sales_TerritoryID;

								row5.Sales_BillToAddressID = out_DataExploration.Sales_BillToAddressID;

								row5.Sales_ShipToAddressID = out_DataExploration.Sales_ShipToAddressID;

								row5.Sales_ShipMethodID = out_DataExploration.Sales_ShipMethodID;

								row5.Sales_CreditCardID = out_DataExploration.Sales_CreditCardID;

								row5.Sales_CreditCardApprovalCode = out_DataExploration.Sales_CreditCardApprovalCode;

								row5.Sales_CurrencyRateID = out_DataExploration.Sales_CurrencyRateID;

								row5.Sales_SubTotal = out_DataExploration.Sales_SubTotal;

								row5.Sales_TaxAmt = out_DataExploration.Sales_TaxAmt;

								row5.Sales_Freight = out_DataExploration.Sales_Freight;

								row5.Sales_TotalDue = out_DataExploration.Sales_TotalDue;

								row5.Sales_Comment = out_DataExploration.Sales_Comment;

								row5.SalesOrderDetailID = out_DataExploration.SalesOrderDetailID;

								row5.Sales_CarrierTrackingNumber = out_DataExploration.Sales_CarrierTrackingNumber;

								row5.Sales_OrderQty = out_DataExploration.Sales_OrderQty;

								row5.Sales_ProductID = out_DataExploration.Sales_ProductID;

								row5.Sales_SpecialOfferID = out_DataExploration.Sales_SpecialOfferID;

								row5.Sales_UnitPrice = out_DataExploration.Sales_UnitPrice;

								row5.Sales_UnitPriceDiscount = out_DataExploration.Sales_UnitPriceDiscount;

								row5.Sales_LineTotal = out_DataExploration.Sales_LineTotal;

								row5.SP_TerritoryID = out_DataExploration.SP_TerritoryID;

								row5.SalesQuota = out_DataExploration.SalesQuota;

								row5.Bonus = out_DataExploration.Bonus;

								row5.CommissionPct = out_DataExploration.CommissionPct;

								row5.SalesYTD = out_DataExploration.SalesYTD;

								row5.SalesLastYear = out_DataExploration.SalesLastYear;

								row5.SP_PersonType = out_DataExploration.SP_PersonType;

								row5.SP_FirstName = out_DataExploration.SP_FirstName;

								row5.SP_MiddleName = out_DataExploration.SP_MiddleName;

								row5.SP_LastName = out_DataExploration.SP_LastName;

								row5.SP_Suffix = out_DataExploration.SP_Suffix;

								row5.SP_EmailPromotion = out_DataExploration.SP_EmailPromotion;

								row5.SP_AdditionalContactInfo = out_DataExploration.SP_AdditionalContactInfo;

								row5.SP_Demographics = out_DataExploration.SP_Demographics;

								row5.IN_TerritoryID = out_DataExploration.IN_TerritoryID;

								row5.IN_PersonType = out_DataExploration.IN_PersonType;

								row5.IN_FirstName = out_DataExploration.IN_FirstName;

								row5.IN_MiddleName = out_DataExploration.IN_MiddleName;

								row5.IN_LastName = out_DataExploration.IN_LastName;

								row5.IN_Suffix = out_DataExploration.IN_Suffix;

								row5.IN_EmailPromotion = out_DataExploration.IN_EmailPromotion;

								row5.IN_AdditionalContactInfo = out_DataExploration.IN_AdditionalContactInfo;

								row5.IN_Demographics = out_DataExploration.IN_Demographics;

								row5.Product_Name = out_DataExploration.Product_Name;

								row5.Product_Number = out_DataExploration.Product_Number;

								row5.Product_MakeFlag = out_DataExploration.Product_MakeFlag;

								row5.Product_FinishedGoodsFlag = out_DataExploration.Product_FinishedGoodsFlag;

								row5.Product_Color = out_DataExploration.Product_Color;

								row5.Product_SafetyStockLevel = out_DataExploration.Product_SafetyStockLevel;

								row5.Product_ReorderPoint = out_DataExploration.Product_ReorderPoint;

								row5.Product_StandardCost = out_DataExploration.Product_StandardCost;

								row5.Product_ListPrice = out_DataExploration.Product_ListPrice;

								row5.Product_Size = out_DataExploration.Product_Size;

								row5.Product_SizeUnitMeasureName = out_DataExploration.Product_SizeUnitMeasureName;

								row5.Product_Weight = out_DataExploration.Product_Weight;

								row5.Product_WeightUnitMeasureName = out_DataExploration.Product_WeightUnitMeasureName;

								row5.Product_DaysToManufacture = out_DataExploration.Product_DaysToManufacture;

								row5.Product_Line = out_DataExploration.Product_Line;

								row5.Product_Class = out_DataExploration.Product_Class;

								row5.Product_Style = out_DataExploration.Product_Style;

								row5.Product_SellStartDate = out_DataExploration.Product_SellStartDate;

								row5.Product_SellEndDate = out_DataExploration.Product_SellEndDate;

								row5.Product_DiscontinuedDate = out_DataExploration.Product_DiscontinuedDate;

								row5.Product_SubCategory = out_DataExploration.Product_SubCategory;

								row5.Product_Category = out_DataExploration.Product_Category;

								row5.Product_Model = out_DataExploration.Product_Model;

							}

							tos_count_tSampleRow_1++;

							/**
							 * [tSampleRow_1 main ] stop
							 */

							/**
							 * [tSampleRow_1 process_data_begin ] start
							 */

							currentComponent = "tSampleRow_1";

							/**
							 * [tSampleRow_1 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								sb_tFileOutputDelimited_1.append(row5.SalesOrderID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_RevisionNumber);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_OrderDate != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_OrderDate);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_DueDate != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_DueDate);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_ShipDate != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_ShipDate);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_Status);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_OnlineOrderFlag);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_SalesOrderNumber != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_SalesOrderNumber);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_PurchaseOrderNumber != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_PurchaseOrderNumber);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_AccountNumber != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_AccountNumber);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_CustomerID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SalesPersonID != null) {
									sb_tFileOutputDelimited_1.append(row5.SalesPersonID);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_TerritoryID != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_TerritoryID);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_BillToAddressID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_ShipToAddressID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_ShipMethodID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_CreditCardID != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_CreditCardID);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_CreditCardApprovalCode != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_CreditCardApprovalCode);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_CurrencyRateID != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_CurrencyRateID);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_SubTotal != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_SubTotal
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_TaxAmt != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_TaxAmt
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_Freight != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_Freight
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_TotalDue != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_TotalDue
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_Comment != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_Comment);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.SalesOrderDetailID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_CarrierTrackingNumber != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_CarrierTrackingNumber);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_OrderQty);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_ProductID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Sales_SpecialOfferID);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_UnitPrice != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_UnitPrice
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_UnitPriceDiscount != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_UnitPriceDiscount
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Sales_LineTotal != null) {
									sb_tFileOutputDelimited_1.append(row5.Sales_LineTotal
											.setScale(6, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_TerritoryID != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_TerritoryID);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SalesQuota != null) {
									sb_tFileOutputDelimited_1.append(row5.SalesQuota
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Bonus != null) {
									sb_tFileOutputDelimited_1.append(
											row5.Bonus.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.CommissionPct != null) {
									sb_tFileOutputDelimited_1.append(row5.CommissionPct
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SalesYTD != null) {
									sb_tFileOutputDelimited_1.append(
											row5.SalesYTD.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SalesLastYear != null) {
									sb_tFileOutputDelimited_1.append(row5.SalesLastYear
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_PersonType != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_PersonType);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_FirstName != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_FirstName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_MiddleName != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_MiddleName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_LastName != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_LastName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_Suffix != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_Suffix);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.SP_EmailPromotion);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_AdditionalContactInfo != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_AdditionalContactInfo);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.SP_Demographics != null) {
									sb_tFileOutputDelimited_1.append(row5.SP_Demographics);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_TerritoryID != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_TerritoryID);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_PersonType != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_PersonType);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_FirstName != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_FirstName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_MiddleName != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_MiddleName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_LastName != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_LastName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_Suffix != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_Suffix);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.IN_EmailPromotion);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_AdditionalContactInfo != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_AdditionalContactInfo);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.IN_Demographics != null) {
									sb_tFileOutputDelimited_1.append(row5.IN_Demographics);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Name != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Name);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Number != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Number);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Product_MakeFlag);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Product_FinishedGoodsFlag);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Color != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Color);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Product_SafetyStockLevel);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Product_ReorderPoint);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_StandardCost != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_StandardCost
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_ListPrice != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_ListPrice
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Size != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Size);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_SizeUnitMeasureName != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_SizeUnitMeasureName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Weight != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Weight
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_WeightUnitMeasureName != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_WeightUnitMeasureName);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(row5.Product_DaysToManufacture);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Line != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Line);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Class != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Class);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Style != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Style);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_SellStartDate != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_SellStartDate);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_SellEndDate != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_SellEndDate);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_DiscontinuedDate != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_DiscontinuedDate);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_SubCategory != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_SubCategory);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Category != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Category);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row5.Product_Model != null) {
									sb_tFileOutputDelimited_1.append(row5.Product_Model);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tSampleRow_1 process_data_end ] start
							 */

							currentComponent = "tSampleRow_1";

							/**
							 * [tSampleRow_1 process_data_end ] stop
							 */

						} // End of branch "out_DataExploration"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out_DataExploration");
				}

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int BusinessEntityID;

		public int getBusinessEntityID() {
			return this.BusinessEntityID;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public BigDecimal SalesQuota;

		public BigDecimal getSalesQuota() {
			return this.SalesQuota;
		}

		public BigDecimal Bonus;

		public BigDecimal getBonus() {
			return this.Bonus;
		}

		public BigDecimal CommissionPct;

		public BigDecimal getCommissionPct() {
			return this.CommissionPct;
		}

		public BigDecimal SalesYTD;

		public BigDecimal getSalesYTD() {
			return this.SalesYTD;
		}

		public BigDecimal SalesLastYear;

		public BigDecimal getSalesLastYear() {
			return this.SalesLastYear;
		}

		public String PersonType;

		public String getPersonType() {
			return this.PersonType;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public int EmailPromotion;

		public int getEmailPromotion() {
			return this.EmailPromotion;
		}

		public String AdditionalContactInfo;

		public String getAdditionalContactInfo() {
			return this.AdditionalContactInfo;
		}

		public String Demographics;

		public String getDemographics() {
			return this.Demographics;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.BusinessEntityID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.BusinessEntityID != other.BusinessEntityID)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.BusinessEntityID = this.BusinessEntityID;
			other.TerritoryID = this.TerritoryID;
			other.SalesQuota = this.SalesQuota;
			other.Bonus = this.Bonus;
			other.CommissionPct = this.CommissionPct;
			other.SalesYTD = this.SalesYTD;
			other.SalesLastYear = this.SalesLastYear;
			other.PersonType = this.PersonType;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.EmailPromotion = this.EmailPromotion;
			other.AdditionalContactInfo = this.AdditionalContactInfo;
			other.Demographics = this.Demographics;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.BusinessEntityID = this.BusinessEntityID;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.BusinessEntityID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.BusinessEntityID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.TerritoryID = readInteger(dis, ois);

				this.SalesQuota = (BigDecimal) ois.readObject();

				this.Bonus = (BigDecimal) ois.readObject();

				this.CommissionPct = (BigDecimal) ois.readObject();

				this.SalesYTD = (BigDecimal) ois.readObject();

				this.SalesLastYear = (BigDecimal) ois.readObject();

				this.PersonType = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.MiddleName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Suffix = readString(dis, ois);

				this.EmailPromotion = dis.readInt();

				this.AdditionalContactInfo = readString(dis, ois);

				this.Demographics = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.TerritoryID, dos, oos);

				oos.writeObject(this.SalesQuota);

				oos.writeObject(this.Bonus);

				oos.writeObject(this.CommissionPct);

				oos.writeObject(this.SalesYTD);

				oos.writeObject(this.SalesLastYear);

				writeString(this.PersonType, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.MiddleName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Suffix, dos, oos);

				dos.writeInt(this.EmailPromotion);

				writeString(this.AdditionalContactInfo, dos, oos);

				writeString(this.Demographics, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BusinessEntityID=" + String.valueOf(BusinessEntityID));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",SalesQuota=" + String.valueOf(SalesQuota));
			sb.append(",Bonus=" + String.valueOf(Bonus));
			sb.append(",CommissionPct=" + String.valueOf(CommissionPct));
			sb.append(",SalesYTD=" + String.valueOf(SalesYTD));
			sb.append(",SalesLastYear=" + String.valueOf(SalesLastYear));
			sb.append(",PersonType=" + PersonType);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",EmailPromotion=" + String.valueOf(EmailPromotion));
			sb.append(",AdditionalContactInfo=" + AdditionalContactInfo);
			sb.append(",Demographics=" + Demographics);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.BusinessEntityID, other.BusinessEntityID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_1 - inputs:(after_tDBInput_4) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4,row3,row2)
				// outputs:(out_DataExploration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT\n	a.BusinessEntityID SalesPersonID,\n	a.TerritoryID,\n	a.SalesQuota,\n	a.Bonus,\n	a.CommissionPct,\n	a.SalesYTD,"
						+ "\n	a.SalesLastYear,\n	b.PersonType,\n	b.FirstName,\n	b.MiddleName,\n	b.LastName,\n	b.Suffix,\n	b.EmailPromotion,\n	b.Add"
						+ "itionalContactInfo,\n	b.Demographics\nFROM\n	SalesPerson a \nINNER JOIN\n	Person b\n	ON a.BusinessEntityID = b.BusinessE"
						+ "ntityID";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row4.BusinessEntityID = 0;
						} else {

							row4.BusinessEntityID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row4.TerritoryID = null;
						} else {

							row4.TerritoryID = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								row4.TerritoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row4.SalesQuota = null;
						} else {

							row4.SalesQuota = rs_tDBInput_1.getBigDecimal(3);
							if (rs_tDBInput_1.wasNull()) {
								row4.SalesQuota = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row4.Bonus = null;
						} else {

							row4.Bonus = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row4.CommissionPct = null;
						} else {

							row4.CommissionPct = rs_tDBInput_1.getBigDecimal(5);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row4.SalesYTD = null;
						} else {

							row4.SalesYTD = rs_tDBInput_1.getBigDecimal(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row4.SalesLastYear = null;
						} else {

							row4.SalesLastYear = rs_tDBInput_1.getBigDecimal(7);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row4.PersonType = null;
						} else {

							row4.PersonType = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row4.FirstName = null;
						} else {

							row4.FirstName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row4.MiddleName = null;
						} else {

							row4.MiddleName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row4.LastName = null;
						} else {

							row4.LastName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row4.Suffix = null;
						} else {

							row4.Suffix = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row4.EmailPromotion = 0;
						} else {

							row4.EmailPromotion = rs_tDBInput_1.getInt(13);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row4.AdditionalContactInfo = null;
						} else {

							row4.AdditionalContactInfo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row4.Demographics = null;
						} else {

							row4.Demographics = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.BusinessEntityID = row4.BusinessEntityID;

						row4_HashRow.TerritoryID = row4.TerritoryID;

						row4_HashRow.SalesQuota = row4.SalesQuota;

						row4_HashRow.Bonus = row4.Bonus;

						row4_HashRow.CommissionPct = row4.CommissionPct;

						row4_HashRow.SalesYTD = row4.SalesYTD;

						row4_HashRow.SalesLastYear = row4.SalesLastYear;

						row4_HashRow.PersonType = row4.PersonType;

						row4_HashRow.FirstName = row4.FirstName;

						row4_HashRow.MiddleName = row4.MiddleName;

						row4_HashRow.LastName = row4.LastName;

						row4_HashRow.Suffix = row4.Suffix;

						row4_HashRow.EmailPromotion = row4.EmailPromotion;

						row4_HashRow.AdditionalContactInfo = row4.AdditionalContactInfo;

						row4_HashRow.Demographics = row4.Demographics;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public byte MakeFlag;

		public byte getMakeFlag() {
			return this.MakeFlag;
		}

		public byte FinishedGoodsFlag;

		public byte getFinishedGoodsFlag() {
			return this.FinishedGoodsFlag;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public short SafetyStockLevel;

		public short getSafetyStockLevel() {
			return this.SafetyStockLevel;
		}

		public short ReorderPoint;

		public short getReorderPoint() {
			return this.ReorderPoint;
		}

		public BigDecimal StandardCost;

		public BigDecimal getStandardCost() {
			return this.StandardCost;
		}

		public BigDecimal ListPrice;

		public BigDecimal getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public String SizeUnitMeasureCode;

		public String getSizeUnitMeasureCode() {
			return this.SizeUnitMeasureCode;
		}

		public String WeightUnitMeasureCode;

		public String getWeightUnitMeasureCode() {
			return this.WeightUnitMeasureCode;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public int DaysToManufacture;

		public int getDaysToManufacture() {
			return this.DaysToManufacture;
		}

		public String ProductLine;

		public String getProductLine() {
			return this.ProductLine;
		}

		public String _Class;

		public String get_Class() {
			return this._Class;
		}

		public String Style;

		public String getStyle() {
			return this.Style;
		}

		public Integer ProductSubcategoryID;

		public Integer getProductSubcategoryID() {
			return this.ProductSubcategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public String rowguid;

		public String getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductModel;

		public String getProductModel() {
			return this.ProductModel;
		}

		public String WeightUnitMeasureName;

		public String getWeightUnitMeasureName() {
			return this.WeightUnitMeasureName;
		}

		public String SizeUnitMeasureName;

		public String getSizeUnitMeasureName() {
			return this.SizeUnitMeasureName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.MakeFlag = this.MakeFlag;
			other.FinishedGoodsFlag = this.FinishedGoodsFlag;
			other.Color = this.Color;
			other.SafetyStockLevel = this.SafetyStockLevel;
			other.ReorderPoint = this.ReorderPoint;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.Size = this.Size;
			other.SizeUnitMeasureCode = this.SizeUnitMeasureCode;
			other.WeightUnitMeasureCode = this.WeightUnitMeasureCode;
			other.Weight = this.Weight;
			other.DaysToManufacture = this.DaysToManufacture;
			other.ProductLine = this.ProductLine;
			other._Class = this._Class;
			other.Style = this.Style;
			other.ProductSubcategoryID = this.ProductSubcategoryID;
			other.ProductModelID = this.ProductModelID;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;
			other.ProductSubCategory = this.ProductSubCategory;
			other.ProductCategory = this.ProductCategory;
			other.ProductModel = this.ProductModel;
			other.WeightUnitMeasureName = this.WeightUnitMeasureName;
			other.SizeUnitMeasureName = this.SizeUnitMeasureName;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.ProductNumber = readString(dis, ois);

				this.MakeFlag = dis.readByte();

				this.FinishedGoodsFlag = dis.readByte();

				this.Color = readString(dis, ois);

				this.SafetyStockLevel = dis.readShort();

				this.ReorderPoint = dis.readShort();

				this.StandardCost = (BigDecimal) ois.readObject();

				this.ListPrice = (BigDecimal) ois.readObject();

				this.Size = readString(dis, ois);

				this.SizeUnitMeasureCode = readString(dis, ois);

				this.WeightUnitMeasureCode = readString(dis, ois);

				this.Weight = (BigDecimal) ois.readObject();

				this.DaysToManufacture = dis.readInt();

				this.ProductLine = readString(dis, ois);

				this._Class = readString(dis, ois);

				this.Style = readString(dis, ois);

				this.ProductSubcategoryID = readInteger(dis, ois);

				this.ProductModelID = readInteger(dis, ois);

				this.SellStartDate = readDate(dis, ois);

				this.SellEndDate = readDate(dis, ois);

				this.DiscontinuedDate = readDate(dis, ois);

				this.rowguid = readString(dis, ois);

				this.ModifiedDate = readDate(dis, ois);

				this.ProductSubCategory = readString(dis, ois);

				this.ProductCategory = readString(dis, ois);

				this.ProductModel = readString(dis, ois);

				this.WeightUnitMeasureName = readString(dis, ois);

				this.SizeUnitMeasureName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.ProductNumber, dos, oos);

				dos.writeByte(this.MakeFlag);

				dos.writeByte(this.FinishedGoodsFlag);

				writeString(this.Color, dos, oos);

				dos.writeShort(this.SafetyStockLevel);

				dos.writeShort(this.ReorderPoint);

				oos.writeObject(this.StandardCost);

				oos.writeObject(this.ListPrice);

				writeString(this.Size, dos, oos);

				writeString(this.SizeUnitMeasureCode, dos, oos);

				writeString(this.WeightUnitMeasureCode, dos, oos);

				oos.writeObject(this.Weight);

				dos.writeInt(this.DaysToManufacture);

				writeString(this.ProductLine, dos, oos);

				writeString(this._Class, dos, oos);

				writeString(this.Style, dos, oos);

				writeInteger(this.ProductSubcategoryID, dos, oos);

				writeInteger(this.ProductModelID, dos, oos);

				writeDate(this.SellStartDate, dos, oos);

				writeDate(this.SellEndDate, dos, oos);

				writeDate(this.DiscontinuedDate, dos, oos);

				writeString(this.rowguid, dos, oos);

				writeDate(this.ModifiedDate, dos, oos);

				writeString(this.ProductSubCategory, dos, oos);

				writeString(this.ProductCategory, dos, oos);

				writeString(this.ProductModel, dos, oos);

				writeString(this.WeightUnitMeasureName, dos, oos);

				writeString(this.SizeUnitMeasureName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",MakeFlag=" + String.valueOf(MakeFlag));
			sb.append(",FinishedGoodsFlag=" + String.valueOf(FinishedGoodsFlag));
			sb.append(",Color=" + Color);
			sb.append(",SafetyStockLevel=" + String.valueOf(SafetyStockLevel));
			sb.append(",ReorderPoint=" + String.valueOf(ReorderPoint));
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",SizeUnitMeasureCode=" + SizeUnitMeasureCode);
			sb.append(",WeightUnitMeasureCode=" + WeightUnitMeasureCode);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",DaysToManufacture=" + String.valueOf(DaysToManufacture));
			sb.append(",ProductLine=" + ProductLine);
			sb.append(",_Class=" + _Class);
			sb.append(",Style=" + Style);
			sb.append(",ProductSubcategoryID=" + String.valueOf(ProductSubcategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",rowguid=" + rowguid);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductModel=" + ProductModel);
			sb.append(",WeightUnitMeasureName=" + WeightUnitMeasureName);
			sb.append(",SizeUnitMeasureName=" + SizeUnitMeasureName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_2 - inputs:(after_tDBInput_4) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4,row3,row2)
				// outputs:(out_DataExploration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n	a.*,\n	b.Name AS ProductSubCategory,\n	c.Name AS ProductCategory,\n	d.Name AS ProductModel,\n	e.Name AS Weigh"
						+ "tUnitMeasureName,\n	f.Name AS SizeUnitMeasureName\nFROM\n	Product a\nLEFT JOIN\n	ProductSubcategory b\n	ON a.ProductSubc"
						+ "ategoryID = b.ProductSubcategoryID \nLEFT JOIN \n	ProductCategory c\n	ON b.ProductCategoryID = c.ProductCategoryID \nLEF"
						+ "T JOIN \n	ProductModel d\n	ON a.ProductModelID = d.ProductModelID \nLEFT JOIN \n	UnitMeasure e\n	ON a.WeightUnitMeasureC"
						+ "ode = e.UnitMeasureCode \nLEFT JOIN \n	UnitMeasure f \n	ON a.SizeUnitMeasureCode = f.UnitMeasureCode ";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.ProductID = 0;
						} else {

							row3.ProductID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.Name = null;
						} else {

							row3.Name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.ProductNumber = null;
						} else {

							row3.ProductNumber = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.MakeFlag = 0;
						} else {

							row3.MakeFlag = rs_tDBInput_2.getByte(4);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.FinishedGoodsFlag = 0;
						} else {

							row3.FinishedGoodsFlag = rs_tDBInput_2.getByte(5);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.Color = null;
						} else {

							row3.Color = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row3.SafetyStockLevel = 0;
						} else {

							row3.SafetyStockLevel = rs_tDBInput_2.getShort(7);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row3.ReorderPoint = 0;
						} else {

							row3.ReorderPoint = rs_tDBInput_2.getShort(8);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row3.StandardCost = null;
						} else {

							row3.StandardCost = rs_tDBInput_2.getBigDecimal(9);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row3.ListPrice = null;
						} else {

							row3.ListPrice = rs_tDBInput_2.getBigDecimal(10);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row3.Size = null;
						} else {

							row3.Size = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row3.SizeUnitMeasureCode = null;
						} else {

							row3.SizeUnitMeasureCode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row3.WeightUnitMeasureCode = null;
						} else {

							row3.WeightUnitMeasureCode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row3.Weight = null;
						} else {

							row3.Weight = rs_tDBInput_2.getBigDecimal(14);
							if (rs_tDBInput_2.wasNull()) {
								row3.Weight = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row3.DaysToManufacture = 0;
						} else {

							row3.DaysToManufacture = rs_tDBInput_2.getInt(15);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row3.ProductLine = null;
						} else {

							row3.ProductLine = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row3._Class = null;
						} else {

							row3._Class = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row3.Style = null;
						} else {

							row3.Style = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row3.ProductSubcategoryID = null;
						} else {

							row3.ProductSubcategoryID = rs_tDBInput_2.getInt(19);
							if (rs_tDBInput_2.wasNull()) {
								row3.ProductSubcategoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row3.ProductModelID = null;
						} else {

							row3.ProductModelID = rs_tDBInput_2.getInt(20);
							if (rs_tDBInput_2.wasNull()) {
								row3.ProductModelID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row3.SellStartDate = null;
						} else {

							if (rs_tDBInput_2.getString(21) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(21);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row3.SellStartDate = rs_tDBInput_2.getTimestamp(21);
								} else {
									row3.SellStartDate = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row3.SellStartDate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row3.SellEndDate = null;
						} else {

							if (rs_tDBInput_2.getString(22) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(22);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row3.SellEndDate = rs_tDBInput_2.getTimestamp(22);
								} else {
									row3.SellEndDate = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row3.SellEndDate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row3.DiscontinuedDate = null;
						} else {

							if (rs_tDBInput_2.getString(23) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(23);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row3.DiscontinuedDate = rs_tDBInput_2.getTimestamp(23);
								} else {
									row3.DiscontinuedDate = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row3.DiscontinuedDate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row3.rowguid = null;
						} else {

							row3.rowguid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row3.ModifiedDate = null;
						} else {

							if (rs_tDBInput_2.getString(25) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(25);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row3.ModifiedDate = rs_tDBInput_2.getTimestamp(25);
								} else {
									row3.ModifiedDate = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row3.ModifiedDate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row3.ProductSubCategory = null;
						} else {

							row3.ProductSubCategory = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row3.ProductCategory = null;
						} else {

							row3.ProductCategory = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row3.ProductModel = null;
						} else {

							row3.ProductModel = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, false);
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row3.WeightUnitMeasureName = null;
						} else {

							row3.WeightUnitMeasureName = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row3.SizeUnitMeasureName = null;
						} else {

							row3.SizeUnitMeasureName = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.ProductID = row3.ProductID;

						row3_HashRow.Name = row3.Name;

						row3_HashRow.ProductNumber = row3.ProductNumber;

						row3_HashRow.MakeFlag = row3.MakeFlag;

						row3_HashRow.FinishedGoodsFlag = row3.FinishedGoodsFlag;

						row3_HashRow.Color = row3.Color;

						row3_HashRow.SafetyStockLevel = row3.SafetyStockLevel;

						row3_HashRow.ReorderPoint = row3.ReorderPoint;

						row3_HashRow.StandardCost = row3.StandardCost;

						row3_HashRow.ListPrice = row3.ListPrice;

						row3_HashRow.Size = row3.Size;

						row3_HashRow.SizeUnitMeasureCode = row3.SizeUnitMeasureCode;

						row3_HashRow.WeightUnitMeasureCode = row3.WeightUnitMeasureCode;

						row3_HashRow.Weight = row3.Weight;

						row3_HashRow.DaysToManufacture = row3.DaysToManufacture;

						row3_HashRow.ProductLine = row3.ProductLine;

						row3_HashRow._Class = row3._Class;

						row3_HashRow.Style = row3.Style;

						row3_HashRow.ProductSubcategoryID = row3.ProductSubcategoryID;

						row3_HashRow.ProductModelID = row3.ProductModelID;

						row3_HashRow.SellStartDate = row3.SellStartDate;

						row3_HashRow.SellEndDate = row3.SellEndDate;

						row3_HashRow.DiscontinuedDate = row3.DiscontinuedDate;

						row3_HashRow.rowguid = row3.rowguid;

						row3_HashRow.ModifiedDate = row3.ModifiedDate;

						row3_HashRow.ProductSubCategory = row3.ProductSubCategory;

						row3_HashRow.ProductCategory = row3.ProductCategory;

						row3_HashRow.ProductModel = row3.ProductModel;

						row3_HashRow.WeightUnitMeasureName = row3.WeightUnitMeasureName;

						row3_HashRow.SizeUnitMeasureName = row3.SizeUnitMeasureName;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Exploracao = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public String PersonType;

		public String getPersonType() {
			return this.PersonType;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public int EmailPromotion;

		public int getEmailPromotion() {
			return this.EmailPromotion;
		}

		public String AdditionalContactInfo;

		public String getAdditionalContactInfo() {
			return this.AdditionalContactInfo;
		}

		public String Demographics;

		public String getDemographics() {
			return this.Demographics;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.CustomerID = this.CustomerID;
			other.TerritoryID = this.TerritoryID;
			other.PersonType = this.PersonType;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.EmailPromotion = this.EmailPromotion;
			other.AdditionalContactInfo = this.AdditionalContactInfo;
			other.Demographics = this.Demographics;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Exploracao) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.TerritoryID = readInteger(dis, ois);

				this.PersonType = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.MiddleName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Suffix = readString(dis, ois);

				this.EmailPromotion = dis.readInt();

				this.AdditionalContactInfo = readString(dis, ois);

				this.Demographics = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.TerritoryID, dos, oos);

				writeString(this.PersonType, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.MiddleName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Suffix, dos, oos);

				dos.writeInt(this.EmailPromotion);

				writeString(this.AdditionalContactInfo, dos, oos);

				writeString(this.Demographics, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",PersonType=" + PersonType);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",EmailPromotion=" + String.valueOf(EmailPromotion));
			sb.append(",AdditionalContactInfo=" + AdditionalContactInfo);
			sb.append(",Demographics=" + Demographics);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4,row3,row2)
				// outputs:(out_DataExploration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n	a.CustomerID,\n	a.TerritoryID,\n	b.PersonType,\n	b.FirstName,\n	b.MiddleName,\n	b.LastName,\n	b.Suffix,\n	b.E"
						+ "mailPromotion,\n	b.AdditionalContactInfo,\n	b.Demographics\nFROM \n	Customer a\nINNER JOIN\n	Person b \n	ON a.PersonID ="
						+ " b.BusinessEntityID";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row2.CustomerID = 0;
						} else {

							row2.CustomerID = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row2.TerritoryID = null;
						} else {

							row2.TerritoryID = rs_tDBInput_3.getInt(2);
							if (rs_tDBInput_3.wasNull()) {
								row2.TerritoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row2.PersonType = null;
						} else {

							row2.PersonType = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row2.FirstName = null;
						} else {

							row2.FirstName = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row2.MiddleName = null;
						} else {

							row2.MiddleName = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row2.LastName = null;
						} else {

							row2.LastName = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row2.Suffix = null;
						} else {

							row2.Suffix = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row2.EmailPromotion = 0;
						} else {

							row2.EmailPromotion = rs_tDBInput_3.getInt(8);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row2.AdditionalContactInfo = null;
						} else {

							row2.AdditionalContactInfo = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row2.Demographics = null;
						} else {

							row2.Demographics = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.CustomerID = row2.CustomerID;

						row2_HashRow.TerritoryID = row2.TerritoryID;

						row2_HashRow.PersonType = row2.PersonType;

						row2_HashRow.FirstName = row2.FirstName;

						row2_HashRow.MiddleName = row2.MiddleName;

						row2_HashRow.LastName = row2.LastName;

						row2_HashRow.Suffix = row2.Suffix;

						row2_HashRow.EmailPromotion = row2.EmailPromotion;

						row2_HashRow.AdditionalContactInfo = row2.AdditionalContactInfo;

						row2_HashRow.Demographics = row2.Demographics;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

					if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
							&& routines.system.BundleUtils.inOSGi()) {
						Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
								.invoke(null, (Object[]) null);
					}

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}
				if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("allowLoadLocalInfile")) {
					properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "relational.fit.cvut.cz" + ":" + "3306" + "/"
						+ "AdventureWorks2014" + "?" + properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "guest";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:0U1BA3e7uNnAcIQHUZsRUzFsC9wSLn/a1kDdo+Txx9x1k13jlko=");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "AdventureWorks2014");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final AdventureWorks2014_Exploracao AdventureWorks2014_ExploracaoClass = new AdventureWorks2014_Exploracao();

		int exitCode = AdventureWorks2014_ExploracaoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = AdventureWorks2014_Exploracao.class.getClassLoader().getResourceAsStream(
					"local_project/adventureworks2014_exploracao_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = AdventureWorks2014_Exploracao.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_4) {
			globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

			e_tDBInput_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : AdventureWorks2014_Exploracao");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 299466 characters generated by Talend Open Studio for Big Data on the 24 de
 * Junho de 2020 19h24min42s BRT
 ************************************************************************************************/