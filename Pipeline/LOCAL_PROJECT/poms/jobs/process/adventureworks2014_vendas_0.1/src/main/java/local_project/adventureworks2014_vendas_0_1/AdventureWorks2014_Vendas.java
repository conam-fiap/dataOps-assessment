// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.adventureworks2014_vendas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: AdventureWorks2014_Vendas Purpose: Exportar relatório para a área de
 * vendas<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class AdventureWorks2014_Vendas implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "AdventureWorks2014_Vendas";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					AdventureWorks2014_Vendas.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(AdventureWorks2014_Vendas.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

					if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
							&& routines.system.BundleUtils.inOSGi()) {
						Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
								.invoke(null, (Object[]) null);
					}

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}
				if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("allowLoadLocalInfile")) {
					properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "relational.fit.cvut.cz" + ":" + "3306" + "/"
						+ "AdventureWorks2014" + "?" + properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "guest";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:wjcGevMIb/cQ1Tqd16r83hgdM+8scotXQYZ8LMS+7rs2MRXOhIM=");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "AdventureWorks2014");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String TerritoryName;

		public String getTerritoryName() {
			return this.TerritoryName;
		}

		public String TerritoryGroup;

		public String getTerritoryGroup() {
			return this.TerritoryGroup;
		}

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String CountryName;

		public String getCountryName() {
			return this.CountryName;
		}

		public String OnlineOrderFlag;

		public String getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.OrderDate = readDate(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

					this.TerritoryName = readString(dis);

					this.TerritoryGroup = readString(dis);

					this.CountryRegionCode = readString(dis);

					this.CountryName = readString(dis);

					this.OnlineOrderFlag = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.TerritoryName, dos);

				// String

				writeString(this.TerritoryGroup, dos);

				// String

				writeString(this.CountryRegionCode, dos);

				// String

				writeString(this.CountryName, dos);

				// String

				writeString(this.OnlineOrderFlag, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderDate=" + String.valueOf(OrderDate));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",TerritoryName=" + TerritoryName);
			sb.append(",TerritoryGroup=" + TerritoryGroup);
			sb.append(",CountryRegionCode=" + CountryRegionCode);
			sb.append(",CountryName=" + CountryName);
			sb.append(",OnlineOrderFlag=" + OnlineOrderFlag);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String TerritoryName;

		public String getTerritoryName() {
			return this.TerritoryName;
		}

		public String TerritoryGroup;

		public String getTerritoryGroup() {
			return this.TerritoryGroup;
		}

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String CountryName;

		public String getCountryName() {
			return this.CountryName;
		}

		public String OnlineOrderFlag;

		public String getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.OrderDate = readDate(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

					this.TerritoryName = readString(dis);

					this.TerritoryGroup = readString(dis);

					this.CountryRegionCode = readString(dis);

					this.CountryName = readString(dis);

					this.OnlineOrderFlag = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.TerritoryName, dos);

				// String

				writeString(this.TerritoryGroup, dos);

				// String

				writeString(this.CountryRegionCode, dos);

				// String

				writeString(this.CountryName, dos);

				// String

				writeString(this.OnlineOrderFlag, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderDate=" + String.valueOf(OrderDate));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",TerritoryName=" + TerritoryName);
			sb.append(",TerritoryGroup=" + TerritoryGroup);
			sb.append(",CountryRegionCode=" + CountryRegionCode);
			sb.append(",CountryName=" + CountryName);
			sb.append(",OnlineOrderFlag=" + OnlineOrderFlag);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out_VendasStruct implements routines.system.IPersistableRow<out_VendasStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String TerritoryName;

		public String getTerritoryName() {
			return this.TerritoryName;
		}

		public String TerritoryGroup;

		public String getTerritoryGroup() {
			return this.TerritoryGroup;
		}

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String CountryName;

		public String getCountryName() {
			return this.CountryName;
		}

		public String OnlineOrderFlag;

		public String getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.OrderDate = readDate(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

					this.TerritoryName = readString(dis);

					this.TerritoryGroup = readString(dis);

					this.CountryRegionCode = readString(dis);

					this.CountryName = readString(dis);

					this.OnlineOrderFlag = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.TerritoryName, dos);

				// String

				writeString(this.TerritoryGroup, dos);

				// String

				writeString(this.CountryRegionCode, dos);

				// String

				writeString(this.CountryName, dos);

				// String

				writeString(this.OnlineOrderFlag, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderDate=" + String.valueOf(OrderDate));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",TerritoryName=" + TerritoryName);
			sb.append(",TerritoryGroup=" + TerritoryGroup);
			sb.append(",CountryRegionCode=" + CountryRegionCode);
			sb.append(",CountryName=" + CountryName);
			sb.append(",OnlineOrderFlag=" + OnlineOrderFlag);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out_VendasStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public boolean OnlineOrderFlag;

		public boolean getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.OrderDate = readDate(dis);

					this.OnlineOrderFlag = dis.readBoolean();

					this.TerritoryID = readInteger(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// boolean

				dos.writeBoolean(this.OnlineOrderFlag);

				// Integer

				writeInteger(this.TerritoryID, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public boolean OnlineOrderFlag;

		public boolean getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public int BillToAddressID;

		public int getBillToAddressID() {
			return this.BillToAddressID;
		}

		public int ShipToAddressID;

		public int getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public int ShipMethodID;

		public int getShipMethodID() {
			return this.ShipMethodID;
		}

		public Integer CreditCardID;

		public Integer getCreditCardID() {
			return this.CreditCardID;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Integer CurrencyRateID;

		public Integer getCurrencyRateID() {
			return this.CurrencyRateID;
		}

		public BigDecimal SubTotal;

		public BigDecimal getSubTotal() {
			return this.SubTotal;
		}

		public BigDecimal TaxAmt;

		public BigDecimal getTaxAmt() {
			return this.TaxAmt;
		}

		public BigDecimal Freight;

		public BigDecimal getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public String rowguid;

		public String getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.PurchaseOrderNumber = this.PurchaseOrderNumber;
			other.AccountNumber = this.AccountNumber;
			other.CustomerID = this.CustomerID;
			other.SalesPersonID = this.SalesPersonID;
			other.TerritoryID = this.TerritoryID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.ShipMethodID = this.ShipMethodID;
			other.CreditCardID = this.CreditCardID;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.CurrencyRateID = this.CurrencyRateID;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readBoolean();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.SalesPersonID = readInteger(dis);

					this.TerritoryID = readInteger(dis);

					this.BillToAddressID = dis.readInt();

					this.ShipToAddressID = dis.readInt();

					this.ShipMethodID = dis.readInt();

					this.CreditCardID = readInteger(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.CurrencyRateID = readInteger(dis);

					this.SubTotal = (BigDecimal) dis.readObject();

					this.TaxAmt = (BigDecimal) dis.readObject();

					this.Freight = (BigDecimal) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = readString(dis);

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// boolean

				dos.writeBoolean(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.TerritoryID, dos);

				// int

				dos.writeInt(this.BillToAddressID);

				// int

				dos.writeInt(this.ShipToAddressID);

				// int

				dos.writeInt(this.ShipMethodID);

				// Integer

				writeInteger(this.CreditCardID, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Integer

				writeInteger(this.CurrencyRateID, dos);

				// BigDecimal

				dos.writeObject(this.SubTotal);

				// BigDecimal

				dos.writeObject(this.TaxAmt);

				// BigDecimal

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// String

				writeString(this.rowguid, dos);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",ShipMethodID=" + String.valueOf(ShipMethodID));
			sb.append(",CreditCardID=" + String.valueOf(CreditCardID));
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",CurrencyRateID=" + String.valueOf(CurrencyRateID));
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + rowguid);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public boolean OnlineOrderFlag;

		public boolean getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public String PurchaseOrderNumber;

		public String getPurchaseOrderNumber() {
			return this.PurchaseOrderNumber;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer SalesPersonID;

		public Integer getSalesPersonID() {
			return this.SalesPersonID;
		}

		public Integer TerritoryID;

		public Integer getTerritoryID() {
			return this.TerritoryID;
		}

		public int BillToAddressID;

		public int getBillToAddressID() {
			return this.BillToAddressID;
		}

		public int ShipToAddressID;

		public int getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public int ShipMethodID;

		public int getShipMethodID() {
			return this.ShipMethodID;
		}

		public Integer CreditCardID;

		public Integer getCreditCardID() {
			return this.CreditCardID;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Integer CurrencyRateID;

		public Integer getCurrencyRateID() {
			return this.CurrencyRateID;
		}

		public BigDecimal SubTotal;

		public BigDecimal getSubTotal() {
			return this.SubTotal;
		}

		public BigDecimal TaxAmt;

		public BigDecimal getTaxAmt() {
			return this.TaxAmt;
		}

		public BigDecimal Freight;

		public BigDecimal getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public String rowguid;

		public String getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.PurchaseOrderNumber = this.PurchaseOrderNumber;
			other.AccountNumber = this.AccountNumber;
			other.CustomerID = this.CustomerID;
			other.SalesPersonID = this.SalesPersonID;
			other.TerritoryID = this.TerritoryID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.ShipMethodID = this.ShipMethodID;
			other.CreditCardID = this.CreditCardID;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.CurrencyRateID = this.CurrencyRateID;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = dis.readBoolean();

					this.SalesOrderNumber = readString(dis);

					this.PurchaseOrderNumber = readString(dis);

					this.AccountNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.SalesPersonID = readInteger(dis);

					this.TerritoryID = readInteger(dis);

					this.BillToAddressID = dis.readInt();

					this.ShipToAddressID = dis.readInt();

					this.ShipMethodID = dis.readInt();

					this.CreditCardID = readInteger(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.CurrencyRateID = readInteger(dis);

					this.SubTotal = (BigDecimal) dis.readObject();

					this.TaxAmt = (BigDecimal) dis.readObject();

					this.Freight = (BigDecimal) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = readString(dis);

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// boolean

				dos.writeBoolean(this.OnlineOrderFlag);

				// String

				writeString(this.SalesOrderNumber, dos);

				// String

				writeString(this.PurchaseOrderNumber, dos);

				// String

				writeString(this.AccountNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.SalesPersonID, dos);

				// Integer

				writeInteger(this.TerritoryID, dos);

				// int

				dos.writeInt(this.BillToAddressID);

				// int

				dos.writeInt(this.ShipToAddressID);

				// int

				dos.writeInt(this.ShipMethodID);

				// Integer

				writeInteger(this.CreditCardID, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Integer

				writeInteger(this.CurrencyRateID, dos);

				// BigDecimal

				dos.writeObject(this.SubTotal);

				// BigDecimal

				dos.writeObject(this.TaxAmt);

				// BigDecimal

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// String

				writeString(this.rowguid, dos);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",PurchaseOrderNumber=" + PurchaseOrderNumber);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",SalesPersonID=" + String.valueOf(SalesPersonID));
			sb.append(",TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",ShipMethodID=" + String.valueOf(ShipMethodID));
			sb.append(",CreditCardID=" + String.valueOf(CreditCardID));
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",CurrencyRateID=" + String.valueOf(CurrencyRateID));
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + rowguid);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row4Struct row4 = new row4Struct();
				out_VendasStruct out_Vendas = new out_VendasStruct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out_Vendas");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date OrderDate;
					String TerritoryName;
					String TerritoryGroup;
					String CountryRegionCode;
					String CountryName;
					String OnlineOrderFlag;
					BigDecimal TotalDue_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.OrderDate == null) ? 0 : this.OrderDate.hashCode());

							result = prime * result
									+ ((this.TerritoryName == null) ? 0 : this.TerritoryName.hashCode());

							result = prime * result
									+ ((this.TerritoryGroup == null) ? 0 : this.TerritoryGroup.hashCode());

							result = prime * result
									+ ((this.CountryRegionCode == null) ? 0 : this.CountryRegionCode.hashCode());

							result = prime * result + ((this.CountryName == null) ? 0 : this.CountryName.hashCode());

							result = prime * result
									+ ((this.OnlineOrderFlag == null) ? 0 : this.OnlineOrderFlag.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.OrderDate == null) {
							if (other.OrderDate != null)
								return false;
						} else if (!this.OrderDate.equals(other.OrderDate))
							return false;

						if (this.TerritoryName == null) {
							if (other.TerritoryName != null)
								return false;
						} else if (!this.TerritoryName.equals(other.TerritoryName))
							return false;

						if (this.TerritoryGroup == null) {
							if (other.TerritoryGroup != null)
								return false;
						} else if (!this.TerritoryGroup.equals(other.TerritoryGroup))
							return false;

						if (this.CountryRegionCode == null) {
							if (other.CountryRegionCode != null)
								return false;
						} else if (!this.CountryRegionCode.equals(other.CountryRegionCode))
							return false;

						if (this.CountryName == null) {
							if (other.CountryName != null)
								return false;
						} else if (!this.CountryName.equals(other.CountryName))
							return false;

						if (this.OnlineOrderFlag == null) {
							if (other.OnlineOrderFlag != null)
								return false;
						} else if (!this.OnlineOrderFlag.equals(other.OnlineOrderFlag))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out_VendasStruct out_Vendas_tmp = new out_VendasStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `SalesOrderHeader`.`SalesOrderID`, \n  `SalesOrderHeader`.`RevisionNumber`, \n  `SalesOrderHeader`.`OrderDate`,"
						+ " \n  `SalesOrderHeader`.`DueDate`, \n  `SalesOrderHeader`.`ShipDate`, \n  `SalesOrderHeader`.`Status`, \n  `SalesOrderHeader"
						+ "`.`OnlineOrderFlag`, \n  `SalesOrderHeader`.`SalesOrderNumber`, \n  `SalesOrderHeader`.`PurchaseOrderNumber`, \n  `SalesOrd"
						+ "erHeader`.`AccountNumber`, \n  `SalesOrderHeader`.`CustomerID`, \n  `SalesOrderHeader`.`SalesPersonID`, \n  `SalesOrderHead"
						+ "er`.`TerritoryID`, \n  `SalesOrderHeader`.`BillToAddressID`, \n  `SalesOrderHeader`.`ShipToAddressID`, \n  `SalesOrderHeade"
						+ "r`.`ShipMethodID`, \n  `SalesOrderHeader`.`CreditCardID`, \n  `SalesOrderHeader`.`CreditCardApprovalCode`, \n  `SalesOrderH"
						+ "eader`.`CurrencyRateID`, \n  `SalesOrderHeader`.`SubTotal`, \n  `SalesOrderHeader`.`TaxAmt`, \n  `SalesOrderHeader`.`Freigh"
						+ "t`, \n  `SalesOrderHeader`.`TotalDue`, \n  `SalesOrderHeader`.`Comment`, \n  `SalesOrderHeader`.`rowguid`, \n  `SalesOrderHe"
						+ "ader`.`ModifiedDate`\nFROM `SalesOrderHeader`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.SalesOrderID = 0;
						} else {

							row1.SalesOrderID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.RevisionNumber = 0;
						} else {

							row1.RevisionNumber = rs_tDBInput_1.getShort(2);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.OrderDate = null;
						} else {

							if (rs_tDBInput_1.getString(3) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.OrderDate = rs_tDBInput_1.getTimestamp(3);
								} else {
									row1.OrderDate = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.OrderDate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.DueDate = null;
						} else {

							if (rs_tDBInput_1.getString(4) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.DueDate = rs_tDBInput_1.getTimestamp(4);
								} else {
									row1.DueDate = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.DueDate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.ShipDate = null;
						} else {

							if (rs_tDBInput_1.getString(5) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(5);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.ShipDate = rs_tDBInput_1.getTimestamp(5);
								} else {
									row1.ShipDate = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.ShipDate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.Status = 0;
						} else {

							row1.Status = rs_tDBInput_1.getShort(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.OnlineOrderFlag = false;
						} else {

							row1.OnlineOrderFlag = rs_tDBInput_1.getBoolean(7);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.SalesOrderNumber = null;
						} else {

							row1.SalesOrderNumber = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.PurchaseOrderNumber = null;
						} else {

							row1.PurchaseOrderNumber = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.AccountNumber = null;
						} else {

							row1.AccountNumber = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.CustomerID = 0;
						} else {

							row1.CustomerID = rs_tDBInput_1.getInt(11);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.SalesPersonID = null;
						} else {

							row1.SalesPersonID = rs_tDBInput_1.getInt(12);
							if (rs_tDBInput_1.wasNull()) {
								row1.SalesPersonID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.TerritoryID = null;
						} else {

							row1.TerritoryID = rs_tDBInput_1.getInt(13);
							if (rs_tDBInput_1.wasNull()) {
								row1.TerritoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.BillToAddressID = 0;
						} else {

							row1.BillToAddressID = rs_tDBInput_1.getInt(14);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.ShipToAddressID = 0;
						} else {

							row1.ShipToAddressID = rs_tDBInput_1.getInt(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.ShipMethodID = 0;
						} else {

							row1.ShipMethodID = rs_tDBInput_1.getInt(16);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.CreditCardID = null;
						} else {

							row1.CreditCardID = rs_tDBInput_1.getInt(17);
							if (rs_tDBInput_1.wasNull()) {
								row1.CreditCardID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.CreditCardApprovalCode = null;
						} else {

							row1.CreditCardApprovalCode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.CurrencyRateID = null;
						} else {

							row1.CurrencyRateID = rs_tDBInput_1.getInt(19);
							if (rs_tDBInput_1.wasNull()) {
								row1.CurrencyRateID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.SubTotal = null;
						} else {

							row1.SubTotal = rs_tDBInput_1.getBigDecimal(20);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.TaxAmt = null;
						} else {

							row1.TaxAmt = rs_tDBInput_1.getBigDecimal(21);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.Freight = null;
						} else {

							row1.Freight = rs_tDBInput_1.getBigDecimal(22);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.TotalDue = null;
						} else {

							row1.TotalDue = rs_tDBInput_1.getBigDecimal(23);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.Comment = null;
						} else {

							row1.Comment = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.rowguid = null;
						} else {

							row1.rowguid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.ModifiedDate = null;
						} else {

							if (rs_tDBInput_1.getString(26) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(26);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.ModifiedDate = rs_tDBInput_1.getTimestamp(26);
								} else {
									row1.ModifiedDate = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.ModifiedDate = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterColumns_1 main ] start
						 */

						currentComponent = "tFilterColumns_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						row4.SalesOrderID = row1.SalesOrderID;

						row4.OrderDate = row1.OrderDate;

						row4.OnlineOrderFlag = row1.OnlineOrderFlag;

						row4.TerritoryID = row1.TerritoryID;

						row4.TotalDue = row1.TotalDue;

						nb_line_tFilterColumns_1++;

						tos_count_tFilterColumns_1++;

						/**
						 * [tFilterColumns_1 main ] stop
						 */

						/**
						 * [tFilterColumns_1 process_data_begin ] start
						 */

						currentComponent = "tFilterColumns_1";

						/**
						 * [tFilterColumns_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row5__TerritoryID = row4.TerritoryID;
							if (exprKeyValue_row5__TerritoryID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row5HashKey.TerritoryID = (int) (Integer) exprKeyValue_row5__TerritoryID;
							}

							row5HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row5.lookup(row5HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.TerritoryID = '" +
							// row5HashKey.TerritoryID + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row6"
						///////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row6HashKey.CountryRegionCode = row5.CountryRegionCode;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6'
							// and it contains more one result from keys : row6.CountryRegionCode = '" +
							// row6HashKey.CountryRegionCode + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out_Vendas = null;

// # Output table : 'out_Vendas'
							out_Vendas_tmp.OrderDate = row4.OrderDate;
							out_Vendas_tmp.TotalDue = row4.TotalDue;
							out_Vendas_tmp.TerritoryName = row5.Name;
							out_Vendas_tmp.TerritoryGroup = row5.Group;
							out_Vendas_tmp.CountryRegionCode = row5.CountryRegionCode;
							out_Vendas_tmp.CountryName = row6.Name;
							out_Vendas_tmp.OnlineOrderFlag = row4.OnlineOrderFlag ? "ONLINE" : "OFFLINE";
							out_Vendas = out_Vendas_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "out_Vendas"
						if (out_Vendas != null) {

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out_Vendas");
							}

							operation_finder_tAggregateRow_1.OrderDate = out_Vendas.OrderDate;
							operation_finder_tAggregateRow_1.TerritoryName = out_Vendas.TerritoryName;
							operation_finder_tAggregateRow_1.TerritoryGroup = out_Vendas.TerritoryGroup;
							operation_finder_tAggregateRow_1.CountryRegionCode = out_Vendas.CountryRegionCode;
							operation_finder_tAggregateRow_1.CountryName = out_Vendas.CountryName;
							operation_finder_tAggregateRow_1.OnlineOrderFlag = out_Vendas.OnlineOrderFlag;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.OrderDate = operation_finder_tAggregateRow_1.OrderDate;
								operation_result_tAggregateRow_1.TerritoryName = operation_finder_tAggregateRow_1.TerritoryName;
								operation_result_tAggregateRow_1.TerritoryGroup = operation_finder_tAggregateRow_1.TerritoryGroup;
								operation_result_tAggregateRow_1.CountryRegionCode = operation_finder_tAggregateRow_1.CountryRegionCode;
								operation_result_tAggregateRow_1.CountryName = operation_finder_tAggregateRow_1.CountryName;
								operation_result_tAggregateRow_1.OnlineOrderFlag = operation_finder_tAggregateRow_1.OnlineOrderFlag;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.TotalDue_sum == null) {
								operation_result_tAggregateRow_1.TotalDue_sum = new BigDecimal(0).setScale(4);
							}
							operation_result_tAggregateRow_1.TotalDue_sum = operation_result_tAggregateRow_1.TotalDue_sum
									.add(new BigDecimal(String.valueOf(out_Vendas.TotalDue)));

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

						} // End of branch "out_Vendas"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_1 process_data_end ] start
						 */

						currentComponent = "tFilterColumns_1";

						/**
						 * [tFilterColumns_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE", nb_line_tFilterColumns_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out_Vendas");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/jcerqueira/Desktop/RelatorioVendas.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("OrderDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("TotalDue");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("TerritoryName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("TerritoryGroup");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CountryRegionCode");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CountryName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("OnlineOrderFlag");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row7.OrderDate = aggregated_row_tAggregateRow_1.OrderDate;
					row7.TotalDue = aggregated_row_tAggregateRow_1.TotalDue_sum;

					row7.TerritoryName = aggregated_row_tAggregateRow_1.TerritoryName;

					row7.TerritoryGroup = aggregated_row_tAggregateRow_1.TerritoryGroup;

					row7.CountryRegionCode = aggregated_row_tAggregateRow_1.CountryRegionCode;

					row7.CountryName = aggregated_row_tAggregateRow_1.CountryName;

					row7.OnlineOrderFlag = aggregated_row_tAggregateRow_1.OnlineOrderFlag;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
					if (row7.OrderDate != null) {
						sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row7.OrderDate, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row7.TotalDue != null) {
						sb_tFileOutputDelimited_1
								.append(row7.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row7.TerritoryName != null) {
						sb_tFileOutputDelimited_1.append(row7.TerritoryName);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row7.TerritoryGroup != null) {
						sb_tFileOutputDelimited_1.append(row7.TerritoryGroup);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row7.CountryRegionCode != null) {
						sb_tFileOutputDelimited_1.append(row7.CountryRegionCode);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row7.CountryName != null) {
						sb_tFileOutputDelimited_1.append(row7.CountryName);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row7.OnlineOrderFlag != null) {
						sb_tFileOutputDelimited_1.append(row7.OnlineOrderFlag);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int TerritoryID;

		public int getTerritoryID() {
			return this.TerritoryID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String Group;

		public String getGroup() {
			return this.Group;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.TerritoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.TerritoryID != other.TerritoryID)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.TerritoryID = this.TerritoryID;
			other.Name = this.Name;
			other.CountryRegionCode = this.CountryRegionCode;
			other.Group = this.Group;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.TerritoryID = this.TerritoryID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.TerritoryID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.TerritoryID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.CountryRegionCode = readString(dis, ois);

				this.Group = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.CountryRegionCode, dos, oos);

				writeString(this.Group, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",Name=" + Name);
			sb.append(",CountryRegionCode=" + CountryRegionCode);
			sb.append(",Group=" + Group);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TerritoryID, other.TerritoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int TerritoryID;

		public int getTerritoryID() {
			return this.TerritoryID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String Group;

		public String getGroup() {
			return this.Group;
		}

		public BigDecimal SalesYTD;

		public BigDecimal getSalesYTD() {
			return this.SalesYTD;
		}

		public BigDecimal SalesLastYear;

		public BigDecimal getSalesLastYear() {
			return this.SalesLastYear;
		}

		public BigDecimal CostYTD;

		public BigDecimal getCostYTD() {
			return this.CostYTD;
		}

		public BigDecimal CostLastYear;

		public BigDecimal getCostLastYear() {
			return this.CostLastYear;
		}

		public String rowguid;

		public String getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.TerritoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.TerritoryID != other.TerritoryID)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.TerritoryID = this.TerritoryID;
			other.Name = this.Name;
			other.CountryRegionCode = this.CountryRegionCode;
			other.Group = this.Group;
			other.SalesYTD = this.SalesYTD;
			other.SalesLastYear = this.SalesLastYear;
			other.CostYTD = this.CostYTD;
			other.CostLastYear = this.CostLastYear;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.TerritoryID = this.TerritoryID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.TerritoryID = dis.readInt();

					this.Name = readString(dis);

					this.CountryRegionCode = readString(dis);

					this.Group = readString(dis);

					this.SalesYTD = (BigDecimal) dis.readObject();

					this.SalesLastYear = (BigDecimal) dis.readObject();

					this.CostYTD = (BigDecimal) dis.readObject();

					this.CostLastYear = (BigDecimal) dis.readObject();

					this.rowguid = readString(dis);

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.TerritoryID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CountryRegionCode, dos);

				// String

				writeString(this.Group, dos);

				// BigDecimal

				dos.writeObject(this.SalesYTD);

				// BigDecimal

				dos.writeObject(this.SalesLastYear);

				// BigDecimal

				dos.writeObject(this.CostYTD);

				// BigDecimal

				dos.writeObject(this.CostLastYear);

				// String

				writeString(this.rowguid, dos);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TerritoryID=" + String.valueOf(TerritoryID));
			sb.append(",Name=" + Name);
			sb.append(",CountryRegionCode=" + CountryRegionCode);
			sb.append(",Group=" + Group);
			sb.append(",SalesYTD=" + String.valueOf(SalesYTD));
			sb.append(",SalesLastYear=" + String.valueOf(SalesLastYear));
			sb.append(",CostYTD=" + String.valueOf(CostYTD));
			sb.append(",CostLastYear=" + String.valueOf(CostLastYear));
			sb.append(",rowguid=" + rowguid);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TerritoryID, other.TerritoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tFilterColumns_2 - inputs:(row2) outputs:(row5,row5) | target
				// node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row4,row5,row6) outputs:(out_Vendas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `SalesTerritory`.`TerritoryID`, \n  `SalesTerritory`.`Name`, \n  `SalesTerritory`.`CountryRegionCode`, \n  `Sale"
						+ "sTerritory`.`Group`, \n  `SalesTerritory`.`SalesYTD`, \n  `SalesTerritory`.`SalesLastYear`, \n  `SalesTerritory`.`CostYTD`,"
						+ " \n  `SalesTerritory`.`CostLastYear`, \n  `SalesTerritory`.`rowguid`, \n  `SalesTerritory`.`ModifiedDate`\nFROM `SalesTerrit"
						+ "ory`";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.TerritoryID = 0;
						} else {

							row2.TerritoryID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Name = null;
						} else {

							row2.Name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.CountryRegionCode = null;
						} else {

							row2.CountryRegionCode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.Group = null;
						} else {

							row2.Group = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.SalesYTD = null;
						} else {

							row2.SalesYTD = rs_tDBInput_2.getBigDecimal(5);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.SalesLastYear = null;
						} else {

							row2.SalesLastYear = rs_tDBInput_2.getBigDecimal(6);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.CostYTD = null;
						} else {

							row2.CostYTD = rs_tDBInput_2.getBigDecimal(7);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.CostLastYear = null;
						} else {

							row2.CostLastYear = rs_tDBInput_2.getBigDecimal(8);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.rowguid = null;
						} else {

							row2.rowguid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.ModifiedDate = null;
						} else {

							if (rs_tDBInput_2.getString(10) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(10);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.ModifiedDate = rs_tDBInput_2.getTimestamp(10);
								} else {
									row2.ModifiedDate = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.ModifiedDate = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFilterColumns_2 main ] start
						 */

						currentComponent = "tFilterColumns_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row5.TerritoryID = row2.TerritoryID;

						row5.Name = row2.Name;

						row5.CountryRegionCode = row2.CountryRegionCode;

						row5.Group = row2.Group;

						nb_line_tFilterColumns_2++;

						tos_count_tFilterColumns_2++;

						/**
						 * [tFilterColumns_2 main ] stop
						 */

						/**
						 * [tFilterColumns_2 process_data_begin ] start
						 */

						currentComponent = "tFilterColumns_2";

						/**
						 * [tFilterColumns_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.TerritoryID = row5.TerritoryID;

						row5_HashRow.Name = row5.Name;

						row5_HashRow.CountryRegionCode = row5.CountryRegionCode;

						row5_HashRow.Group = row5.Group;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_2 process_data_end ] start
						 */

						currentComponent = "tFilterColumns_2";

						/**
						 * [tFilterColumns_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE", nb_line_tFilterColumns_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CountryRegionCode == null) ? 0 : this.CountryRegionCode.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.CountryRegionCode == null) {
				if (other.CountryRegionCode != null)
					return false;

			} else if (!this.CountryRegionCode.equals(other.CountryRegionCode))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.CountryRegionCode = this.CountryRegionCode;
			other.Name = this.Name;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.CountryRegionCode = this.CountryRegionCode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.CountryRegionCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegionCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegionCode=" + CountryRegionCode);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CountryRegionCode, other.CountryRegionCode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CountryRegionCode;

		public String getCountryRegionCode() {
			return this.CountryRegionCode;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CountryRegionCode == null) ? 0 : this.CountryRegionCode.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.CountryRegionCode == null) {
				if (other.CountryRegionCode != null)
					return false;

			} else if (!this.CountryRegionCode.equals(other.CountryRegionCode))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.CountryRegionCode = this.CountryRegionCode;
			other.Name = this.Name;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.CountryRegionCode = this.CountryRegionCode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_AdventureWorks2014_Vendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_AdventureWorks2014_Vendas) {

				try {

					int length = 0;

					this.CountryRegionCode = readString(dis);

					this.Name = readString(dis);

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegionCode, dos);

				// String

				writeString(this.Name, dos);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegionCode=" + CountryRegionCode);
			sb.append(",Name=" + Name);
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CountryRegionCode, other.CountryRegionCode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tFilterColumns_3 - inputs:(row3) outputs:(row6,row6) | target
				// node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row4,row5,row6) outputs:(out_Vendas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFilterColumns_3 = 0;

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  `CountryRegion`.`CountryRegionCode`, \n  `CountryRegion`.`Name`, \n  `CountryRegion`.`ModifiedDate`\nFROM `Count"
						+ "ryRegion`";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.CountryRegionCode = null;
						} else {

							row3.CountryRegionCode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.Name = null;
						} else {

							row3.Name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.ModifiedDate = null;
						} else {

							if (rs_tDBInput_3.getString(3) != null) {
								String dateString_tDBInput_3 = rs_tDBInput_3.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_3)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
									row3.ModifiedDate = rs_tDBInput_3.getTimestamp(3);
								} else {
									row3.ModifiedDate = (java.util.Date) year0_tDBInput_3.clone();
								}
							} else {
								row3.ModifiedDate = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tFilterColumns_3 main ] start
						 */

						currentComponent = "tFilterColumns_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						row6.CountryRegionCode = row3.CountryRegionCode;

						row6.Name = row3.Name;

						nb_line_tFilterColumns_3++;

						tos_count_tFilterColumns_3++;

						/**
						 * [tFilterColumns_3 main ] stop
						 */

						/**
						 * [tFilterColumns_3 process_data_begin ] start
						 */

						currentComponent = "tFilterColumns_3";

						/**
						 * [tFilterColumns_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.CountryRegionCode = row6.CountryRegionCode;

						row6_HashRow.Name = row6.Name;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_3 process_data_end ] start
						 */

						currentComponent = "tFilterColumns_3";

						/**
						 * [tFilterColumns_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE", nb_line_tFilterColumns_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final AdventureWorks2014_Vendas AdventureWorks2014_VendasClass = new AdventureWorks2014_Vendas();

		int exitCode = AdventureWorks2014_VendasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = AdventureWorks2014_Vendas.class.getClassLoader().getResourceAsStream(
					"local_project/adventureworks2014_vendas_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = AdventureWorks2014_Vendas.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : AdventureWorks2014_Vendas");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 195712 characters generated by Talend Open Studio for Big Data on the 24 de
 * Junho de 2020 19h24min20s BRT
 ************************************************************************************************/